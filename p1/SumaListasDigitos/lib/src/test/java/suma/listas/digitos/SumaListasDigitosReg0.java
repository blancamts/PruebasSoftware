package suma.listas.digitos;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class SumaListasDigitosReg0 {

    public static boolean debug = false;

    public void assertBooleanArrayEquals(boolean[] expectedArray, boolean[] actualArray) {
        if (expectedArray.length != actualArray.length) {
            throw new AssertionError("Array lengths differ: " + expectedArray.length + " != " + actualArray.length);
        }
        for (int i = 0; i < expectedArray.length; i++) {
            if (expectedArray[i] != actualArray[i]) {
                throw new AssertionError("Arrays differ at index " + i + ": " + expectedArray[i] + " != " + actualArray[i]);
            }
        }
    }

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test001");
        boolean[] booleanArray4 = new boolean[] { true, false, true, false };
        boolean[] booleanArray13 = new boolean[] { true, true, true, true, true, true };
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = java.util.Arrays.equals(booleanArray4, (int) '#', (int) (short) 1, booleanArray13, (int) (byte) 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(35) > toIndex(1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray4);
        assertBooleanArrayEquals(booleanArray4, new boolean[] { true, false, true, false });
        org.junit.Assert.assertNotNull(booleanArray13);
        assertBooleanArrayEquals(booleanArray13, new boolean[] { true, true, true, true, true, true });
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test002");
        double[] doubleArray3 = new double[] { 0, 10L, (short) 100 };
        java.lang.String str4 = java.util.Arrays.toString(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertArrayEquals(doubleArray3, new double[] { 0.0d, 10.0d, 100.0d }, 1.0E-15);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[0.0, 10.0, 100.0]" + "'", str4, "[0.0, 10.0, 100.0]");
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test003");
        double[] doubleArray6 = new double[] { 0.0f, 100.0f, (byte) 100, 100.0f, (short) 0, (-1.0d) };
        java.lang.String str7 = java.util.Arrays.toString(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 0.0d, 100.0d, 100.0d, 100.0d, 0.0d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0.0, 100.0, 100.0, 100.0, 0.0, -1.0]" + "'", str7, "[0.0, 100.0, 100.0, 100.0, 0.0, -1.0]");
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test004");
        boolean boolean2 = java.util.Objects.equals((java.lang.Object) 0L, (java.lang.Object) 10.0f);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test005");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = java.util.Arrays.binarySearch(byteArray0, 10, (int) (short) -1, (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"a\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test006");
        int[] intArray6 = new int[] { 0, 100, (byte) -1, (short) 1, (short) 1, (byte) 10 };
        java.util.function.IntUnaryOperator intUnaryOperator7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSetAll(intArray6, intUnaryOperator7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertArrayEquals(intArray6, new int[] { 0, 100, (-1), 1, 1, 10 });
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test007");
        java.util.Comparator<java.lang.constant.ConstantDesc> constantDescComparator0 = java.util.Collections.reverseOrder();
        org.junit.Assert.assertNotNull(constantDescComparator0);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test008");
        boolean[] booleanArray6 = new boolean[] { false, false, false, true, true, false };
        boolean[] booleanArray13 = new boolean[] { false, true, false, false, true, false };
        boolean boolean14 = java.util.Arrays.equals(booleanArray6, booleanArray13);
        org.junit.Assert.assertNotNull(booleanArray6);
        assertBooleanArrayEquals(booleanArray6, new boolean[] { false, false, false, true, true, false });
        org.junit.Assert.assertNotNull(booleanArray13);
        assertBooleanArrayEquals(booleanArray13, new boolean[] { false, true, false, false, true, false });
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test009");
        java.lang.Object[] objArray3 = new java.lang.Object[] { (-1L), 'a', 100.0f };
        java.lang.Object[] objArray4 = null;
        boolean boolean5 = java.util.Arrays.equals(objArray3, objArray4);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[-1, a, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[-1, a, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test010");
        long[] longArray5 = new long[] { (short) 10, 5, (byte) -1, (short) -1, 100L };
        long[] longArray6 = new long[] {};
        java.util.Arrays.sort(longArray6, 0, (int) (short) 0);
        boolean boolean10 = java.util.Arrays.equals(longArray5, longArray6);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertArrayEquals(longArray5, new long[] { 10L, 5L, (-1L), (-1L), 100L });
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertArrayEquals(longArray6, new long[] {});
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test011");
        boolean[] booleanArray5 = new boolean[] { false, true, true, true, false };
        java.lang.String str6 = java.util.Arrays.toString(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray5);
        assertBooleanArrayEquals(booleanArray5, new boolean[] { false, true, true, true, false });
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[false, true, true, true, false]" + "'", str6, "[false, true, true, true, false]");
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test012");
        int[] intArray3 = new int[] { (short) 0, (byte) 1, (-1) };
        java.util.function.IntBinaryOperator intBinaryOperator4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelPrefix(intArray3, intBinaryOperator4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertArrayEquals(intArray3, new int[] { 0, 1, (-1) });
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test013");
        boolean[] booleanArray2 = new boolean[] { true, true };
        boolean[] booleanArray9 = new boolean[] { true, false, false, true };
        // The following exception was thrown during execution in test generation
        try {
            int int12 = java.util.Arrays.compare(booleanArray2, 10, (int) (byte) 0, booleanArray9, (int) (byte) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(10) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray2);
        assertBooleanArrayEquals(booleanArray2, new boolean[] { true, true });
        org.junit.Assert.assertNotNull(booleanArray9);
        assertBooleanArrayEquals(booleanArray9, new boolean[] { true, false, false, true });
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test014");
        char[] charArray2 = new char[] { '#', '4' };
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray5 = java.util.Arrays.copyOfRange(charArray2, (int) (short) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: 10 > 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertArrayEquals(charArray2, new char[] { '#', '4' });
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test015");
        long[] longArray0 = new long[] {};
        java.util.Arrays.sort(longArray0, 0, (int) (short) 0);
        long[] longArray10 = new long[] { (short) 0, ' ', 'a', '4' };
        // The following exception was thrown during execution in test generation
        try {
            int int13 = java.util.Arrays.mismatch(longArray0, (int) (short) 1, (int) (byte) -1, longArray10, (int) ' ', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(1) > toIndex(-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertArrayEquals(longArray0, new long[] {});
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertArrayEquals(longArray10, new long[] { 0L, 32L, 97L, 52L });
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test016");
        int[] intArray4 = new int[] { (-2), 1, (-1947244222), (short) 100 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator.OfInt ofInt7 = java.util.Arrays.spliterator(intArray4, 5, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertArrayEquals(intArray4, new int[] { (-2), 1, (-1947244222), 100 });
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test017");
        java.util.Comparator<java.lang.Comparable<java.lang.String>> strComparableComparator0 = java.util.Collections.reverseOrder();
        org.junit.Assert.assertNotNull(strComparableComparator0);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test018");
        double[] doubleArray4 = new double[] { 0, (-1.0f), '#', (byte) 100 };
        double[] doubleArray11 = new double[] { (byte) 100, (-1.0d), 100.0f, (byte) -1, (short) -1, 1 };
        int int12 = java.util.Arrays.compare(doubleArray4, doubleArray11);
        double[] doubleArray19 = new double[] { 'a', (short) 0, (short) 1, (-1.0d) };
        // The following exception was thrown during execution in test generation
        try {
            int int22 = java.util.Arrays.mismatch(doubleArray11, (-1947244222), (int) (byte) -1, doubleArray19, 5, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -1947244222");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 0.0d, (-1.0d), 35.0d, 100.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 100.0d, (-1.0d), 100.0d, (-1.0d), (-1.0d), 1.0d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 97.0d, 0.0d, 1.0d, (-1.0d) }, 1.0E-15);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test019");
        short[] shortArray6 = new short[] { (short) 100, (byte) -1, (short) 100, (short) 0, (byte) 100, (short) -1 };
        short[] shortArray10 = new short[] { (short) 100 };
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = java.util.Arrays.equals(shortArray6, 0, 0, shortArray10, (int) (byte) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(100) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertArrayEquals(shortArray6, new short[] { (short) 100, (short) -1, (short) 100, (short) 0, (short) 100, (short) -1 });
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertArrayEquals(shortArray10, new short[] { (short) 100 });
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test020");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = java.util.Arrays.binarySearch(intArray0, (-2), 0, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"a\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test021");
        int[] intArray6 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream10 = java.util.Arrays.stream(intArray6, 100, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: origin(100) > fence(10)");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertArrayEquals(intArray6, new int[] { 0, 1, 5, 10, 32, 97 });
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test022");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(charArray9, 100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(100) > toIndex(1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test023");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray7 = new byte[] {};
        int int8 = java.util.Arrays.compareUnsigned(byteArray6, byteArray7);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray18 = new byte[] {};
        int int19 = java.util.Arrays.compareUnsigned(byteArray17, byteArray18);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = java.util.Arrays.compareUnsigned(byteArray6, 45, 1, byteArray18, (int) (byte) 100, (-1947244222));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(45) > toIndex(1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] {});
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test024");
        long[] longArray5 = new long[] { (-1L), 100, (short) 10, (-1L), 45 };
        long[] longArray6 = new long[] {};
        java.util.Arrays.sort(longArray6, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray6);
        boolean boolean11 = java.util.Arrays.equals(longArray5, longArray6);
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertArrayEquals(longArray5, new long[] { (-1L), 100L, 10L, (-1L), 45L });
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertArrayEquals(longArray6, new long[] {});
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test025");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        java.lang.String str11 = java.util.Arrays.toString(charArray3);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[ , #, a]" + "'", str11, "[ , #, a]");
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test026");
        long[] longArray4 = new long[] { (byte) 0, ' ', (byte) -1, 45 };
        long[] longArray9 = new long[] { (short) 1, (short) 10 };
        // The following exception was thrown during execution in test generation
        try {
            int int12 = java.util.Arrays.compare(longArray4, (int) (byte) 10, 1, longArray9, (int) (short) 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(10) > toIndex(1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertArrayEquals(longArray4, new long[] { 0L, 32L, (-1L), 45L });
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertArrayEquals(longArray9, new long[] { 1L, 10L });
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test027");
        java.lang.Object[] objArray4 = new java.lang.Object[] { (byte) 0, "[hi!, [0.0, 10.0, 100.0], [0.0, 10.0, 100.0], hi!]", 10, (byte) 1 };
        int int5 = java.util.Objects.hash(objArray4);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[0, [hi!, [0.0, 10.0, 100.0], [0.0, 10.0, 100.0], hi!], 10, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[0, [hi!, [0.0, 10.0, 100.0], [0.0, 10.0, 100.0], hi!], 10, 1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-2060931702) + "'", int5 == (-2060931702));
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test028");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray7 = new byte[] {};
        int int8 = java.util.Arrays.compareUnsigned(byteArray6, byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(byteArray6, 45, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(45) > toIndex(1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test029");
        boolean[] booleanArray2 = new boolean[] { true, true };
        boolean[] booleanArray4 = new boolean[] { true };
        boolean boolean5 = java.util.Arrays.equals(booleanArray2, booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray2);
        assertBooleanArrayEquals(booleanArray2, new boolean[] { true, true });
        org.junit.Assert.assertNotNull(booleanArray4);
        assertBooleanArrayEquals(booleanArray4, new boolean[] { true });
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test030");
        java.util.List<java.lang.constant.ConstantDesc> constantDescList2 = java.util.List.of((java.lang.constant.ConstantDesc) "[0.0, 10.0, 100.0]", (java.lang.constant.ConstantDesc) 100.0f);
        org.junit.Assert.assertNotNull(constantDescList2);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test031");
        long[] longArray0 = new long[] {};
        java.util.Arrays.sort(longArray0, 0, (int) (short) 0);
        long[] longArray4 = new long[] {};
        java.util.Arrays.sort(longArray4, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray4);
        int int9 = java.util.Arrays.compare(longArray0, longArray4);
        java.util.stream.LongStream longStream10 = java.util.Arrays.stream(longArray4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.fill(longArray4, 6, (-1947244222), (long) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(6) > toIndex(-1947244222)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertArrayEquals(longArray0, new long[] {});
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertArrayEquals(longArray4, new long[] {});
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(longStream10);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test032");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.Integer>[] intListArray2 = (java.util.List<java.lang.Integer>[]) listArray1;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Integer> intList3 = suma.listas.digitos.SumaListasDigitos.sumaVariasListasDeDigitos(intListArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Debe proporcionar al menos una lista");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertArrayEquals(listArray1, new java.util.List[] {});
        org.junit.Assert.assertNotNull(intListArray2);
        org.junit.Assert.assertArrayEquals(intListArray2, new java.util.List[] {});
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test033");
        double[] doubleArray1 = new double[] { 1 };
        java.util.Arrays.fill(doubleArray1, (double) 6);
        // The following exception was thrown during execution in test generation
        try {
            int int7 = java.util.Arrays.binarySearch(doubleArray1, (-3), (int) '#', (double) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertArrayEquals(doubleArray1, new double[] { 6.0d }, 1.0E-15);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test034");
        char[] charArray0 = new char[] {};
        char[] charArray6 = new char[] { ' ', '#', 'a' };
        char[] charArray12 = new char[] { ' ', '#', '4', '#', 'a' };
        int int13 = java.util.Arrays.compare(charArray6, charArray12);
        char[] charArray17 = new char[] { ' ', '#', 'a' };
        char[] charArray23 = new char[] { ' ', '#', '4', '#', 'a' };
        int int24 = java.util.Arrays.compare(charArray17, charArray23);
        char[] charArray28 = new char[] { ' ', '#', 'a' };
        char[] charArray34 = new char[] { ' ', '#', '4', '#', 'a' };
        int int35 = java.util.Arrays.compare(charArray28, charArray34);
        char[] charArray39 = new char[] { ' ', '#', 'a' };
        char[] charArray45 = new char[] { ' ', '#', '4', '#', 'a' };
        int int46 = java.util.Arrays.compare(charArray39, charArray45);
        char[] charArray50 = new char[] { ' ', '#', 'a' };
        char[] charArray56 = new char[] { ' ', '#', '4', '#', 'a' };
        int int57 = java.util.Arrays.compare(charArray50, charArray56);
        java.util.List<char[]> charArrayList58 = java.util.List.of(charArray23, charArray28, charArray39, charArray56);
        char[][] charArray59 = new char[][] { charArray12, charArray28 };
        java.util.ArrayList<char[]> charArrayList60 = new java.util.ArrayList<char[]>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList60, charArray59);
        char[] charArray65 = new char[] { ' ', '#', 'a' };
        char[] charArray71 = new char[] { ' ', '#', '4', '#', 'a' };
        int int72 = java.util.Arrays.compare(charArray65, charArray71);
        boolean boolean73 = charArrayList60.contains((java.lang.Object) charArray65);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean76 = java.util.Arrays.equals(charArray0, (-2060931702), (-2), charArray65, (int) (short) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -2060931702");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertArrayEquals(charArray0, new char[] {});
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertArrayEquals(charArray6, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertArrayEquals(charArray12, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 45 + "'", int13 == 45);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertArrayEquals(charArray17, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertArrayEquals(charArray23, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 45 + "'", int24 == 45);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertArrayEquals(charArray28, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertArrayEquals(charArray34, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 45 + "'", int35 == 45);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertArrayEquals(charArray39, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertArrayEquals(charArray45, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 45 + "'", int46 == 45);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertArrayEquals(charArray50, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertArrayEquals(charArray56, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 45 + "'", int57 == 45);
        org.junit.Assert.assertNotNull(charArrayList58);
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertArrayEquals(charArray65, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertArrayEquals(charArray71, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 45 + "'", int72 == 45);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test035");
        short[] shortArray3 = new short[] { (byte) 0, (short) 0, (byte) 1 };
        short[] shortArray6 = java.util.Arrays.copyOfRange(shortArray3, (int) (byte) 1, 5);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = java.util.Arrays.binarySearch(shortArray3, (int) (byte) 0, 10, (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertArrayEquals(shortArray3, new short[] { (short) 0, (short) 0, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertArrayEquals(shortArray6, new short[] { (short) 0, (short) 1, (short) 0, (short) 0 });
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test036");
        long[] longArray2 = new long[] { 100L, 1L };
        java.util.Arrays.sort(longArray2);
        java.util.function.IntToLongFunction intToLongFunction4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.setAll(longArray2, intToLongFunction4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertArrayEquals(longArray2, new long[] { 1L, 100L });
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test037");
        long[] longArray0 = new long[] {};
        java.util.Arrays.sort(longArray0, 0, (int) (short) 0);
        long[] longArray4 = new long[] {};
        java.util.Arrays.sort(longArray4, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray4);
        int int9 = java.util.Arrays.compare(longArray0, longArray4);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray12 = java.util.Arrays.copyOfRange(longArray4, (int) (short) 100, (-3));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: 100 > -3");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertArrayEquals(longArray0, new long[] {});
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertArrayEquals(longArray4, new long[] {});
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test038");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        java.util.function.UnaryOperator<char[]> charArrayUnaryOperator2 = null;
        // The following exception was thrown during execution in test generation
        try {
            charArrayList1.replaceAll(charArrayUnaryOperator2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArrayList1);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test039");
        boolean[] booleanArray1 = new boolean[] { false };
        java.lang.String str2 = java.util.Arrays.toString(booleanArray1);
        org.junit.Assert.assertNotNull(booleanArray1);
        assertBooleanArrayEquals(booleanArray1, new boolean[] { false });
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[false]" + "'", str2, "[false]");
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test040");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        charArrayList0.clear();
        char[] charArray7 = new char[] { ' ', '#', 'a' };
        char[] charArray13 = new char[] { ' ', '#', '4', '#', 'a' };
        int int14 = java.util.Arrays.compare(charArray7, charArray13);
        char[] charArray18 = new char[] { ' ', '#', 'a' };
        char[] charArray24 = new char[] { ' ', '#', '4', '#', 'a' };
        int int25 = java.util.Arrays.compare(charArray18, charArray24);
        char[] charArray29 = new char[] { ' ', '#', 'a' };
        char[] charArray35 = new char[] { ' ', '#', '4', '#', 'a' };
        int int36 = java.util.Arrays.compare(charArray29, charArray35);
        char[] charArray40 = new char[] { ' ', '#', 'a' };
        char[] charArray46 = new char[] { ' ', '#', '4', '#', 'a' };
        int int47 = java.util.Arrays.compare(charArray40, charArray46);
        char[] charArray51 = new char[] { ' ', '#', 'a' };
        char[] charArray57 = new char[] { ' ', '#', '4', '#', 'a' };
        int int58 = java.util.Arrays.compare(charArray51, charArray57);
        java.util.List<char[]> charArrayList59 = java.util.List.of(charArray24, charArray29, charArray40, charArray57);
        char[][] charArray60 = new char[][] { charArray13, charArray29 };
        java.util.ArrayList<char[]> charArrayList61 = new java.util.ArrayList<char[]>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList61, charArray60);
        char[] charArray66 = new char[] { ' ', '#', 'a' };
        char[] charArray72 = new char[] { ' ', '#', '4', '#', 'a' };
        int int73 = java.util.Arrays.compare(charArray66, charArray72);
        boolean boolean74 = charArrayList61.contains((java.lang.Object) charArray66);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray75 = charArrayList0.set((int) (byte) 1, charArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 1 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertArrayEquals(charArray7, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertArrayEquals(charArray13, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 45 + "'", int14 == 45);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertArrayEquals(charArray18, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertArrayEquals(charArray24, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 45 + "'", int25 == 45);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertArrayEquals(charArray29, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertArrayEquals(charArray35, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 45 + "'", int36 == 45);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertArrayEquals(charArray40, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertArrayEquals(charArray46, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 45 + "'", int47 == 45);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertArrayEquals(charArray51, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertArrayEquals(charArray57, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 45 + "'", int58 == 45);
        org.junit.Assert.assertNotNull(charArrayList59);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertArrayEquals(charArray66, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertArrayEquals(charArray72, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 45 + "'", int73 == 45);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test041");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        charArrayList0.clear();
        char[] charArray7 = new char[] { ' ', '#', 'a' };
        char[] charArray13 = new char[] { ' ', '#', '4', '#', 'a' };
        int int14 = java.util.Arrays.compare(charArray7, charArray13);
        char[] charArray18 = new char[] { ' ', '#', 'a' };
        char[] charArray24 = new char[] { ' ', '#', '4', '#', 'a' };
        int int25 = java.util.Arrays.compare(charArray18, charArray24);
        char[] charArray29 = new char[] { ' ', '#', 'a' };
        char[] charArray35 = new char[] { ' ', '#', '4', '#', 'a' };
        int int36 = java.util.Arrays.compare(charArray29, charArray35);
        char[] charArray40 = new char[] { ' ', '#', 'a' };
        char[] charArray46 = new char[] { ' ', '#', '4', '#', 'a' };
        int int47 = java.util.Arrays.compare(charArray40, charArray46);
        java.util.List<char[]> charArrayList48 = java.util.List.of(charArray13, charArray18, charArray29, charArray46);
        // The following exception was thrown during execution in test generation
        try {
            charArrayList0.add((int) (byte) -1, charArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertArrayEquals(charArray7, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertArrayEquals(charArray13, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 45 + "'", int14 == 45);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertArrayEquals(charArray18, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertArrayEquals(charArray24, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 45 + "'", int25 == 45);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertArrayEquals(charArray29, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertArrayEquals(charArray35, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 45 + "'", int36 == 45);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertArrayEquals(charArray40, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertArrayEquals(charArray46, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 45 + "'", int47 == 45);
        org.junit.Assert.assertNotNull(charArrayList48);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test042");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 1 };
        java.lang.String str3 = java.util.Arrays.toString(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[-1, 1]" + "'", str3, "[-1, 1]");
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test043");
        int int3 = java.util.Objects.checkFromToIndex(10, (int) (short) 100, (int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test044");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        java.util.List<char[]> charArrayList71 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections.copy((java.util.List<char[]>) charArrayList57, charArrayList71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.List.size()\" because \"src\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test045");
        double[] doubleArray1 = new double[] { 1 };
        java.util.Arrays.fill(doubleArray1, (double) 6);
        double[] doubleArray6 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            int int9 = java.util.Arrays.mismatch(doubleArray1, 100, (int) (byte) 10, doubleArray6, 45, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(100) > toIndex(10)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertArrayEquals(doubleArray1, new double[] { 6.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] {}, 1.0E-15);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test046");
        float[] floatArray2 = new float[] { (-2060931702), 0.0f };
        float[] floatArray11 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int13 = java.util.Arrays.binarySearch(floatArray11, (float) (short) 1);
        java.util.Arrays.sort(floatArray11);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = java.util.Arrays.compare(floatArray2, (-3), (int) (byte) -1, floatArray11, 0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertArrayEquals(floatArray2, new float[] { (-2.0609317E9f), 0.0f }, (float) 1.0E-15);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertArrayEquals(floatArray11, new float[] { (-1.0f), 0.0f, 0.0f, 1.0f, 1.0f, 97.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test047");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(charArray9, 6, 45);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 45");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test048");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        java.util.List<char[]> charArrayList44 = java.util.List.of(charArray9, charArray14, charArray25, charArray42);
        java.lang.String str45 = java.util.Objects.toString((java.lang.Object) charArrayList44);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArrayList44);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test049");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.Integer>[] intListArray2 = (java.util.List<java.lang.Integer>[]) listArray1;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Integer> intList3 = suma.listas.digitos.SumaListasDigitos.sumaVariasListasDeDigitos((java.util.List<java.lang.Integer>[]) listArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Debe proporcionar al menos una lista");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertArrayEquals(listArray1, new java.util.List[] {});
        org.junit.Assert.assertNotNull(intListArray2);
        org.junit.Assert.assertArrayEquals(intListArray2, new java.util.List[] {});
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test050");
        int[] intArray5 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray5);
        java.util.Arrays.sort(intArray5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream10 = java.util.Arrays.stream(intArray5, (int) (short) 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: origin(10) > fence(-1)");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test051");
        int[] intArray6 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray6);
        boolean boolean8 = java.util.Objects.isNull((java.lang.Object) intArray6);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertArrayEquals(intArray6, new int[] { 0, 1, 5, 10, 32, 97 });
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test052");
        float[] floatArray6 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int8 = java.util.Arrays.binarySearch(floatArray6, (float) (short) 1);
        float[] floatArray13 = new float[] { (short) 10, (byte) 100 };
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = java.util.Arrays.equals(floatArray6, (int) (byte) 10, (int) (byte) -1, floatArray13, (int) (short) 10, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(10) > toIndex(-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertArrayEquals(floatArray6, new float[] { 97.0f, (-1.0f), 0.0f, 1.0f, 0.0f, 1.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertArrayEquals(floatArray13, new float[] { 10.0f, 100.0f }, (float) 1.0E-15);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test053");
        double[] doubleArray4 = new double[] { 0, (-1.0f), '#', (byte) 100 };
        double[] doubleArray11 = new double[] { (byte) 100, (-1.0d), 100.0f, (byte) -1, (short) -1, 1 };
        int int12 = java.util.Arrays.compare(doubleArray4, doubleArray11);
        java.util.function.IntToDoubleFunction intToDoubleFunction13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.setAll(doubleArray4, intToDoubleFunction13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 0.0d, (-1.0d), 35.0d, 100.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 100.0d, (-1.0d), 100.0d, (-1.0d), (-1.0d), 1.0d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test054");
        long[] longArray0 = new long[] {};
        java.util.Arrays.sort(longArray0, 0, (int) (short) 0);
        long[] longArray4 = new long[] {};
        java.util.Arrays.sort(longArray4, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray4);
        int int9 = java.util.Arrays.compare(longArray0, longArray4);
        java.util.Arrays.parallelSort(longArray0);
        java.lang.String str11 = java.util.Arrays.toString(longArray0);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertArrayEquals(longArray0, new long[] {});
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertArrayEquals(longArray4, new long[] {});
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test055");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        java.util.List<char[]> charArrayList44 = java.util.List.of(charArray9, charArray14, charArray25, charArray42);
        float[] floatArray51 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int53 = java.util.Arrays.binarySearch(floatArray51, (float) (short) 1);
        java.util.Arrays.fill(floatArray51, (float) 100);
        boolean boolean56 = java.util.Objects.equals((java.lang.Object) charArray42, (java.lang.Object) floatArray51);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArrayList44);
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertArrayEquals(floatArray51, new float[] { 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test056");
        java.util.function.Supplier<java.lang.String> strSupplier1 = null;
        java.io.Serializable serializable2 = java.util.Objects.requireNonNull((java.io.Serializable) (byte) 0, strSupplier1);
        org.junit.Assert.assertEquals("'" + serializable2 + "' != '" + (byte) 0 + "'", serializable2, (byte) 0);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test057");
        long[] longArray4 = new long[] { 10L, 10L, 100L, (short) -1 };
        long[] longArray9 = new long[] { 10L, 10L, 100L, (short) -1 };
        long[] longArray14 = new long[] { 10L, 10L, 100L, (short) -1 };
        long[] longArray19 = new long[] { 10L, 10L, 100L, (short) -1 };
        long[][] longArray20 = new long[][] { longArray4, longArray9, longArray14, longArray19 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Stream<long[]> longArrayStream23 = java.util.Arrays.stream(longArray20, (-3), (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertArrayEquals(longArray4, new long[] { 10L, 10L, 100L, (-1L) });
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertArrayEquals(longArray9, new long[] { 10L, 10L, 100L, (-1L) });
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertArrayEquals(longArray14, new long[] { 10L, 10L, 100L, (-1L) });
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertArrayEquals(longArray19, new long[] { 10L, 10L, 100L, (-1L) });
        org.junit.Assert.assertNotNull(longArray20);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test058");
        float[] floatArray6 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int8 = java.util.Arrays.binarySearch(floatArray6, (float) (short) 1);
        java.util.Arrays.fill(floatArray6, (float) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = java.util.Arrays.binarySearch(floatArray6, (int) 'a', (-2), (float) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(97) > toIndex(-2)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertArrayEquals(floatArray6, new float[] { 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test059");
        java.util.Enumeration<java.util.Collection> collectionEnumeration0 = java.util.Collections.emptyEnumeration();
        org.junit.Assert.assertNotNull(collectionEnumeration0);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test060");
        java.util.Enumeration<java.util.SortedSet<byte[]>> byteArraySetEnumeration0 = java.util.Collections.emptyEnumeration();
        java.util.ArrayList<java.util.SortedSet<byte[]>> byteArraySetList1 = java.util.Collections.list(byteArraySetEnumeration0);
        org.junit.Assert.assertNotNull(byteArraySetEnumeration0);
        org.junit.Assert.assertNotNull(byteArraySetList1);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test061");
        java.util.Map<java.lang.Comparable<java.lang.String>, java.lang.String> strComparableMap2 = java.util.Collections.singletonMap((java.lang.Comparable<java.lang.String>) "[hi!, [0.0, 10.0, 100.0], [0.0, 10.0, 100.0], hi!]", "");
        org.junit.Assert.assertNotNull(strComparableMap2);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test062");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray3 = charArrayList1.get(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArrayList1);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test063");
        boolean[] booleanArray6 = new boolean[] { true, true, true, true, false, true };
        boolean[] booleanArray9 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int12 = java.util.Arrays.compare(booleanArray6, 10, (int) (short) -1, booleanArray9, 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(10) > toIndex(-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray6);
        assertBooleanArrayEquals(booleanArray6, new boolean[] { true, true, true, true, false, true });
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test064");
        int[] intArray5 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray5);
        java.util.Arrays.sort(intArray5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.sort(intArray5, (int) (short) 100, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(100) > toIndex(2)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test065");
        short[] shortArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.sort(shortArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"a\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test066");
        short[] shortArray6 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray9 = java.util.Arrays.copyOfRange(shortArray6, 0, (int) ' ');
        java.lang.String str10 = java.util.Arrays.toString(shortArray6);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertArrayEquals(shortArray6, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[10, 100, 10, -1, 100, 1]" + "'", str10, "[10, 100, 10, -1, 100, 1]");
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test067");
        int[] intArray5 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray5);
        int[] intArray14 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray14);
        java.util.Arrays.sort(intArray14);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = java.util.Arrays.mismatch(intArray5, (-1947244222), 1, intArray14, (int) 'a', (-2));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -1947244222");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertArrayEquals(intArray14, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test068");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray7 = new byte[] {};
        int int8 = java.util.Arrays.compareUnsigned(byteArray6, byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(byteArray7, (int) '#', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(35) > toIndex(1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test069");
        int[] intArray5 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream9 = java.util.Arrays.stream(intArray5, (int) 'a', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: origin(97) > fence(35)");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test070");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray12 = java.util.Arrays.copyOf(charArray3, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test071");
        float[] floatArray6 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int8 = java.util.Arrays.binarySearch(floatArray6, (float) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(floatArray6, (-2), (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertArrayEquals(floatArray6, new float[] { 97.0f, (-1.0f), 0.0f, 1.0f, 0.0f, 1.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test072");
        java.lang.Object[] objArray0 = null;
        java.lang.String str1 = java.util.Arrays.toString(objArray0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "null" + "'", str1, "null");
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test073");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray7 = new byte[] {};
        int int8 = java.util.Arrays.compareUnsigned(byteArray6, byteArray7);
        byte[] byteArray9 = new byte[] {};
        int int10 = java.util.Arrays.mismatch(byteArray7, byteArray9);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray13 = java.util.Arrays.copyOfRange(byteArray9, (int) (byte) 10, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: 10 > 3");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test074");
        java.util.SortedMap<long[], byte[]> longArrayMap0 = java.util.Collections.emptySortedMap();
        java.lang.Class<long[]> longArrayClass1 = null;
        java.lang.Class<byte[]> byteArrayClass2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<long[], byte[]> longArrayMap3 = java.util.Collections.checkedMap((java.util.Map<long[], byte[]>) longArrayMap0, longArrayClass1, byteArrayClass2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArrayMap0);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test075");
        double[] doubleArray1 = new double[] { (-1.0d) };
        double[] doubleArray4 = java.util.Arrays.copyOfRange(doubleArray1, (int) (short) 0, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(doubleArray4, 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(10) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertArrayEquals(doubleArray1, new double[] { (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray4);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test076");
        long[] longArray2 = new long[] { 100L, 1L };
        java.util.Arrays.sort(longArray2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(longArray2, 6, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(6) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertArrayEquals(longArray2, new long[] { 1L, 100L });
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test077");
        float[] floatArray5 = new float[] { 100, (byte) -1, (-1L), (-1.0f), 45 };
        // The following exception was thrown during execution in test generation
        try {
            int int9 = java.util.Arrays.binarySearch(floatArray5, (-3), (int) (short) 0, (float) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertArrayEquals(floatArray5, new float[] { 100.0f, (-1.0f), (-1.0f), (-1.0f), 45.0f }, (float) 1.0E-15);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test078");
        java.util.Map<java.lang.Cloneable, java.util.SequencedSet<byte[]>> cloneableMap0 = java.util.Collections.emptyMap();
        org.junit.Assert.assertNotNull(cloneableMap0);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test079");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        boolean[] booleanArray6 = new boolean[] { true };
        boolean boolean7 = java.util.Arrays.equals(booleanArray4, booleanArray6);
        org.junit.Assert.assertNotNull(booleanArray4);
        assertBooleanArrayEquals(booleanArray4, new boolean[] { false, false, false, false });
        org.junit.Assert.assertNotNull(booleanArray6);
        assertBooleanArrayEquals(booleanArray6, new boolean[] { true });
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test080");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        java.lang.Object[] objArray71 = charArrayList57.toArray();
        java.util.function.UnaryOperator<char[]> charArrayUnaryOperator72 = null;
        // The following exception was thrown during execution in test generation
        try {
            charArrayList57.replaceAll(charArrayUnaryOperator72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[[ , #, 4, #, a], [ , #, a]]");
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test081");
        long[] longArray0 = new long[] {};
        java.util.Arrays.sort(longArray0, 0, (int) (short) 0);
        long[] longArray4 = new long[] {};
        java.util.Arrays.sort(longArray4, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray4);
        int int9 = java.util.Arrays.compare(longArray0, longArray4);
        long[] longArray10 = new long[] {};
        java.util.Arrays.sort(longArray10, 0, (int) (short) 0);
        long[] longArray14 = new long[] {};
        java.util.Arrays.sort(longArray14, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray14);
        int int19 = java.util.Arrays.compare(longArray10, longArray14);
        int int20 = java.util.Arrays.compare(longArray0, longArray10);
        long[] longArray23 = new long[] {};
        java.util.Arrays.sort(longArray23, 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = java.util.Arrays.compareUnsigned(longArray10, (int) (short) 100, (int) (byte) 10, longArray23, 4, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(100) > toIndex(10)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertArrayEquals(longArray0, new long[] {});
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertArrayEquals(longArray4, new long[] {});
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertArrayEquals(longArray10, new long[] {});
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertArrayEquals(longArray14, new long[] {});
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertArrayEquals(longArray23, new long[] {});
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test082");
        int[] intArray5 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray5);
        java.util.Arrays.sort(intArray5);
        java.util.function.IntUnaryOperator intUnaryOperator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSetAll(intArray5, intUnaryOperator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test083");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray7 = new byte[] {};
        int int8 = java.util.Arrays.compareUnsigned(byteArray6, byteArray7);
        byte[] byteArray9 = new byte[] {};
        int int10 = java.util.Arrays.mismatch(byteArray7, byteArray9);
        java.lang.String str11 = java.util.Arrays.toString(byteArray9);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test084");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray7 = new byte[] {};
        int int8 = java.util.Arrays.compareUnsigned(byteArray6, byteArray7);
        byte[] byteArray9 = new byte[] {};
        int int10 = java.util.Arrays.mismatch(byteArray7, byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray18 = new byte[] {};
        int int19 = java.util.Arrays.compareUnsigned(byteArray17, byteArray18);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 };
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray33 = new byte[] {};
        int int34 = java.util.Arrays.compareUnsigned(byteArray32, byteArray33);
        byte[] byteArray35 = new byte[] {};
        int int36 = java.util.Arrays.mismatch(byteArray33, byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray44 = new byte[] {};
        int int45 = java.util.Arrays.compareUnsigned(byteArray43, byteArray44);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray53 = new byte[] {};
        int int54 = java.util.Arrays.compareUnsigned(byteArray52, byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray62 = new byte[] {};
        int int63 = java.util.Arrays.compareUnsigned(byteArray61, byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray71 = new byte[] {};
        int int72 = java.util.Arrays.compareUnsigned(byteArray70, byteArray71);
        byte[] byteArray73 = new byte[] {};
        int int74 = java.util.Arrays.mismatch(byteArray71, byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray82 = new byte[] {};
        int int83 = java.util.Arrays.compareUnsigned(byteArray81, byteArray82);
        byte[] byteArray84 = new byte[] {};
        int int85 = java.util.Arrays.mismatch(byteArray82, byteArray84);
        java.util.List<byte[]> byteArrayList86 = java.util.List.of(byteArray9, byteArray17, byteArray25, byteArray35, byteArray44, byteArray52, byteArray62, byteArray73, byteArray84);
        java.util.Arrays.fill(byteArray62, (int) (short) 0, (int) (byte) 0, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] {});
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertArrayEquals(byteArray25, new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertArrayEquals(byteArray32, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertArrayEquals(byteArray33, new byte[] {});
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6 + "'", int34 == 6);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertArrayEquals(byteArray35, new byte[] {});
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertArrayEquals(byteArray43, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertArrayEquals(byteArray44, new byte[] {});
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 6 + "'", int45 == 6);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertArrayEquals(byteArray52, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertArrayEquals(byteArray53, new byte[] {});
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertArrayEquals(byteArray61, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertArrayEquals(byteArray62, new byte[] {});
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertArrayEquals(byteArray70, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertArrayEquals(byteArray71, new byte[] {});
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 6 + "'", int72 == 6);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertArrayEquals(byteArray73, new byte[] {});
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertArrayEquals(byteArray81, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertArrayEquals(byteArray82, new byte[] {});
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 6 + "'", int83 == 6);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertArrayEquals(byteArray84, new byte[] {});
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(byteArrayList86);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test085");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        java.lang.Object obj11 = null;
        boolean boolean12 = java.util.Objects.equals((java.lang.Object) charArray3, obj11);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test086");
        boolean[] booleanArray2 = new boolean[] { true, false };
        boolean[] booleanArray11 = new boolean[] { false, false, true, true, true, false };
        // The following exception was thrown during execution in test generation
        try {
            int int14 = java.util.Arrays.compare(booleanArray2, 1, (int) (byte) 10, booleanArray11, (int) (short) 1, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray2);
        assertBooleanArrayEquals(booleanArray2, new boolean[] { true, false });
        org.junit.Assert.assertNotNull(booleanArray11);
        assertBooleanArrayEquals(booleanArray11, new boolean[] { false, false, true, true, true, false });
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test087");
        int[] intArray6 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray6);
        int int9 = java.util.Arrays.binarySearch(intArray6, (-2));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.sort(intArray6, 3, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertArrayEquals(intArray6, new int[] { 0, 1, 5, 10, 32, 97 });
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test088");
        java.lang.Object[] objArray0 = new java.lang.Object[] {};
        java.util.Arrays.fill(objArray0, (java.lang.Object) (short) 10);
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertArrayEquals(objArray0, new java.lang.Object[] {});
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test089");
        suma.listas.digitos.SumaListasDigitos sumaListasDigitos0 = new suma.listas.digitos.SumaListasDigitos();
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test090");
        long[] longArray2 = new long[] { 100L, 1L };
        java.util.Arrays.sort(longArray2);
        java.util.function.IntToLongFunction intToLongFunction4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSetAll(longArray2, intToLongFunction4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertArrayEquals(longArray2, new long[] { 1L, 100L });
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test091");
        java.util.SortedSet<byte[]> byteArraySet0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedSet<byte[]> byteArraySet1 = java.util.Collections.synchronizedSortedSet(byteArraySet0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test092");
        int[] intArray5 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray5);
        java.lang.String str7 = java.util.Arrays.toString(intArray5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[-2060931702, -1947244222, -1, 0, 45]" + "'", str7, "[-2060931702, -1947244222, -1, 0, 45]");
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test093");
        int[] intArray6 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray6);
        java.util.function.IntUnaryOperator intUnaryOperator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSetAll(intArray6, intUnaryOperator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertArrayEquals(intArray6, new int[] { 0, 1, 5, 10, 32, 97 });
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test094");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        java.util.List<char[]> charArrayList44 = java.util.List.of(charArray9, charArray14, charArray25, charArray42);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.sort(charArray9, 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArrayList44);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test095");
        double[] doubleArray1 = new double[] { (-1.0d) };
        double[] doubleArray4 = java.util.Arrays.copyOfRange(doubleArray1, (int) (short) 0, (int) 'a');
        double[] doubleArray6 = new double[] { 1 };
        java.util.Arrays.fill(doubleArray6, (double) 6);
        boolean boolean9 = java.util.Arrays.equals(doubleArray4, doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertArrayEquals(doubleArray1, new double[] { (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertArrayEquals(doubleArray6, new double[] { 6.0d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test096");
        float[] floatArray6 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int8 = java.util.Arrays.binarySearch(floatArray6, (float) (short) 1);
        java.util.Arrays.fill(floatArray6, (float) 100);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray13 = java.util.Arrays.copyOfRange(floatArray6, (-1), 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: arraycopy: source index -1 out of bounds for float[6]");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertArrayEquals(floatArray6, new float[] { 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test097");
        java.util.List<java.lang.Comparable<java.lang.String>> strComparableList1 = java.util.Collections.singletonList((java.lang.Comparable<java.lang.String>) "");
        org.junit.Assert.assertNotNull(strComparableList1);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test098");
        int[] intArray5 = new int[] { (byte) 1, ' ', (short) 1, ' ', 'a' };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.sort(intArray5, (int) (byte) 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(100) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { 1, 32, 1, 32, 97 });
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test099");
        java.util.SortedMap<long[], byte[]> longArrayMap0 = java.util.Collections.emptySortedMap();
        java.util.Map<long[], byte[]> longArrayMap1 = java.util.Collections.synchronizedMap((java.util.Map<long[], byte[]>) longArrayMap0);
        org.junit.Assert.assertNotNull(longArrayMap0);
        org.junit.Assert.assertNotNull(longArrayMap1);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test100");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        java.lang.Object[] objArray71 = charArrayList57.toArray();
        char[] charArray72 = charArrayList57.removeLast();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray75 = java.util.Arrays.copyOfRange(charArray72, 3, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: 3 > 1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[[ , #, 4, #, a], [ , #, a]]");
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertArrayEquals(charArray72, new char[] { ' ', '#', 'a' });
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test101");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = java.util.Arrays.binarySearch(charArray9, (int) ' ', (int) '#', '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test102");
        double[] doubleArray4 = new double[] { 0, (-1.0f), '#', (byte) 100 };
        double[] doubleArray11 = new double[] { (byte) 100, (-1.0d), 100.0f, (byte) -1, (short) -1, 1 };
        int int12 = java.util.Arrays.compare(doubleArray4, doubleArray11);
        double[] doubleArray16 = new double[] { (-1.0d) };
        double[] doubleArray19 = java.util.Arrays.copyOfRange(doubleArray16, (int) (short) 0, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int22 = java.util.Arrays.mismatch(doubleArray4, (int) (short) 0, (int) (byte) -1, doubleArray19, (-1), 45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(0) > toIndex(-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 0.0d, (-1.0d), 35.0d, 100.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 100.0d, (-1.0d), 100.0d, (-1.0d), (-1.0d), 1.0d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertArrayEquals(doubleArray16, new double[] { (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test103");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        charArrayList0.clear();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray4 = charArrayList0.get(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 100 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArrayList1);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test104");
        float[] floatArray6 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int8 = java.util.Arrays.binarySearch(floatArray6, (float) (short) 1);
        java.util.Arrays.fill(floatArray6, (float) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.sort(floatArray6, 6, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(6) > toIndex(5)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertArrayEquals(floatArray6, new float[] { 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test105");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        charArrayList57.trimToSize();
        charArrayList57.clear();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray73 = charArrayList57.removeLast();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test106");
        java.util.Comparator<java.util.Set> setComparator0 = java.util.Collections.reverseOrder();
        org.junit.Assert.assertNotNull(setComparator0);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test107");
        long[] longArray5 = new long[] { 1, ' ', 3, (-2), 10 };
        // The following exception was thrown during execution in test generation
        try {
            int int9 = java.util.Arrays.binarySearch(longArray5, (int) (byte) 0, (int) (short) -1, (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(0) > toIndex(-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertArrayEquals(longArray5, new long[] { 1L, 32L, 3L, (-2L), 10L });
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test108");
        float[] floatArray4 = new float[] { 0.0f, 45, 0, (byte) 0 };
        // The following exception was thrown during execution in test generation
        try {
            int int8 = java.util.Arrays.binarySearch(floatArray4, (int) (short) 1, 0, (float) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(1) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertArrayEquals(floatArray4, new float[] { 0.0f, 45.0f, 0.0f, 0.0f }, (float) 1.0E-15);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test109");
        short[] shortArray4 = new short[] { (byte) 0, (short) 0, (short) 0, (byte) 10 };
        short[] shortArray6 = new short[] { (byte) 1 };
        int int7 = java.util.Arrays.compare(shortArray4, shortArray6);
        short[] shortArray14 = new short[] { (byte) 0, (short) 0, (short) 0, (byte) 10 };
        short[] shortArray16 = new short[] { (byte) 1 };
        int int17 = java.util.Arrays.compare(shortArray14, shortArray16);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = java.util.Arrays.compareUnsigned(shortArray6, (-1947244222), (-1), shortArray16, (int) '#', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -1947244222");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertArrayEquals(shortArray4, new short[] { (short) 0, (short) 0, (short) 0, (short) 10 });
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertArrayEquals(shortArray6, new short[] { (short) 1 });
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertArrayEquals(shortArray14, new short[] { (short) 0, (short) 0, (short) 0, (short) 10 });
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertArrayEquals(shortArray16, new short[] { (short) 1 });
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test110");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        charArrayList57.trimToSize();
        charArrayList57.clear();
        long[] longArray73 = new long[] {};
        java.util.Arrays.sort(longArray73, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray73);
        int int78 = charArrayList57.indexOf((java.lang.Object) longArray73);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(longArray73);
        org.junit.Assert.assertArrayEquals(longArray73, new long[] {});
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test111");
        int[] intArray5 = new int[] { 4, 100, 'a', (byte) 10, 3 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator.OfInt ofInt8 = java.util.Arrays.spliterator(intArray5, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: origin(0) > fence(-1)");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { 4, 100, 97, 10, 3 });
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test112");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        int int2 = charArrayList0.size();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray3 = charArrayList0.getLast();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test113");
        java.lang.Integer[] intArray9 = new java.lang.Integer[] { 0, (-1947244222), 45, 2, 0, 45, 1, (-2), 5 };
        java.util.ArrayList<java.lang.Integer> intList10 = new java.util.ArrayList<java.lang.Integer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) intList10, intArray9);
        java.lang.Integer[] intArray28 = new java.lang.Integer[] { 45, (-2), 0, 0, 6, (-2060931702), (-1947244222), 6, 5, 0, (-1947244222), (-2), 2, 5, 6, 6 };
        java.util.ArrayList<java.lang.Integer> intList29 = new java.util.ArrayList<java.lang.Integer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) intList29, intArray28);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Integer> intList31 = suma.listas.digitos.SumaListasDigitos.sumaDosListasDeDigitos((java.util.List<java.lang.Integer>) intList10, (java.util.List<java.lang.Integer>) intList29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: So?lo se permiten di?gitos entre 0 y 9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertArrayEquals(intArray9, new java.lang.Integer[] { 0, (-1947244222), 45, 2, 0, 45, 1, (-2), 5 });
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertArrayEquals(intArray28, new java.lang.Integer[] { 45, (-2), 0, 0, 6, (-2060931702), (-1947244222), 6, 5, 0, (-1947244222), (-2), 2, 5, 6, 6 });
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test114");
        boolean boolean1 = java.util.Objects.nonNull((java.lang.Object) 10.0f);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test115");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        java.lang.Object[] objArray71 = charArrayList57.toArray();
        java.lang.String str72 = java.util.Arrays.deepToString(objArray71);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[[ , #, 4, #, a], [ , #, a]]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[[ , #, 4, #, a], [ , #, a]]" + "'", str72, "[[ , #, 4, #, a], [ , #, a]]");
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test116");
        float[] floatArray5 = new float[] { 0, 1, (-1), 100, 45 };
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray8 = java.util.Arrays.copyOfRange(floatArray5, (int) (byte) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: arraycopy: source index -1 out of bounds for float[5]");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertArrayEquals(floatArray5, new float[] { 0.0f, 1.0f, (-1.0f), 100.0f, 45.0f }, (float) 1.0E-15);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test117");
        float[] floatArray6 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int8 = java.util.Arrays.binarySearch(floatArray6, (float) (short) 1);
        java.util.Arrays.fill(floatArray6, (float) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = java.util.Arrays.binarySearch(floatArray6, 0, (int) ' ', (float) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertArrayEquals(floatArray6, new float[] { 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test118");
        int[] intArray6 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray6);
        int int9 = java.util.Arrays.binarySearch(intArray6, (-2));
        int[] intArray12 = java.util.Arrays.copyOfRange(intArray6, 3, (int) '#');
        int[] intArray20 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray20);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = java.util.Arrays.compareUnsigned(intArray6, 4, (int) (byte) 1, intArray20, (-3), 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(4) > toIndex(1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertArrayEquals(intArray6, new int[] { 0, 1, 5, 10, 32, 97 });
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertArrayEquals(intArray20, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test119");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray7 = new byte[] {};
        int int8 = java.util.Arrays.compareUnsigned(byteArray6, byteArray7);
        byte[] byteArray9 = new byte[] {};
        int int10 = java.util.Arrays.mismatch(byteArray7, byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray18 = new byte[] {};
        int int19 = java.util.Arrays.compareUnsigned(byteArray17, byteArray18);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 };
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray33 = new byte[] {};
        int int34 = java.util.Arrays.compareUnsigned(byteArray32, byteArray33);
        byte[] byteArray35 = new byte[] {};
        int int36 = java.util.Arrays.mismatch(byteArray33, byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray44 = new byte[] {};
        int int45 = java.util.Arrays.compareUnsigned(byteArray43, byteArray44);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray53 = new byte[] {};
        int int54 = java.util.Arrays.compareUnsigned(byteArray52, byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray62 = new byte[] {};
        int int63 = java.util.Arrays.compareUnsigned(byteArray61, byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray71 = new byte[] {};
        int int72 = java.util.Arrays.compareUnsigned(byteArray70, byteArray71);
        byte[] byteArray73 = new byte[] {};
        int int74 = java.util.Arrays.mismatch(byteArray71, byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray82 = new byte[] {};
        int int83 = java.util.Arrays.compareUnsigned(byteArray81, byteArray82);
        byte[] byteArray84 = new byte[] {};
        int int85 = java.util.Arrays.mismatch(byteArray82, byteArray84);
        java.util.List<byte[]> byteArrayList86 = java.util.List.of(byteArray9, byteArray17, byteArray25, byteArray35, byteArray44, byteArray52, byteArray62, byteArray73, byteArray84);
        java.util.Arrays.sort(byteArray73);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] {});
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertArrayEquals(byteArray25, new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertArrayEquals(byteArray32, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertArrayEquals(byteArray33, new byte[] {});
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6 + "'", int34 == 6);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertArrayEquals(byteArray35, new byte[] {});
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertArrayEquals(byteArray43, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertArrayEquals(byteArray44, new byte[] {});
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 6 + "'", int45 == 6);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertArrayEquals(byteArray52, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertArrayEquals(byteArray53, new byte[] {});
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertArrayEquals(byteArray61, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertArrayEquals(byteArray62, new byte[] {});
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertArrayEquals(byteArray70, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertArrayEquals(byteArray71, new byte[] {});
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 6 + "'", int72 == 6);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertArrayEquals(byteArray73, new byte[] {});
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertArrayEquals(byteArray81, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertArrayEquals(byteArray82, new byte[] {});
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 6 + "'", int83 == 6);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertArrayEquals(byteArray84, new byte[] {});
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(byteArrayList86);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test120");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        java.lang.Object[] objArray71 = charArrayList57.toArray();
        java.lang.Object obj72 = charArrayList57.clone();
        char[] charArray73 = charArrayList57.removeLast();
        java.util.ArrayList<char[]> charArrayList75 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList76 = charArrayList75.reversed();
        charArrayList75.clear();
        java.lang.Object[] objArray78 = charArrayList75.toArray();
        boolean boolean80 = charArrayList75.equals((java.lang.Object) false);
        char[] charArray84 = new char[] { ' ', '#', 'a' };
        char[] charArray90 = new char[] { ' ', '#', '4', '#', 'a' };
        int int91 = java.util.Arrays.compare(charArray84, charArray90);
        charArrayList75.addFirst(charArray84);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray93 = charArrayList57.set((int) 'a', charArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 97 out of bounds for length 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[[ , #, 4, #, a], [ , #, a]]");
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertArrayEquals(charArray73, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArrayList76);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertArrayEquals(objArray78, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertArrayEquals(charArray84, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray90);
        org.junit.Assert.assertArrayEquals(charArray90, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 45 + "'", int91 == 45);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test121");
        float[] floatArray6 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int8 = java.util.Arrays.binarySearch(floatArray6, (float) (short) 1);
        java.util.Arrays.sort(floatArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.fill(floatArray6, 3, (-1), (float) 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(3) > toIndex(-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertArrayEquals(floatArray6, new float[] { (-1.0f), 0.0f, 0.0f, 1.0f, 1.0f, 97.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test122");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        charArrayList57.trimToSize();
        charArrayList57.clear();
        charArrayList57.ensureCapacity((int) (short) -1);
        java.util.function.UnaryOperator<char[]> charArrayUnaryOperator75 = null;
        // The following exception was thrown during execution in test generation
        try {
            charArrayList57.replaceAll(charArrayUnaryOperator75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test123");
        float[] floatArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(floatArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"a\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test124");
        boolean[] booleanArray3 = new boolean[] { false, false, true };
        java.lang.String str4 = java.util.Arrays.toString(booleanArray3);
        org.junit.Assert.assertNotNull(booleanArray3);
        assertBooleanArrayEquals(booleanArray3, new boolean[] { false, false, true });
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[false, false, true]" + "'", str4, "[false, false, true]");
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test125");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        java.util.Iterator<char[]> charArrayItor2 = charArrayList1.iterator();
        java.util.Collections.reverse(charArrayList1);
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(charArrayItor2);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test126");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        int int71 = charArrayList57.size();
        java.util.ArrayList<char[]> charArrayList72 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList73 = charArrayList72.reversed();
        charArrayList72.clear();
        java.lang.Object[] objArray75 = charArrayList72.toArray();
        int int76 = java.util.Collections.indexOfSubList((java.util.List<char[]>) charArrayList57, (java.util.List<char[]>) charArrayList72);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<char[]> charArrayList79 = charArrayList72.subList((int) (byte) -1, (-3));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: fromIndex = -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(charArrayList73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertArrayEquals(objArray75, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test127");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        char[] charArray75 = new char[] { ' ', '#', 'a' };
        char[] charArray81 = new char[] { ' ', '#', '4', '#', 'a' };
        int int82 = java.util.Arrays.compare(charArray75, charArray81);
        // The following exception was thrown during execution in test generation
        try {
            charArrayList57.add((-2060932013), charArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -2060932013, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertArrayEquals(charArray75, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertArrayEquals(charArray81, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 45 + "'", int82 == 45);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test128");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = java.util.Arrays.binarySearch(charArray9, (int) (short) 100, (-2060931702), ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(100) > toIndex(-2060931702)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test129");
        long[] longArray0 = new long[] {};
        java.util.Arrays.sort(longArray0, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray0);
        boolean boolean5 = java.util.Objects.isNull((java.lang.Object) longArray0);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertArrayEquals(longArray0, new long[] {});
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test130");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        java.util.ArrayList<char[]> charArrayList11 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList12 = charArrayList11.reversed();
        charArrayList11.clear();
        java.lang.Object[] objArray14 = charArrayList11.toArray();
        boolean boolean16 = charArrayList11.equals((java.lang.Object) false);
        char[] charArray18 = new char[] { ' ' };
        charArrayList11.addLast(charArray18);
        boolean boolean20 = java.util.Arrays.equals(charArray9, charArray18);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArrayList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertArrayEquals(objArray14, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertArrayEquals(charArray18, new char[] { ' ' });
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test131");
        short[] shortArray4 = new short[] { (byte) 0, (short) 0, (short) 0, (byte) 10 };
        short[] shortArray6 = new short[] { (byte) 1 };
        int int7 = java.util.Arrays.compare(shortArray4, shortArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(shortArray6, (int) (short) -1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertArrayEquals(shortArray4, new short[] { (short) 0, (short) 0, (short) 0, (short) 10 });
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertArrayEquals(shortArray6, new short[] { (short) 1 });
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test132");
        boolean[] booleanArray4 = new boolean[] { false, false, true, true };
        boolean[] booleanArray7 = new boolean[] { true, false };
        int int8 = java.util.Arrays.mismatch(booleanArray4, booleanArray7);
        boolean[] booleanArray13 = new boolean[] { false, false, true, true };
        boolean[] booleanArray16 = new boolean[] { true, false };
        int int17 = java.util.Arrays.mismatch(booleanArray13, booleanArray16);
        boolean boolean18 = java.util.Arrays.equals(booleanArray4, booleanArray16);
        org.junit.Assert.assertNotNull(booleanArray4);
        assertBooleanArrayEquals(booleanArray4, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray7);
        assertBooleanArrayEquals(booleanArray7, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(booleanArray13);
        assertBooleanArrayEquals(booleanArray13, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray16);
        assertBooleanArrayEquals(booleanArray16, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test133");
        double[] doubleArray1 = new double[] { 1 };
        java.util.Arrays.fill(doubleArray1, (double) 6);
        java.lang.String str4 = java.util.Objects.toString((java.lang.Object) doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertArrayEquals(doubleArray1, new double[] { 6.0d }, 1.0E-15);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test134");
        long[] longArray0 = new long[] {};
        java.util.Arrays.sort(longArray0, 0, (int) (short) 0);
        long[] longArray4 = new long[] {};
        java.util.Arrays.sort(longArray4, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray4);
        int int9 = java.util.Arrays.compare(longArray0, longArray4);
        java.util.Arrays.parallelSort(longArray0);
        java.util.function.IntToLongFunction intToLongFunction11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSetAll(longArray0, intToLongFunction11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertArrayEquals(longArray0, new long[] {});
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertArrayEquals(longArray4, new long[] {});
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test135");
        // The following exception was thrown during execution in test generation
        try {
            long long3 = java.util.Objects.checkFromIndexSize((long) (byte) 0, (long) 0, (long) (-2));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [0, 0 + 0) out of bounds for length -2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test136");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray7 = new byte[] {};
        int int8 = java.util.Arrays.compareUnsigned(byteArray6, byteArray7);
        java.util.Arrays.parallelSort(byteArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(byteArray6, (int) (short) 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) -1, (byte) -1, (byte) -1, (byte) 0, (byte) 100, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test137");
        int[] intArray6 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray6);
        int int9 = java.util.Arrays.binarySearch(intArray6, (-2));
        int[] intArray12 = java.util.Arrays.copyOfRange(intArray6, 3, (int) '#');
        int[] intArray21 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray21);
        int int24 = java.util.Arrays.binarySearch(intArray21, (-2));
        int[] intArray27 = java.util.Arrays.copyOfRange(intArray21, 3, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = java.util.Arrays.equals(intArray6, (-1), (int) (short) 10, intArray27, (int) (short) 1, (-2060931702));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertArrayEquals(intArray6, new int[] { 0, 1, 5, 10, 32, 97 });
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertArrayEquals(intArray21, new int[] { 0, 1, 5, 10, 32, 97 });
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(intArray27);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test138");
        java.util.ArrayList<java.lang.Cloneable> cloneableList1 = new java.util.ArrayList<java.lang.Cloneable>((int) (byte) 1);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test139");
        long[] longArray0 = new long[] {};
        java.util.Arrays.sort(longArray0, 0, (int) (short) 0);
        long[] longArray4 = new long[] {};
        java.util.Arrays.sort(longArray4, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray4);
        int int9 = java.util.Arrays.compare(longArray0, longArray4);
        long[] longArray16 = new long[] { (short) 10, (byte) 0, 100L, '4' };
        long[] longArray17 = new long[] {};
        java.util.Arrays.sort(longArray17, 0, (int) (short) 0);
        int int21 = java.util.Arrays.compareUnsigned(longArray16, longArray17);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = java.util.Arrays.equals(longArray4, (int) (short) 1, 0, longArray16, (-1), 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(1) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertArrayEquals(longArray0, new long[] {});
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertArrayEquals(longArray4, new long[] {});
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertArrayEquals(longArray16, new long[] { 10L, 0L, 100L, 52L });
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertArrayEquals(longArray17, new long[] {});
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test140");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.lang.String[] strArray6 = new java.lang.String[] { "", "[hi!, [0.0, 10.0, 100.0], [0.0, 10.0, 100.0], hi!]", "", "" };
        int int7 = java.util.Arrays.compare(strArray1, strArray6);
        java.util.Arrays.parallelSort(strArray1);
        java.lang.String str9 = java.util.Arrays.deepToString((java.lang.Object[]) strArray1);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertArrayEquals(strArray1, new java.lang.String[] { "" });
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertArrayEquals(strArray6, new java.lang.String[] { "", "[hi!, [0.0, 10.0, 100.0], [0.0, 10.0, 100.0], hi!]", "", "" });
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test141");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        java.util.Iterator<char[]> charArrayItor2 = charArrayList1.iterator();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray4 = charArrayList1.remove((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 100 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(charArrayItor2);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test142");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray7 = new byte[] {};
        int int8 = java.util.Arrays.compareUnsigned(byteArray6, byteArray7);
        byte[] byteArray9 = new byte[] {};
        int int10 = java.util.Arrays.mismatch(byteArray7, byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray18 = new byte[] {};
        int int19 = java.util.Arrays.compareUnsigned(byteArray17, byteArray18);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 };
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray33 = new byte[] {};
        int int34 = java.util.Arrays.compareUnsigned(byteArray32, byteArray33);
        byte[] byteArray35 = new byte[] {};
        int int36 = java.util.Arrays.mismatch(byteArray33, byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray44 = new byte[] {};
        int int45 = java.util.Arrays.compareUnsigned(byteArray43, byteArray44);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray53 = new byte[] {};
        int int54 = java.util.Arrays.compareUnsigned(byteArray52, byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray62 = new byte[] {};
        int int63 = java.util.Arrays.compareUnsigned(byteArray61, byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray71 = new byte[] {};
        int int72 = java.util.Arrays.compareUnsigned(byteArray70, byteArray71);
        byte[] byteArray73 = new byte[] {};
        int int74 = java.util.Arrays.mismatch(byteArray71, byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray82 = new byte[] {};
        int int83 = java.util.Arrays.compareUnsigned(byteArray81, byteArray82);
        byte[] byteArray84 = new byte[] {};
        int int85 = java.util.Arrays.mismatch(byteArray82, byteArray84);
        java.util.List<byte[]> byteArrayList86 = java.util.List.of(byteArray9, byteArray17, byteArray25, byteArray35, byteArray44, byteArray52, byteArray62, byteArray73, byteArray84);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.sort(byteArray17, (-2060931702), 5);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -2060931702");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] {});
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertArrayEquals(byteArray25, new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertArrayEquals(byteArray32, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertArrayEquals(byteArray33, new byte[] {});
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6 + "'", int34 == 6);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertArrayEquals(byteArray35, new byte[] {});
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertArrayEquals(byteArray43, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertArrayEquals(byteArray44, new byte[] {});
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 6 + "'", int45 == 6);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertArrayEquals(byteArray52, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertArrayEquals(byteArray53, new byte[] {});
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertArrayEquals(byteArray61, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertArrayEquals(byteArray62, new byte[] {});
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertArrayEquals(byteArray70, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertArrayEquals(byteArray71, new byte[] {});
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 6 + "'", int72 == 6);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertArrayEquals(byteArray73, new byte[] {});
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertArrayEquals(byteArray81, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertArrayEquals(byteArray82, new byte[] {});
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 6 + "'", int83 == 6);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertArrayEquals(byteArray84, new byte[] {});
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(byteArrayList86);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test143");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) -1, (byte) 100, (byte) 0 };
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) -1, (byte) 100, (byte) 0 };
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) -1, (byte) 100, (byte) 0 };
        byte[] byteArray27 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) -1, (byte) 100, (byte) 0 };
        byte[][] byteArray28 = new byte[][] { byteArray6, byteArray13, byteArray20, byteArray27 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<byte[]> byteArraySpliterator31 = java.util.Arrays.spliterator(byteArray28, (int) ' ', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) -1, (byte) 100, (byte) 0 });
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertArrayEquals(byteArray13, new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) -1, (byte) 100, (byte) 0 });
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertArrayEquals(byteArray20, new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) -1, (byte) 100, (byte) 0 });
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertArrayEquals(byteArray27, new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) -1, (byte) 100, (byte) 0 });
        org.junit.Assert.assertNotNull(byteArray28);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test144");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        charArrayList57.trimToSize();
        charArrayList57.clear();
        charArrayList57.ensureCapacity((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<char[]> charArrayList77 = charArrayList57.subList((int) (short) 100, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(100) > toIndex(-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test145");
        long[] longArray0 = new long[] {};
        java.util.Arrays.sort(longArray0, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray0);
        java.util.Arrays.fill(longArray0, (-1L));
        // The following exception was thrown during execution in test generation
        try {
            int int10 = java.util.Arrays.binarySearch(longArray0, (int) (short) 100, (-1), (long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(100) > toIndex(-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertArrayEquals(longArray0, new long[] {});
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test146");
        java.util.Comparator<java.util.Collection> collectionComparator0 = java.util.Collections.reverseOrder();
        org.junit.Assert.assertNotNull(collectionComparator0);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test147");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        int int71 = charArrayList57.size();
        java.util.ArrayList<char[]> charArrayList72 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList73 = charArrayList72.reversed();
        charArrayList72.clear();
        java.lang.Object[] objArray75 = charArrayList72.toArray();
        int int76 = java.util.Collections.indexOfSubList((java.util.List<char[]>) charArrayList57, (java.util.List<char[]>) charArrayList72);
        java.util.Iterator<char[]> charArrayItor77 = charArrayList72.iterator();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray78 = charArrayList72.getLast();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(charArrayList73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertArrayEquals(objArray75, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(charArrayItor77);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test148");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        charArrayList0.clear();
        java.lang.Object[] objArray3 = charArrayList0.toArray();
        boolean boolean5 = charArrayList0.equals((java.lang.Object) false);
        char[] charArray7 = new char[] { ' ' };
        charArrayList0.addLast(charArray7);
        char[] charArray9 = charArrayList0.getLast();
        java.util.Random random10 = null;
        java.util.Collections.shuffle((java.util.List<char[]>) charArrayList0, random10);
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertArrayEquals(objArray3, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertArrayEquals(charArray7, new char[] { ' ' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ' });
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test149");
        java.util.Map map0 = java.util.Collections.EMPTY_MAP;
        org.junit.Assert.assertNotNull(map0);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test150");
        java.util.SortedMap<long[], byte[]> longArrayMap0 = java.util.Collections.emptySortedMap();
        java.util.SortedMap<long[], byte[]> longArrayMap1 = java.util.Collections.synchronizedSortedMap(longArrayMap0);
        org.junit.Assert.assertNotNull(longArrayMap0);
        org.junit.Assert.assertNotNull(longArrayMap1);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test151");
        double[] doubleArray4 = new double[] { 0, (-1.0f), '#', (byte) 100 };
        double[] doubleArray11 = new double[] { (byte) 100, (-1.0d), 100.0f, (byte) -1, (short) -1, 1 };
        int int12 = java.util.Arrays.compare(doubleArray4, doubleArray11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream15 = java.util.Arrays.stream(doubleArray4, (-2060932013), (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -2060932013");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 0.0d, (-1.0d), 35.0d, 100.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 100.0d, (-1.0d), 100.0d, (-1.0d), (-1.0d), 1.0d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test152");
        short[] shortArray3 = new short[] { (byte) 0, (short) 0, (byte) 1 };
        short[] shortArray6 = java.util.Arrays.copyOfRange(shortArray3, (int) (byte) 1, 5);
        java.lang.String str7 = java.util.Arrays.toString(shortArray6);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertArrayEquals(shortArray3, new short[] { (short) 0, (short) 0, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertArrayEquals(shortArray6, new short[] { (short) 0, (short) 1, (short) 0, (short) 0 });
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0, 1, 0, 0]" + "'", str7, "[0, 1, 0, 0]");
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test153");
        int[] intArray5 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray5);
        java.util.Arrays.sort(intArray5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(intArray5, (int) '#', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(35) > toIndex(-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test154");
        int[] intArray5 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray5);
        int[] intArray12 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray12);
        java.util.Arrays.sort(intArray12);
        int int15 = java.util.Arrays.compareUnsigned(intArray5, intArray12);
        int[] intArray23 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray23);
        java.util.Arrays.sort(intArray23);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = java.util.Arrays.equals(intArray12, (int) (short) 10, (-2), intArray23, 6, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(10) > toIndex(-2)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertArrayEquals(intArray12, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertArrayEquals(intArray23, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test155");
        float[] floatArray3 = new float[] { 10, 1L, 100 };
        float[] floatArray5 = java.util.Arrays.copyOf(floatArray3, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.fill(floatArray5, (int) (short) -1, (-2), (float) 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(-1) > toIndex(-2)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertArrayEquals(floatArray3, new float[] { 10.0f, 1.0f, 100.0f }, (float) 1.0E-15);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertArrayEquals(floatArray5, new float[] { 10.0f }, (float) 1.0E-15);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test156");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray7 = new byte[] {};
        int int8 = java.util.Arrays.compareUnsigned(byteArray6, byteArray7);
        byte[] byteArray9 = new byte[] {};
        int int10 = java.util.Arrays.mismatch(byteArray7, byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray18 = new byte[] {};
        int int19 = java.util.Arrays.compareUnsigned(byteArray17, byteArray18);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 };
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray33 = new byte[] {};
        int int34 = java.util.Arrays.compareUnsigned(byteArray32, byteArray33);
        byte[] byteArray35 = new byte[] {};
        int int36 = java.util.Arrays.mismatch(byteArray33, byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray44 = new byte[] {};
        int int45 = java.util.Arrays.compareUnsigned(byteArray43, byteArray44);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray53 = new byte[] {};
        int int54 = java.util.Arrays.compareUnsigned(byteArray52, byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray62 = new byte[] {};
        int int63 = java.util.Arrays.compareUnsigned(byteArray61, byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray71 = new byte[] {};
        int int72 = java.util.Arrays.compareUnsigned(byteArray70, byteArray71);
        byte[] byteArray73 = new byte[] {};
        int int74 = java.util.Arrays.mismatch(byteArray71, byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray82 = new byte[] {};
        int int83 = java.util.Arrays.compareUnsigned(byteArray81, byteArray82);
        byte[] byteArray84 = new byte[] {};
        int int85 = java.util.Arrays.mismatch(byteArray82, byteArray84);
        java.util.List<byte[]> byteArrayList86 = java.util.List.of(byteArray9, byteArray17, byteArray25, byteArray35, byteArray44, byteArray52, byteArray62, byteArray73, byteArray84);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(byteArray35, (int) (byte) 10, (-1947244222));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(10) > toIndex(-1947244222)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] {});
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertArrayEquals(byteArray25, new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertArrayEquals(byteArray32, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertArrayEquals(byteArray33, new byte[] {});
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6 + "'", int34 == 6);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertArrayEquals(byteArray35, new byte[] {});
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertArrayEquals(byteArray43, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertArrayEquals(byteArray44, new byte[] {});
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 6 + "'", int45 == 6);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertArrayEquals(byteArray52, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertArrayEquals(byteArray53, new byte[] {});
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertArrayEquals(byteArray61, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertArrayEquals(byteArray62, new byte[] {});
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertArrayEquals(byteArray70, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertArrayEquals(byteArray71, new byte[] {});
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 6 + "'", int72 == 6);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertArrayEquals(byteArray73, new byte[] {});
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertArrayEquals(byteArray81, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertArrayEquals(byteArray82, new byte[] {});
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 6 + "'", int83 == 6);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertArrayEquals(byteArray84, new byte[] {});
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(byteArrayList86);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test157");
        short[] shortArray4 = new short[] { (byte) 0, (short) 0, (short) 0, (byte) 10 };
        short[] shortArray6 = new short[] { (byte) 1 };
        int int7 = java.util.Arrays.compare(shortArray4, shortArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(shortArray6, (int) 'a', 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(97) > toIndex(3)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertArrayEquals(shortArray4, new short[] { (short) 0, (short) 0, (short) 0, (short) 10 });
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertArrayEquals(shortArray6, new short[] { (short) 1 });
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test158");
        int[] intArray6 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray6);
        java.util.stream.IntStream intStream8 = java.util.Arrays.stream(intArray6);
        int[] intArray15 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray15);
        java.util.stream.IntStream intStream17 = java.util.Arrays.stream(intArray15);
        int[] intArray24 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray24);
        java.util.stream.IntStream intStream26 = java.util.Arrays.stream(intArray24);
        int[] intArray33 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray33);
        java.util.stream.IntStream intStream35 = java.util.Arrays.stream(intArray33);
        int[] intArray42 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray42);
        java.util.stream.IntStream intStream44 = java.util.Arrays.stream(intArray42);
        int[] intArray51 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray51);
        java.util.stream.IntStream intStream53 = java.util.Arrays.stream(intArray51);
        int[] intArray60 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray60);
        java.util.stream.IntStream intStream62 = java.util.Arrays.stream(intArray60);
        int[] intArray69 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray69);
        java.util.stream.IntStream intStream71 = java.util.Arrays.stream(intArray69);
        java.util.List<java.util.stream.IntStream> intStreamList72 = java.util.List.of(intStream8, intStream17, intStream26, intStream35, intStream44, intStream53, intStream62, intStream71);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertArrayEquals(intArray6, new int[] { 0, 1, 5, 10, 32, 97 });
        org.junit.Assert.assertNotNull(intStream8);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertArrayEquals(intArray15, new int[] { 0, 1, 5, 10, 32, 97 });
        org.junit.Assert.assertNotNull(intStream17);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertArrayEquals(intArray24, new int[] { 0, 1, 5, 10, 32, 97 });
        org.junit.Assert.assertNotNull(intStream26);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertArrayEquals(intArray33, new int[] { 0, 1, 5, 10, 32, 97 });
        org.junit.Assert.assertNotNull(intStream35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertArrayEquals(intArray42, new int[] { 0, 1, 5, 10, 32, 97 });
        org.junit.Assert.assertNotNull(intStream44);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertArrayEquals(intArray51, new int[] { 0, 1, 5, 10, 32, 97 });
        org.junit.Assert.assertNotNull(intStream53);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertArrayEquals(intArray60, new int[] { 0, 1, 5, 10, 32, 97 });
        org.junit.Assert.assertNotNull(intStream62);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertArrayEquals(intArray69, new int[] { 0, 1, 5, 10, 32, 97 });
        org.junit.Assert.assertNotNull(intStream71);
        org.junit.Assert.assertNotNull(intStreamList72);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test159");
        java.util.List<int[]> intArrayList0 = java.util.List.of();
        org.junit.Assert.assertNotNull(intArrayList0);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test160");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        charArrayList57.clear();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray73 = charArrayList57.get(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test161");
        double[] doubleArray1 = new double[] { (-1.0d) };
        double[] doubleArray4 = java.util.Arrays.copyOfRange(doubleArray1, (int) (short) 0, (int) 'a');
        double[] doubleArray8 = new double[] { 1 };
        java.util.Arrays.fill(doubleArray8, (double) 6);
        java.util.Arrays.parallelSort(doubleArray8);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = java.util.Arrays.equals(doubleArray1, 0, (-2), doubleArray8, 4, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(0) > toIndex(-2)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertArrayEquals(doubleArray1, new double[] { (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertArrayEquals(doubleArray8, new double[] { 6.0d }, 1.0E-15);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test162");
        long[] longArray0 = new long[] {};
        java.util.Arrays.sort(longArray0, 0, (int) (short) 0);
        long[] longArray4 = new long[] {};
        java.util.Arrays.sort(longArray4, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray4);
        int int9 = java.util.Arrays.compare(longArray0, longArray4);
        java.util.stream.LongStream longStream10 = java.util.Arrays.stream(longArray4);
        java.util.stream.LongStream longStream11 = java.util.Objects.requireNonNull(longStream10);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertArrayEquals(longArray0, new long[] {});
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertArrayEquals(longArray4, new long[] {});
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(longStream10);
        org.junit.Assert.assertNotNull(longStream11);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test163");
        short[] shortArray4 = new short[] { (byte) 0, (short) 0, (short) 0, (byte) 10 };
        short[] shortArray6 = new short[] { (byte) 1 };
        int int7 = java.util.Arrays.compare(shortArray4, shortArray6);
        short[] shortArray14 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray17 = java.util.Arrays.copyOfRange(shortArray14, 0, (int) ' ');
        java.util.Arrays.parallelSort(shortArray17);
        java.util.Arrays.fill(shortArray17, (short) 0);
        boolean boolean21 = java.util.Arrays.equals(shortArray4, shortArray17);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertArrayEquals(shortArray4, new short[] { (short) 0, (short) 0, (short) 0, (short) 10 });
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertArrayEquals(shortArray6, new short[] { (short) 1 });
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertArrayEquals(shortArray14, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test164");
        short[] shortArray4 = new short[] { (byte) 0, (short) 0, (short) 0, (byte) 10 };
        short[] shortArray6 = new short[] { (byte) 1 };
        int int7 = java.util.Arrays.compare(shortArray4, shortArray6);
        short[] shortArray12 = new short[] { (byte) 0, (short) 0, (short) 0, (byte) 10 };
        short[] shortArray14 = new short[] { (byte) 1 };
        int int15 = java.util.Arrays.compare(shortArray12, shortArray14);
        boolean boolean16 = java.util.Arrays.equals(shortArray4, shortArray14);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertArrayEquals(shortArray4, new short[] { (short) 0, (short) 0, (short) 0, (short) 10 });
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertArrayEquals(shortArray6, new short[] { (short) 1 });
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertArrayEquals(shortArray12, new short[] { (short) 0, (short) 0, (short) 0, (short) 10 });
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertArrayEquals(shortArray14, new short[] { (short) 1 });
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test165");
        java.util.SortedSet<java.util.SortedMap<long[], byte[]>> longArrayMapSet0 = java.util.Collections.emptySortedSet();
        org.junit.Assert.assertNotNull(longArrayMapSet0);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test166");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        java.util.List<char[]> charArrayList44 = java.util.List.of(charArray9, charArray14, charArray25, charArray42);
        java.lang.String str45 = java.util.Objects.toString((java.lang.Object) charArray25);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArrayList44);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test167");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        java.util.List<char[]> charArrayList44 = java.util.List.of(charArray9, charArray14, charArray25, charArray42);
        java.util.Arrays.fill(charArray9, ' ');
        java.util.ArrayList<char[]> charArrayList47 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList48 = charArrayList47.reversed();
        charArrayList47.clear();
        java.lang.Object[] objArray50 = charArrayList47.toArray();
        boolean boolean52 = charArrayList47.equals((java.lang.Object) false);
        char[] charArray54 = new char[] { ' ' };
        charArrayList47.addLast(charArray54);
        boolean boolean56 = java.util.Arrays.equals(charArray9, charArray54);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', ' ', ' ', ' ', ' ' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArrayList44);
        org.junit.Assert.assertNotNull(charArrayList48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertArrayEquals(objArray50, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertArrayEquals(charArray54, new char[] { ' ' });
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test168");
        float[] floatArray6 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int8 = java.util.Arrays.binarySearch(floatArray6, (float) (short) 1);
        java.util.Arrays.sort(floatArray6);
        float[] floatArray16 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int18 = java.util.Arrays.binarySearch(floatArray16, (float) (short) 1);
        boolean boolean19 = java.util.Arrays.equals(floatArray6, floatArray16);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertArrayEquals(floatArray6, new float[] { (-1.0f), 0.0f, 0.0f, 1.0f, 1.0f, 97.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertArrayEquals(floatArray16, new float[] { 97.0f, (-1.0f), 0.0f, 1.0f, 0.0f, 1.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test169");
        short[] shortArray3 = new short[] { (byte) 0, (short) 0, (byte) 1 };
        short[] shortArray6 = java.util.Arrays.copyOfRange(shortArray3, (int) (byte) 1, 5);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray9 = java.util.Arrays.copyOfRange(shortArray3, 10, (-1947244222));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: 10 > -1947244222");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertArrayEquals(shortArray3, new short[] { (short) 0, (short) 0, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertArrayEquals(shortArray6, new short[] { (short) 0, (short) 1, (short) 0, (short) 0 });
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test170");
        long[] longArray6 = new long[] { (short) 100, (-3), (byte) 0, (byte) 10, (byte) 100, (-1L) };
        long[] longArray9 = new long[] {};
        java.util.Arrays.sort(longArray9, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray9);
        java.util.Arrays.fill(longArray9, (-1L));
        // The following exception was thrown during execution in test generation
        try {
            int int18 = java.util.Arrays.mismatch(longArray6, (int) (byte) 1, 2, longArray9, 6, (-2060932013));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(6) > toIndex(-2060932013)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertArrayEquals(longArray6, new long[] { 100L, (-3L), 0L, 10L, 100L, (-1L) });
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertArrayEquals(longArray9, new long[] {});
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test171");
        int[] intArray5 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray5);
        int[] intArray12 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray12);
        java.util.Arrays.sort(intArray12);
        int int15 = java.util.Arrays.compareUnsigned(intArray5, intArray12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(intArray5, 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(10) > toIndex(1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertArrayEquals(intArray12, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test172");
        // The following exception was thrown during execution in test generation
        try {
            long long3 = java.util.Objects.checkFromToIndex((long) (short) 10, (long) 0, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [10, 0) out of bounds for length 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test173");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        charArrayList0.clear();
        java.util.Spliterator<char[]> charArraySpliterator3 = charArrayList0.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray4 = charArrayList0.removeLast();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(charArraySpliterator3);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test174");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray7 = new byte[] {};
        int int8 = java.util.Arrays.compareUnsigned(byteArray6, byteArray7);
        byte[] byteArray9 = new byte[] {};
        int int10 = java.util.Arrays.mismatch(byteArray7, byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray18 = new byte[] {};
        int int19 = java.util.Arrays.compareUnsigned(byteArray17, byteArray18);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 };
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray33 = new byte[] {};
        int int34 = java.util.Arrays.compareUnsigned(byteArray32, byteArray33);
        byte[] byteArray35 = new byte[] {};
        int int36 = java.util.Arrays.mismatch(byteArray33, byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray44 = new byte[] {};
        int int45 = java.util.Arrays.compareUnsigned(byteArray43, byteArray44);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray53 = new byte[] {};
        int int54 = java.util.Arrays.compareUnsigned(byteArray52, byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray62 = new byte[] {};
        int int63 = java.util.Arrays.compareUnsigned(byteArray61, byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray71 = new byte[] {};
        int int72 = java.util.Arrays.compareUnsigned(byteArray70, byteArray71);
        byte[] byteArray73 = new byte[] {};
        int int74 = java.util.Arrays.mismatch(byteArray71, byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray82 = new byte[] {};
        int int83 = java.util.Arrays.compareUnsigned(byteArray81, byteArray82);
        byte[] byteArray84 = new byte[] {};
        int int85 = java.util.Arrays.mismatch(byteArray82, byteArray84);
        java.util.List<byte[]> byteArrayList86 = java.util.List.of(byteArray9, byteArray17, byteArray25, byteArray35, byteArray44, byteArray52, byteArray62, byteArray73, byteArray84);
        java.util.Arrays.sort(byteArray9);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] {});
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertArrayEquals(byteArray25, new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertArrayEquals(byteArray32, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertArrayEquals(byteArray33, new byte[] {});
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6 + "'", int34 == 6);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertArrayEquals(byteArray35, new byte[] {});
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertArrayEquals(byteArray43, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertArrayEquals(byteArray44, new byte[] {});
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 6 + "'", int45 == 6);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertArrayEquals(byteArray52, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertArrayEquals(byteArray53, new byte[] {});
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertArrayEquals(byteArray61, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertArrayEquals(byteArray62, new byte[] {});
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertArrayEquals(byteArray70, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertArrayEquals(byteArray71, new byte[] {});
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 6 + "'", int72 == 6);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertArrayEquals(byteArray73, new byte[] {});
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertArrayEquals(byteArray81, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertArrayEquals(byteArray82, new byte[] {});
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 6 + "'", int83 == 6);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertArrayEquals(byteArray84, new byte[] {});
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(byteArrayList86);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test175");
        int[] intArray6 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray6);
        java.util.function.IntBinaryOperator intBinaryOperator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelPrefix(intArray6, intBinaryOperator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertArrayEquals(intArray6, new int[] { 0, 1, 5, 10, 32, 97 });
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test176");
        double[] doubleArray4 = new double[] { 0, (-1.0f), '#', (byte) 100 };
        double[] doubleArray11 = new double[] { (byte) 100, (-1.0d), 100.0f, (byte) -1, (short) -1, 1 };
        int int12 = java.util.Arrays.compare(doubleArray4, doubleArray11);
        java.util.Arrays.sort(doubleArray4);
        double[] doubleArray20 = new double[] { 0, (-1.0f), '#', (byte) 100 };
        double[] doubleArray27 = new double[] { (byte) 100, (-1.0d), 100.0f, (byte) -1, (short) -1, 1 };
        int int28 = java.util.Arrays.compare(doubleArray20, doubleArray27);
        // The following exception was thrown during execution in test generation
        try {
            int int31 = java.util.Arrays.compare(doubleArray4, (int) (short) 1, (int) 'a', doubleArray27, 4, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { (-1.0d), 0.0d, 35.0d, 100.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 100.0d, (-1.0d), 100.0d, (-1.0d), (-1.0d), 1.0d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertArrayEquals(doubleArray20, new double[] { 0.0d, (-1.0d), 35.0d, 100.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertArrayEquals(doubleArray27, new double[] { 100.0d, (-1.0d), 100.0d, (-1.0d), (-1.0d), 1.0d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test177");
        byte[] byteArray0 = new byte[] {};
        // The following exception was thrown during execution in test generation
        try {
            int int4 = java.util.Arrays.binarySearch(byteArray0, (int) (short) 1, (int) (byte) 100, (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertArrayEquals(byteArray0, new byte[] {});
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test178");
        // The following exception was thrown during execution in test generation
        try {
            long long2 = java.util.Objects.checkIndex((long) (-1947244222), (long) (-2060932013));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index -1947244222 out of bounds for length -2060932013");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test179");
        double[] doubleArray4 = new double[] { 0, (-1.0f), '#', (byte) 100 };
        double[] doubleArray11 = new double[] { (byte) 100, (-1.0d), 100.0f, (byte) -1, (short) -1, 1 };
        int int12 = java.util.Arrays.compare(doubleArray4, doubleArray11);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray14 = java.util.Arrays.copyOf(doubleArray4, (-2060932013));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -2060932013");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 0.0d, (-1.0d), 35.0d, 100.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 100.0d, (-1.0d), 100.0d, (-1.0d), (-1.0d), 1.0d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test180");
        short[] shortArray6 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray9 = java.util.Arrays.copyOfRange(shortArray6, 0, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray11 = java.util.Arrays.copyOf(shortArray6, (-2));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -2");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertArrayEquals(shortArray6, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray9);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test181");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.lang.String[] strArray6 = new java.lang.String[] { "", "[hi!, [0.0, 10.0, 100.0], [0.0, 10.0, 100.0], hi!]", "", "" };
        int int7 = java.util.Arrays.compare(strArray1, strArray6);
        boolean boolean8 = java.util.Objects.isNull((java.lang.Object) strArray6);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertArrayEquals(strArray1, new java.lang.String[] { "" });
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertArrayEquals(strArray6, new java.lang.String[] { "", "[hi!, [0.0, 10.0, 100.0], [0.0, 10.0, 100.0], hi!]", "", "" });
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test182");
        float[] floatArray6 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int8 = java.util.Arrays.binarySearch(floatArray6, (float) (short) 1);
        java.util.Arrays.fill(floatArray6, (float) 100);
        java.util.Arrays.parallelSort(floatArray6);
        java.lang.String str12 = java.util.Arrays.toString(floatArray6);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertArrayEquals(floatArray6, new float[] { 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]" + "'", str12, "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test183");
        long[] longArray0 = new long[] {};
        java.util.Arrays.sort(longArray0, 0, (int) (short) 0);
        long[] longArray4 = new long[] {};
        java.util.Arrays.sort(longArray4, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray4);
        int int9 = java.util.Arrays.compare(longArray0, longArray4);
        java.util.Arrays.parallelSort(longArray0);
        java.util.function.LongBinaryOperator longBinaryOperator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelPrefix(longArray0, longBinaryOperator11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertArrayEquals(longArray0, new long[] {});
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertArrayEquals(longArray4, new long[] {});
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test184");
        int[] intArray6 = new int[] { 'a', 5, '4', 3, 0, ' ' };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(intArray6, (int) (byte) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertArrayEquals(intArray6, new int[] { 97, 5, 52, 3, 0, 32 });
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test185");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        charArrayList0.clear();
        java.lang.Object[] objArray3 = charArrayList0.toArray();
        boolean boolean5 = charArrayList0.equals((java.lang.Object) false);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray6 = charArrayList0.removeFirst();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertArrayEquals(objArray3, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test186");
        int[] intArray5 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray5);
        java.util.Arrays.sort(intArray5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(intArray5, 3, (-50));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(3) > toIndex(-50)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test187");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        char[] charArray3 = null;
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray4 = charArrayList0.set(0, charArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 0 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArrayList1);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test188");
        double[] doubleArray1 = new double[] { 1 };
        java.util.Arrays.fill(doubleArray1, (double) 6);
        java.util.function.DoubleBinaryOperator doubleBinaryOperator4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelPrefix(doubleArray1, doubleBinaryOperator4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertArrayEquals(doubleArray1, new double[] { 6.0d }, 1.0E-15);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test189");
        java.util.NavigableMap<char[], java.util.Collection> charArrayMap0 = java.util.Collections.emptyNavigableMap();
        org.junit.Assert.assertNotNull(charArrayMap0);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test190");
        int[] intArray6 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator.OfInt ofInt10 = java.util.Arrays.spliterator(intArray6, 45, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: origin(45) > fence(2)");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertArrayEquals(intArray6, new int[] { 0, 1, 5, 10, 32, 97 });
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test191");
        // The following exception was thrown during execution in test generation
        try {
            int int3 = java.util.Objects.checkFromIndexSize((int) (short) 10, 6, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [10, 10 + 6) out of bounds for length 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test192");
        float[] floatArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(floatArray0, (int) 'a', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"a\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test193");
        int[] intArray6 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray6);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray10 = java.util.Arrays.copyOfRange(intArray6, 45, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: 45 > 32");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertArrayEquals(intArray6, new int[] { 0, 1, 5, 10, 32, 97 });
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test194");
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray4 = java.util.Arrays.copyOf(wildcardClassOfFieldArray2, (int) (short) 1);
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertArrayEquals(ofFieldArray1, new java.lang.invoke.TypeDescriptor.OfField[] {});
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertArrayEquals(wildcardClassOfFieldArray2, new java.lang.invoke.TypeDescriptor.OfField[] {});
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray4);
        org.junit.Assert.assertArrayEquals(wildcardClassOfFieldArray4, new java.lang.invoke.TypeDescriptor.OfField[] { null });
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test195");
        short[] shortArray6 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray9 = java.util.Arrays.copyOfRange(shortArray6, 0, (int) ' ');
        int int11 = java.util.Arrays.binarySearch(shortArray6, (short) -1);
        short[] shortArray14 = new short[] {};
        // The following exception was thrown during execution in test generation
        try {
            int int17 = java.util.Arrays.compareUnsigned(shortArray6, (int) (short) 1, (-3), shortArray14, (-6), (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(1) > toIndex(-3)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertArrayEquals(shortArray6, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertArrayEquals(shortArray14, new short[] {});
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test196");
        float[] floatArray3 = new float[] { 10, 1L, 100 };
        float[] floatArray5 = java.util.Arrays.copyOf(floatArray3, (int) (short) 1);
        float[] floatArray12 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int14 = java.util.Arrays.binarySearch(floatArray12, (float) (short) 1);
        java.util.Arrays.fill(floatArray12, (float) 100);
        int int17 = java.util.Arrays.mismatch(floatArray5, floatArray12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.fill(floatArray5, 100, (int) (byte) -1, (float) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(100) > toIndex(-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertArrayEquals(floatArray3, new float[] { 10.0f, 1.0f, 100.0f }, (float) 1.0E-15);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertArrayEquals(floatArray5, new float[] { 10.0f }, (float) 1.0E-15);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertArrayEquals(floatArray12, new float[] { 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test197");
        long[] longArray0 = new long[] {};
        java.util.Arrays.sort(longArray0, 0, (int) (short) 0);
        long[] longArray4 = new long[] {};
        java.util.Arrays.sort(longArray4, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray4);
        int int9 = java.util.Arrays.compare(longArray0, longArray4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(longArray4, (int) (short) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertArrayEquals(longArray0, new long[] {});
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertArrayEquals(longArray4, new long[] {});
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test198");
        short[] shortArray6 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray9 = java.util.Arrays.copyOfRange(shortArray6, 0, (int) ' ');
        int int11 = java.util.Arrays.binarySearch(shortArray6, (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.sort(shortArray6, 6, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertArrayEquals(shortArray6, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test199");
        java.util.NavigableSet<byte[]> byteArraySet0 = java.util.Collections.emptyNavigableSet();
        java.util.SortedSet<byte[]> byteArraySet1 = java.util.Collections.synchronizedSortedSet((java.util.SortedSet<byte[]>) byteArraySet0);
        java.lang.Class<byte[]> byteArrayClass2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedSet<byte[]> byteArraySet3 = java.util.Collections.checkedSortedSet((java.util.SortedSet<byte[]>) byteArraySet0, byteArrayClass2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: type");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArraySet0);
        org.junit.Assert.assertNotNull(byteArraySet1);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test200");
        int[] intArray5 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray5);
        int[] intArray12 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray12);
        java.util.Arrays.sort(intArray12);
        int int15 = java.util.Arrays.compareUnsigned(intArray5, intArray12);
        int[] intArray24 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray24);
        int int27 = java.util.Arrays.binarySearch(intArray24, (-2));
        int[] intArray30 = java.util.Arrays.copyOfRange(intArray24, 3, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int33 = java.util.Arrays.compare(intArray12, 5, 3, intArray24, (-2060932013), (-2));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(5) > toIndex(3)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertArrayEquals(intArray12, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertArrayEquals(intArray24, new int[] { 0, 1, 5, 10, 32, 97 });
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(intArray30);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test201");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        int int71 = charArrayList57.size();
        java.util.ArrayList<char[]> charArrayList72 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList73 = charArrayList72.reversed();
        charArrayList72.clear();
        java.lang.Object[] objArray75 = charArrayList72.toArray();
        int int76 = java.util.Collections.indexOfSubList((java.util.List<char[]>) charArrayList57, (java.util.List<char[]>) charArrayList72);
        char[] charArray78 = charArrayList57.get((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray81 = java.util.Arrays.copyOfRange(charArray78, 2, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: 2 > 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(charArrayList73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertArrayEquals(objArray75, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertArrayEquals(charArray78, new char[] { ' ', '#', '4', '#', 'a' });
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test202");
        float[] floatArray0 = null;
        float[] floatArray4 = new float[] { 10, 1L, 100 };
        float[] floatArray6 = java.util.Arrays.copyOf(floatArray4, (int) (short) 1);
        float[] floatArray13 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int15 = java.util.Arrays.binarySearch(floatArray13, (float) (short) 1);
        java.util.Arrays.fill(floatArray13, (float) 100);
        int int18 = java.util.Arrays.mismatch(floatArray6, floatArray13);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = java.util.Arrays.mismatch(floatArray0, floatArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"a\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertArrayEquals(floatArray4, new float[] { 10.0f, 1.0f, 100.0f }, (float) 1.0E-15);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertArrayEquals(floatArray6, new float[] { 10.0f }, (float) 1.0E-15);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertArrayEquals(floatArray13, new float[] { 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test203");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        charArrayList57.trimToSize();
        charArrayList57.clear();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray74 = charArrayList57.get(45);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 45 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test204");
        long[] longArray6 = new long[] { 5, 0L, 1L, (-50), 2, (byte) 0 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream9 = java.util.Arrays.stream(longArray6, (int) (byte) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: origin(100) > fence(-1)");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertArrayEquals(longArray6, new long[] { 5L, 0L, 1L, (-50L), 2L, 0L });
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test205");
        java.util.SortedSet<int[]> intArraySet0 = java.util.Collections.emptySortedSet();
        org.junit.Assert.assertNotNull(intArraySet0);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test206");
        short[] shortArray1 = new short[] { (short) 1 };
        short[] shortArray10 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray13 = java.util.Arrays.copyOfRange(shortArray10, 0, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            int int16 = java.util.Arrays.compareUnsigned(shortArray1, 0, 5, shortArray13, (-2060932013), (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertArrayEquals(shortArray1, new short[] { (short) 1 });
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertArrayEquals(shortArray10, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray13);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test207");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        int int2 = charArrayList0.size();
        char[] charArray6 = new char[] { ' ', '#', 'a' };
        char[] charArray12 = new char[] { ' ', '#', '4', '#', 'a' };
        int int13 = java.util.Arrays.compare(charArray6, charArray12);
        char[] charArray17 = new char[] { ' ', '#', 'a' };
        char[] charArray23 = new char[] { ' ', '#', '4', '#', 'a' };
        int int24 = java.util.Arrays.compare(charArray17, charArray23);
        char[] charArray28 = new char[] { ' ', '#', 'a' };
        char[] charArray34 = new char[] { ' ', '#', '4', '#', 'a' };
        int int35 = java.util.Arrays.compare(charArray28, charArray34);
        char[] charArray39 = new char[] { ' ', '#', 'a' };
        char[] charArray45 = new char[] { ' ', '#', '4', '#', 'a' };
        int int46 = java.util.Arrays.compare(charArray39, charArray45);
        char[] charArray50 = new char[] { ' ', '#', 'a' };
        char[] charArray56 = new char[] { ' ', '#', '4', '#', 'a' };
        int int57 = java.util.Arrays.compare(charArray50, charArray56);
        java.util.List<char[]> charArrayList58 = java.util.List.of(charArray23, charArray28, charArray39, charArray56);
        char[][] charArray59 = new char[][] { charArray12, charArray28 };
        java.util.ArrayList<char[]> charArrayList60 = new java.util.ArrayList<char[]>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList60, charArray59);
        char[] charArray65 = new char[] { ' ', '#', 'a' };
        char[] charArray71 = new char[] { ' ', '#', '4', '#', 'a' };
        int int72 = java.util.Arrays.compare(charArray65, charArray71);
        boolean boolean73 = charArrayList60.contains((java.lang.Object) charArray65);
        java.lang.Object[] objArray74 = charArrayList60.toArray();
        char[] charArray75 = charArrayList60.removeLast();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections.copy((java.util.List<char[]>) charArrayList0, (java.util.List<char[]>) charArrayList60);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Source does not fit in dest");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertArrayEquals(charArray6, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertArrayEquals(charArray12, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 45 + "'", int13 == 45);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertArrayEquals(charArray17, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertArrayEquals(charArray23, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 45 + "'", int24 == 45);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertArrayEquals(charArray28, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertArrayEquals(charArray34, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 45 + "'", int35 == 45);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertArrayEquals(charArray39, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertArrayEquals(charArray45, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 45 + "'", int46 == 45);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertArrayEquals(charArray50, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertArrayEquals(charArray56, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 45 + "'", int57 == 45);
        org.junit.Assert.assertNotNull(charArrayList58);
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertArrayEquals(charArray65, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertArrayEquals(charArray71, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 45 + "'", int72 == 45);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[[ , #, 4, #, a], [ , #, a]]");
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertArrayEquals(charArray75, new char[] { ' ', '#', 'a' });
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test208");
        boolean[] booleanArray4 = new boolean[] { true, true, true, true };
        boolean[] booleanArray11 = new boolean[] { false, false, true, true };
        boolean[] booleanArray14 = new boolean[] { true, false };
        int int15 = java.util.Arrays.mismatch(booleanArray11, booleanArray14);
        boolean[] booleanArray22 = new boolean[] { true, false, true, true, false, true };
        boolean[] booleanArray28 = new boolean[] { false, false, false, false, true };
        boolean[] booleanArray31 = new boolean[] { false, true };
        boolean[] booleanArray36 = new boolean[] { false, false, true, true };
        boolean[] booleanArray39 = new boolean[] { true, false };
        int int40 = java.util.Arrays.mismatch(booleanArray36, booleanArray39);
        boolean[] booleanArray45 = new boolean[] { false, false, true, true };
        boolean[] booleanArray48 = new boolean[] { true, false };
        int int49 = java.util.Arrays.mismatch(booleanArray45, booleanArray48);
        boolean[] booleanArray54 = new boolean[] { false, false, true, true };
        boolean[] booleanArray57 = new boolean[] { true, false };
        int int58 = java.util.Arrays.mismatch(booleanArray54, booleanArray57);
        boolean[] booleanArray63 = new boolean[] { false, false, true, true };
        boolean[] booleanArray66 = new boolean[] { true, false };
        int int67 = java.util.Arrays.mismatch(booleanArray63, booleanArray66);
        java.util.List<boolean[]> booleanArrayList68 = java.util.List.of(booleanArray11, booleanArray22, booleanArray28, booleanArray31, booleanArray36, booleanArray45, booleanArray54, booleanArray63);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean71 = java.util.Arrays.equals(booleanArray4, (int) (short) 1, (int) '4', booleanArray22, (-50), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray4);
        assertBooleanArrayEquals(booleanArray4, new boolean[] { true, true, true, true });
        org.junit.Assert.assertNotNull(booleanArray11);
        assertBooleanArrayEquals(booleanArray11, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray14);
        assertBooleanArrayEquals(booleanArray14, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(booleanArray22);
        assertBooleanArrayEquals(booleanArray22, new boolean[] { true, false, true, true, false, true });
        org.junit.Assert.assertNotNull(booleanArray28);
        assertBooleanArrayEquals(booleanArray28, new boolean[] { false, false, false, false, true });
        org.junit.Assert.assertNotNull(booleanArray31);
        assertBooleanArrayEquals(booleanArray31, new boolean[] { false, true });
        org.junit.Assert.assertNotNull(booleanArray36);
        assertBooleanArrayEquals(booleanArray36, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray39);
        assertBooleanArrayEquals(booleanArray39, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(booleanArray45);
        assertBooleanArrayEquals(booleanArray45, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray48);
        assertBooleanArrayEquals(booleanArray48, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(booleanArray54);
        assertBooleanArrayEquals(booleanArray54, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray57);
        assertBooleanArrayEquals(booleanArray57, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(booleanArray63);
        assertBooleanArrayEquals(booleanArray63, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray66);
        assertBooleanArrayEquals(booleanArray66, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(booleanArrayList68);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test209");
        boolean[] booleanArray4 = new boolean[] { false, false, true, true };
        boolean[] booleanArray7 = new boolean[] { true, false };
        int int8 = java.util.Arrays.mismatch(booleanArray4, booleanArray7);
        boolean[] booleanArray15 = new boolean[] { true, false, true, true, false, true };
        boolean[] booleanArray21 = new boolean[] { false, false, false, false, true };
        boolean[] booleanArray24 = new boolean[] { false, true };
        boolean[] booleanArray29 = new boolean[] { false, false, true, true };
        boolean[] booleanArray32 = new boolean[] { true, false };
        int int33 = java.util.Arrays.mismatch(booleanArray29, booleanArray32);
        boolean[] booleanArray38 = new boolean[] { false, false, true, true };
        boolean[] booleanArray41 = new boolean[] { true, false };
        int int42 = java.util.Arrays.mismatch(booleanArray38, booleanArray41);
        boolean[] booleanArray47 = new boolean[] { false, false, true, true };
        boolean[] booleanArray50 = new boolean[] { true, false };
        int int51 = java.util.Arrays.mismatch(booleanArray47, booleanArray50);
        boolean[] booleanArray56 = new boolean[] { false, false, true, true };
        boolean[] booleanArray59 = new boolean[] { true, false };
        int int60 = java.util.Arrays.mismatch(booleanArray56, booleanArray59);
        java.util.List<boolean[]> booleanArrayList61 = java.util.List.of(booleanArray4, booleanArray15, booleanArray21, booleanArray24, booleanArray29, booleanArray38, booleanArray47, booleanArray56);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.fill(booleanArray4, (int) (short) -1, (-2), false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(-1) > toIndex(-2)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray4);
        assertBooleanArrayEquals(booleanArray4, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray7);
        assertBooleanArrayEquals(booleanArray7, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(booleanArray15);
        assertBooleanArrayEquals(booleanArray15, new boolean[] { true, false, true, true, false, true });
        org.junit.Assert.assertNotNull(booleanArray21);
        assertBooleanArrayEquals(booleanArray21, new boolean[] { false, false, false, false, true });
        org.junit.Assert.assertNotNull(booleanArray24);
        assertBooleanArrayEquals(booleanArray24, new boolean[] { false, true });
        org.junit.Assert.assertNotNull(booleanArray29);
        assertBooleanArrayEquals(booleanArray29, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray32);
        assertBooleanArrayEquals(booleanArray32, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(booleanArray38);
        assertBooleanArrayEquals(booleanArray38, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray41);
        assertBooleanArrayEquals(booleanArray41, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(booleanArray47);
        assertBooleanArrayEquals(booleanArray47, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray50);
        assertBooleanArrayEquals(booleanArray50, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(booleanArray56);
        assertBooleanArrayEquals(booleanArray56, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray59);
        assertBooleanArrayEquals(booleanArray59, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(booleanArrayList61);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test210");
        short[] shortArray3 = new short[] { (byte) 0, (short) 0, (byte) 1 };
        short[] shortArray6 = java.util.Arrays.copyOfRange(shortArray3, (int) (byte) 1, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.sort(shortArray6, (int) (short) 100, (-2060931702));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(100) > toIndex(-2060931702)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertArrayEquals(shortArray3, new short[] { (short) 0, (short) 0, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertArrayEquals(shortArray6, new short[] { (short) 0, (short) 1, (short) 0, (short) 0 });
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test211");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) -1 };
        byte[] byteArray12 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray13 = new byte[] {};
        int int14 = java.util.Arrays.compareUnsigned(byteArray12, byteArray13);
        byte[] byteArray15 = new byte[] {};
        int int16 = java.util.Arrays.mismatch(byteArray13, byteArray15);
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray24 = new byte[] {};
        int int25 = java.util.Arrays.compareUnsigned(byteArray23, byteArray24);
        byte[] byteArray31 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 };
        byte[] byteArray38 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray39 = new byte[] {};
        int int40 = java.util.Arrays.compareUnsigned(byteArray38, byteArray39);
        byte[] byteArray41 = new byte[] {};
        int int42 = java.util.Arrays.mismatch(byteArray39, byteArray41);
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray50 = new byte[] {};
        int int51 = java.util.Arrays.compareUnsigned(byteArray49, byteArray50);
        byte[] byteArray58 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray59 = new byte[] {};
        int int60 = java.util.Arrays.compareUnsigned(byteArray58, byteArray59);
        byte[] byteArray67 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray68 = new byte[] {};
        int int69 = java.util.Arrays.compareUnsigned(byteArray67, byteArray68);
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray77 = new byte[] {};
        int int78 = java.util.Arrays.compareUnsigned(byteArray76, byteArray77);
        byte[] byteArray79 = new byte[] {};
        int int80 = java.util.Arrays.mismatch(byteArray77, byteArray79);
        byte[] byteArray87 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray88 = new byte[] {};
        int int89 = java.util.Arrays.compareUnsigned(byteArray87, byteArray88);
        byte[] byteArray90 = new byte[] {};
        int int91 = java.util.Arrays.mismatch(byteArray88, byteArray90);
        java.util.List<byte[]> byteArrayList92 = java.util.List.of(byteArray15, byteArray23, byteArray31, byteArray41, byteArray50, byteArray58, byteArray68, byteArray79, byteArray90);
        boolean boolean93 = java.util.Arrays.equals(byteArray5, byteArray15);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertArrayEquals(byteArray5, new byte[] { (byte) -1, (byte) 10, (byte) 0, (byte) 10, (byte) -1 });
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertArrayEquals(byteArray12, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertArrayEquals(byteArray13, new byte[] {});
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6 + "'", int14 == 6);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertArrayEquals(byteArray15, new byte[] {});
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertArrayEquals(byteArray23, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] {});
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertArrayEquals(byteArray31, new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertArrayEquals(byteArray38, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertArrayEquals(byteArray39, new byte[] {});
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 6 + "'", int40 == 6);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertArrayEquals(byteArray41, new byte[] {});
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertArrayEquals(byteArray49, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertArrayEquals(byteArray50, new byte[] {});
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 6 + "'", int51 == 6);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertArrayEquals(byteArray58, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertArrayEquals(byteArray59, new byte[] {});
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 6 + "'", int60 == 6);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertArrayEquals(byteArray67, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertArrayEquals(byteArray68, new byte[] {});
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 6 + "'", int69 == 6);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertArrayEquals(byteArray76, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertArrayEquals(byteArray77, new byte[] {});
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 6 + "'", int78 == 6);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertArrayEquals(byteArray79, new byte[] {});
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertArrayEquals(byteArray87, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertArrayEquals(byteArray88, new byte[] {});
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 6 + "'", int89 == 6);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertArrayEquals(byteArray90, new byte[] {});
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(byteArrayList92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test212");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        int int71 = charArrayList57.size();
        java.util.ArrayList<char[]> charArrayList72 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList73 = charArrayList72.reversed();
        charArrayList72.clear();
        java.lang.Object[] objArray75 = charArrayList72.toArray();
        int int76 = java.util.Collections.indexOfSubList((java.util.List<char[]>) charArrayList57, (java.util.List<char[]>) charArrayList72);
        char[] charArray78 = charArrayList57.get((int) (byte) 0);
        java.util.Arrays.fill(charArray78, 'a');
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { 'a', 'a', 'a', 'a', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(charArrayList73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertArrayEquals(objArray75, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertArrayEquals(charArray78, new char[] { 'a', 'a', 'a', 'a', 'a' });
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test213");
        short[] shortArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.sort(shortArray0, (int) (short) 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"a\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test214");
        double[] doubleArray1 = new double[] { (-1.0d) };
        double[] doubleArray4 = java.util.Arrays.copyOfRange(doubleArray1, (int) (short) 0, (int) 'a');
        java.util.function.DoubleBinaryOperator doubleBinaryOperator5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelPrefix(doubleArray4, doubleBinaryOperator5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertArrayEquals(doubleArray1, new double[] { (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray4);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test215");
        java.util.NavigableSet<java.util.Map<long[], byte[]>> longArrayMapSet0 = java.util.Collections.emptyNavigableSet();
        org.junit.Assert.assertNotNull(longArrayMapSet0);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test216");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        java.lang.Object[] objArray71 = charArrayList57.toArray();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray73 = charArrayList57.remove((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index -1 out of bounds for length 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[[ , #, 4, #, a], [ , #, a]]");
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test217");
        short[] shortArray4 = new short[] { (byte) 0, (short) 0, (short) 0, (byte) 10 };
        short[] shortArray6 = new short[] { (byte) 1 };
        int int7 = java.util.Arrays.compare(shortArray4, shortArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(shortArray6, 0, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertArrayEquals(shortArray4, new short[] { (short) 0, (short) 0, (short) 0, (short) 10 });
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertArrayEquals(shortArray6, new short[] { (short) 1 });
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test218");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        java.util.List<char[]> charArrayList44 = java.util.List.of(charArray9, charArray14, charArray25, charArray42);
        char[] charArray46 = java.util.Arrays.copyOf(charArray42, 45);
        char[] charArray50 = new char[] { ' ', '#', 'a' };
        char[] charArray56 = new char[] { ' ', '#', '4', '#', 'a' };
        int int57 = java.util.Arrays.compare(charArray50, charArray56);
        boolean boolean58 = java.util.Arrays.equals(charArray42, charArray56);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArrayList44);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertArrayEquals(charArray50, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertArrayEquals(charArray56, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 45 + "'", int57 == 45);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test219");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        charArrayList0.clear();
        java.lang.Object[] objArray3 = charArrayList0.toArray();
        boolean boolean5 = charArrayList0.equals((java.lang.Object) false);
        char[] charArray7 = new char[] { ' ' };
        charArrayList0.addLast(charArray7);
        char[] charArray10 = null;
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray11 = charArrayList0.set((int) (byte) 100, charArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 100 out of bounds for length 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertArrayEquals(objArray3, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertArrayEquals(charArray7, new char[] { ' ' });
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test220");
        long[] longArray0 = new long[] {};
        java.util.Arrays.sort(longArray0, 0, (int) (short) 0);
        long[] longArray4 = new long[] {};
        java.util.Arrays.sort(longArray4, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray4);
        int int9 = java.util.Arrays.compare(longArray0, longArray4);
        long[] longArray10 = new long[] {};
        java.util.Arrays.sort(longArray10, 0, (int) (short) 0);
        long[] longArray14 = new long[] {};
        java.util.Arrays.sort(longArray14, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray14);
        int int19 = java.util.Arrays.compare(longArray10, longArray14);
        int int20 = java.util.Arrays.compare(longArray0, longArray10);
        java.util.Spliterator.OfLong ofLong21 = java.util.Arrays.spliterator(longArray0);
        java.util.List<java.util.Spliterator.OfLong> ofLongList22 = java.util.Collections.singletonList(ofLong21);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertArrayEquals(longArray0, new long[] {});
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertArrayEquals(longArray4, new long[] {});
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertArrayEquals(longArray10, new long[] {});
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertArrayEquals(longArray14, new long[] {});
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(ofLong21);
        org.junit.Assert.assertNotNull(ofLongList22);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test221");
        double[] doubleArray1 = new double[] { (-1.0d) };
        double[] doubleArray4 = java.util.Arrays.copyOfRange(doubleArray1, (int) (short) 0, (int) 'a');
        double[] doubleArray7 = java.util.Arrays.copyOfRange(doubleArray1, (int) (byte) 0, 7);
        double[] doubleArray12 = new double[] { 0, (-1.0f), '#', (byte) 100 };
        double[] doubleArray19 = new double[] { (byte) 100, (-1.0d), 100.0f, (byte) -1, (short) -1, 1 };
        int int20 = java.util.Arrays.compare(doubleArray12, doubleArray19);
        double[] doubleArray25 = new double[] { 0, (-1.0f), '#', (byte) 100 };
        double[] doubleArray32 = new double[] { (byte) 100, (-1.0d), 100.0f, (byte) -1, (short) -1, 1 };
        int int33 = java.util.Arrays.compare(doubleArray25, doubleArray32);
        java.util.Arrays.sort(doubleArray25);
        double[] doubleArray35 = null;
        double[] doubleArray37 = new double[] { 1 };
        java.util.Arrays.fill(doubleArray37, (double) 6);
        double[] doubleArray41 = new double[] { (-1.0d) };
        double[] doubleArray44 = java.util.Arrays.copyOfRange(doubleArray41, (int) (short) 0, (int) 'a');
        java.util.Arrays.parallelSort(doubleArray44);
        double[] doubleArray47 = new double[] { (-1.0d) };
        double[] doubleArray50 = java.util.Arrays.copyOfRange(doubleArray47, (int) (short) 0, (int) 'a');
        double[] doubleArray53 = java.util.Arrays.copyOfRange(doubleArray47, (int) (byte) 0, 7);
        double[] doubleArray58 = new double[] { 0, (-1.0f), '#', (byte) 100 };
        double[] doubleArray65 = new double[] { (byte) 100, (-1.0d), 100.0f, (byte) -1, (short) -1, 1 };
        int int66 = java.util.Arrays.compare(doubleArray58, doubleArray65);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<double[]> doubleArrayList67 = java.util.List.of(doubleArray1, doubleArray19, doubleArray25, doubleArray35, doubleArray37, doubleArray44, doubleArray53, doubleArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertArrayEquals(doubleArray1, new double[] { (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { (-1.0d), 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 0.0d, (-1.0d), 35.0d, 100.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 100.0d, (-1.0d), 100.0d, (-1.0d), (-1.0d), 1.0d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertArrayEquals(doubleArray25, new double[] { (-1.0d), 0.0d, 35.0d, 100.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertArrayEquals(doubleArray32, new double[] { 100.0d, (-1.0d), 100.0d, (-1.0d), (-1.0d), 1.0d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertArrayEquals(doubleArray37, new double[] { 6.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertArrayEquals(doubleArray41, new double[] { (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertArrayEquals(doubleArray47, new double[] { (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertArrayEquals(doubleArray53, new double[] { (-1.0d), 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertArrayEquals(doubleArray58, new double[] { 0.0d, (-1.0d), 35.0d, 100.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertArrayEquals(doubleArray65, new double[] { 100.0d, (-1.0d), 100.0d, (-1.0d), (-1.0d), 1.0d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test222");
        float[] floatArray0 = null;
        float[] floatArray9 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int11 = java.util.Arrays.binarySearch(floatArray9, (float) (short) 1);
        java.util.Arrays.fill(floatArray9, (float) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = java.util.Arrays.mismatch(floatArray0, (-1947244222), (int) (short) 100, floatArray9, 100, (-2));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"a\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertArrayEquals(floatArray9, new float[] { 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test223");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        int int71 = charArrayList57.size();
        java.util.ArrayList<char[]> charArrayList72 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList73 = charArrayList72.reversed();
        charArrayList72.clear();
        java.lang.Object[] objArray75 = charArrayList72.toArray();
        int int76 = java.util.Collections.indexOfSubList((java.util.List<char[]>) charArrayList57, (java.util.List<char[]>) charArrayList72);
        java.util.Iterator<char[]> charArrayItor77 = charArrayList72.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections.swap((java.util.List<char[]>) charArrayList72, 2, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 2 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(charArrayList73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertArrayEquals(objArray75, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(charArrayItor77);
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test224");
        java.util.SortedSet<java.lang.Class<?>> wildcardClassSet0 = java.util.Collections.emptySortedSet();
        org.junit.Assert.assertNotNull(wildcardClassSet0);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test225");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        charArrayList0.clear();
        java.lang.Object[] objArray3 = charArrayList0.toArray();
        boolean boolean5 = charArrayList0.equals((java.lang.Object) false);
        char[] charArray7 = new char[] { ' ' };
        charArrayList0.addLast(charArray7);
        char[] charArray12 = new char[] { ' ', '#', 'a' };
        char[] charArray18 = new char[] { ' ', '#', '4', '#', 'a' };
        int int19 = java.util.Arrays.compare(charArray12, charArray18);
        char[] charArray23 = new char[] { ' ', '#', 'a' };
        char[] charArray29 = new char[] { ' ', '#', '4', '#', 'a' };
        int int30 = java.util.Arrays.compare(charArray23, charArray29);
        char[] charArray34 = new char[] { ' ', '#', 'a' };
        char[] charArray40 = new char[] { ' ', '#', '4', '#', 'a' };
        int int41 = java.util.Arrays.compare(charArray34, charArray40);
        char[] charArray45 = new char[] { ' ', '#', 'a' };
        char[] charArray51 = new char[] { ' ', '#', '4', '#', 'a' };
        int int52 = java.util.Arrays.compare(charArray45, charArray51);
        char[] charArray56 = new char[] { ' ', '#', 'a' };
        char[] charArray62 = new char[] { ' ', '#', '4', '#', 'a' };
        int int63 = java.util.Arrays.compare(charArray56, charArray62);
        java.util.List<char[]> charArrayList64 = java.util.List.of(charArray29, charArray34, charArray45, charArray62);
        char[][] charArray65 = new char[][] { charArray18, charArray34 };
        java.util.ArrayList<char[]> charArrayList66 = new java.util.ArrayList<char[]>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList66, charArray65);
        char[] charArray71 = new char[] { ' ', '#', 'a' };
        char[] charArray77 = new char[] { ' ', '#', '4', '#', 'a' };
        int int78 = java.util.Arrays.compare(charArray71, charArray77);
        boolean boolean79 = charArrayList66.contains((java.lang.Object) charArray71);
        int int80 = charArrayList66.size();
        java.util.ArrayList<char[]> charArrayList81 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList82 = charArrayList81.reversed();
        charArrayList81.clear();
        java.lang.Object[] objArray84 = charArrayList81.toArray();
        int int85 = java.util.Collections.indexOfSubList((java.util.List<char[]>) charArrayList66, (java.util.List<char[]>) charArrayList81);
        boolean boolean86 = charArrayList0.equals((java.lang.Object) charArrayList81);
        java.util.ListIterator<char[]> charArrayItor87 = charArrayList0.listIterator();
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertArrayEquals(objArray3, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertArrayEquals(charArray7, new char[] { ' ' });
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertArrayEquals(charArray12, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertArrayEquals(charArray18, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 45 + "'", int19 == 45);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertArrayEquals(charArray23, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertArrayEquals(charArray29, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 45 + "'", int30 == 45);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertArrayEquals(charArray34, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertArrayEquals(charArray40, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 45 + "'", int41 == 45);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertArrayEquals(charArray45, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertArrayEquals(charArray51, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 45 + "'", int52 == 45);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertArrayEquals(charArray56, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 45 + "'", int63 == 45);
        org.junit.Assert.assertNotNull(charArrayList64);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertArrayEquals(charArray71, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertArrayEquals(charArray77, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 45 + "'", int78 == 45);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(charArrayList82);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertArrayEquals(objArray84, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(charArrayItor87);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test226");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        charArrayList0.clear();
        java.lang.Object[] objArray3 = charArrayList0.toArray();
        boolean boolean5 = charArrayList0.equals((java.lang.Object) false);
        char[] charArray7 = new char[] { ' ' };
        charArrayList0.addLast(charArray7);
        char[] charArray12 = new char[] { ' ', '#', 'a' };
        char[] charArray18 = new char[] { ' ', '#', '4', '#', 'a' };
        int int19 = java.util.Arrays.compare(charArray12, charArray18);
        char[] charArray23 = new char[] { ' ', '#', 'a' };
        char[] charArray29 = new char[] { ' ', '#', '4', '#', 'a' };
        int int30 = java.util.Arrays.compare(charArray23, charArray29);
        char[] charArray34 = new char[] { ' ', '#', 'a' };
        char[] charArray40 = new char[] { ' ', '#', '4', '#', 'a' };
        int int41 = java.util.Arrays.compare(charArray34, charArray40);
        char[] charArray45 = new char[] { ' ', '#', 'a' };
        char[] charArray51 = new char[] { ' ', '#', '4', '#', 'a' };
        int int52 = java.util.Arrays.compare(charArray45, charArray51);
        char[] charArray56 = new char[] { ' ', '#', 'a' };
        char[] charArray62 = new char[] { ' ', '#', '4', '#', 'a' };
        int int63 = java.util.Arrays.compare(charArray56, charArray62);
        java.util.List<char[]> charArrayList64 = java.util.List.of(charArray29, charArray34, charArray45, charArray62);
        char[][] charArray65 = new char[][] { charArray18, charArray34 };
        java.util.ArrayList<char[]> charArrayList66 = new java.util.ArrayList<char[]>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList66, charArray65);
        char[] charArray71 = new char[] { ' ', '#', 'a' };
        char[] charArray77 = new char[] { ' ', '#', '4', '#', 'a' };
        int int78 = java.util.Arrays.compare(charArray71, charArray77);
        boolean boolean79 = charArrayList66.contains((java.lang.Object) charArray71);
        charArrayList66.clear();
        java.util.Collections.copy((java.util.List<char[]>) charArrayList0, (java.util.List<char[]>) charArrayList66);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray83 = charArrayList66.remove((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 10 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertArrayEquals(objArray3, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertArrayEquals(charArray7, new char[] { ' ' });
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertArrayEquals(charArray12, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertArrayEquals(charArray18, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 45 + "'", int19 == 45);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertArrayEquals(charArray23, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertArrayEquals(charArray29, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 45 + "'", int30 == 45);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertArrayEquals(charArray34, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertArrayEquals(charArray40, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 45 + "'", int41 == 45);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertArrayEquals(charArray45, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertArrayEquals(charArray51, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 45 + "'", int52 == 45);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertArrayEquals(charArray56, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 45 + "'", int63 == 45);
        org.junit.Assert.assertNotNull(charArrayList64);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertArrayEquals(charArray71, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertArrayEquals(charArray77, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 45 + "'", int78 == 45);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test227");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray7 = new byte[] {};
        int int8 = java.util.Arrays.compareUnsigned(byteArray6, byteArray7);
        byte[] byteArray9 = new byte[] {};
        int int10 = java.util.Arrays.mismatch(byteArray7, byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray18 = new byte[] {};
        int int19 = java.util.Arrays.compareUnsigned(byteArray17, byteArray18);
        java.util.Arrays.parallelSort(byteArray17);
        int int21 = java.util.Arrays.compareUnsigned(byteArray7, byteArray17);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] { (byte) -1, (byte) -1, (byte) -1, (byte) 0, (byte) 100, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] {});
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-6) + "'", int21 == (-6));
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test228");
        short[] shortArray6 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray9 = java.util.Arrays.copyOfRange(shortArray6, 0, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            int int13 = java.util.Arrays.binarySearch(shortArray9, (int) (short) 100, 100, (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertArrayEquals(shortArray6, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray9);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test229");
        boolean[] booleanArray4 = new boolean[] { false, false, true, true };
        boolean[] booleanArray7 = new boolean[] { true, false };
        int int8 = java.util.Arrays.mismatch(booleanArray4, booleanArray7);
        boolean[] booleanArray15 = new boolean[] { true, false, true, true, false, true };
        boolean[] booleanArray21 = new boolean[] { false, false, false, false, true };
        boolean[] booleanArray24 = new boolean[] { false, true };
        boolean[] booleanArray29 = new boolean[] { false, false, true, true };
        boolean[] booleanArray32 = new boolean[] { true, false };
        int int33 = java.util.Arrays.mismatch(booleanArray29, booleanArray32);
        boolean[] booleanArray38 = new boolean[] { false, false, true, true };
        boolean[] booleanArray41 = new boolean[] { true, false };
        int int42 = java.util.Arrays.mismatch(booleanArray38, booleanArray41);
        boolean[] booleanArray47 = new boolean[] { false, false, true, true };
        boolean[] booleanArray50 = new boolean[] { true, false };
        int int51 = java.util.Arrays.mismatch(booleanArray47, booleanArray50);
        boolean[] booleanArray56 = new boolean[] { false, false, true, true };
        boolean[] booleanArray59 = new boolean[] { true, false };
        int int60 = java.util.Arrays.mismatch(booleanArray56, booleanArray59);
        java.util.List<boolean[]> booleanArrayList61 = java.util.List.of(booleanArray4, booleanArray15, booleanArray21, booleanArray24, booleanArray29, booleanArray38, booleanArray47, booleanArray56);
        java.util.Arrays.fill(booleanArray24, 1, 2, false);
        java.lang.String str66 = java.util.Arrays.toString(booleanArray24);
        org.junit.Assert.assertNotNull(booleanArray4);
        assertBooleanArrayEquals(booleanArray4, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray7);
        assertBooleanArrayEquals(booleanArray7, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(booleanArray15);
        assertBooleanArrayEquals(booleanArray15, new boolean[] { true, false, true, true, false, true });
        org.junit.Assert.assertNotNull(booleanArray21);
        assertBooleanArrayEquals(booleanArray21, new boolean[] { false, false, false, false, true });
        org.junit.Assert.assertNotNull(booleanArray24);
        assertBooleanArrayEquals(booleanArray24, new boolean[] { false, false });
        org.junit.Assert.assertNotNull(booleanArray29);
        assertBooleanArrayEquals(booleanArray29, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray32);
        assertBooleanArrayEquals(booleanArray32, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(booleanArray38);
        assertBooleanArrayEquals(booleanArray38, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray41);
        assertBooleanArrayEquals(booleanArray41, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(booleanArray47);
        assertBooleanArrayEquals(booleanArray47, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray50);
        assertBooleanArrayEquals(booleanArray50, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(booleanArray56);
        assertBooleanArrayEquals(booleanArray56, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray59);
        assertBooleanArrayEquals(booleanArray59, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(booleanArrayList61);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[false, false]" + "'", str66, "[false, false]");
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test230");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        java.lang.Object[] objArray71 = charArrayList57.toArray();
        char[] charArray72 = charArrayList57.removeLast();
        char[] charArray73 = charArrayList57.removeFirst();
        java.lang.Object[] objArray74 = charArrayList57.toArray();
        int int75 = java.util.Objects.hash(objArray74);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[[ , #, 4, #, a], [ , #, a]]");
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertArrayEquals(charArray72, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertArrayEquals(charArray73, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertArrayEquals(objArray74, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test231");
        long[] longArray0 = new long[] {};
        java.util.Arrays.sort(longArray0, 0, (int) (short) 0);
        long[] longArray4 = new long[] {};
        java.util.Arrays.sort(longArray4, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray4);
        int int9 = java.util.Arrays.compare(longArray0, longArray4);
        long[] longArray10 = new long[] {};
        java.util.Arrays.sort(longArray10, 0, (int) (short) 0);
        long[] longArray14 = new long[] {};
        java.util.Arrays.sort(longArray14, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray14);
        int int19 = java.util.Arrays.compare(longArray10, longArray14);
        int int20 = java.util.Arrays.compare(longArray0, longArray10);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray23 = java.util.Arrays.copyOfRange(longArray0, (int) ' ', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: arraycopy: length -32 is negative");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertArrayEquals(longArray0, new long[] {});
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertArrayEquals(longArray4, new long[] {});
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertArrayEquals(longArray10, new long[] {});
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertArrayEquals(longArray14, new long[] {});
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test232");
        long[] longArray0 = new long[] {};
        java.util.Arrays.sort(longArray0, 0, (int) (short) 0);
        long[] longArray4 = new long[] {};
        java.util.Arrays.sort(longArray4, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray4);
        int int9 = java.util.Arrays.compare(longArray0, longArray4);
        long[] longArray10 = new long[] {};
        java.util.Arrays.sort(longArray10, 0, (int) (short) 0);
        long[] longArray14 = new long[] {};
        java.util.Arrays.sort(longArray14, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray14);
        int int19 = java.util.Arrays.compare(longArray10, longArray14);
        int int20 = java.util.Arrays.compare(longArray0, longArray10);
        long[] longArray23 = new long[] {};
        java.util.Arrays.sort(longArray23, 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean29 = java.util.Arrays.equals(longArray0, (int) (byte) 0, (int) (short) -1, longArray23, 45, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(0) > toIndex(-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertArrayEquals(longArray0, new long[] {});
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertArrayEquals(longArray4, new long[] {});
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertArrayEquals(longArray10, new long[] {});
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertArrayEquals(longArray14, new long[] {});
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertArrayEquals(longArray23, new long[] {});
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test233");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        charArrayList57.trimToSize();
        int int73 = charArrayList57.indexOf((java.lang.Object) 1.0d);
        char[] charArray78 = new char[] { ' ', '#', 'a' };
        char[] charArray84 = new char[] { ' ', '#', '4', '#', 'a' };
        int int85 = java.util.Arrays.compare(charArray78, charArray84);
        char[] charArray86 = charArrayList57.set(0, charArray84);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<char[]> charArrayList89 = charArrayList57.subList((int) (byte) 10, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(10) > toIndex(2)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertArrayEquals(charArray78, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertArrayEquals(charArray84, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 45 + "'", int85 == 45);
        org.junit.Assert.assertNotNull(charArray86);
        org.junit.Assert.assertArrayEquals(charArray86, new char[] { ' ', '#', '4', '#', 'a' });
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test234");
        long[] longArray4 = new long[] { (short) 10, (byte) 0, 100L, '4' };
        long[] longArray5 = new long[] {};
        java.util.Arrays.sort(longArray5, 0, (int) (short) 0);
        int int9 = java.util.Arrays.compareUnsigned(longArray4, longArray5);
        long[] longArray12 = new long[] {};
        java.util.Arrays.sort(longArray12, 0, (int) (short) 0);
        long[] longArray16 = new long[] {};
        java.util.Arrays.sort(longArray16, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray16);
        int int21 = java.util.Arrays.compare(longArray12, longArray16);
        long[] longArray22 = new long[] {};
        java.util.Arrays.sort(longArray22, 0, (int) (short) 0);
        long[] longArray26 = new long[] {};
        java.util.Arrays.sort(longArray26, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray26);
        int int31 = java.util.Arrays.compare(longArray22, longArray26);
        int int32 = java.util.Arrays.compare(longArray12, longArray22);
        // The following exception was thrown during execution in test generation
        try {
            int int35 = java.util.Arrays.mismatch(longArray4, (int) 'a', (int) ' ', longArray12, 3, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(97) > toIndex(32)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertArrayEquals(longArray4, new long[] { 10L, 0L, 100L, 52L });
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertArrayEquals(longArray5, new long[] {});
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertArrayEquals(longArray12, new long[] {});
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertArrayEquals(longArray16, new long[] {});
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertArrayEquals(longArray22, new long[] {});
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertArrayEquals(longArray26, new long[] {});
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test235");
        float[] floatArray3 = new float[] { 10, 1L, 100 };
        float[] floatArray5 = java.util.Arrays.copyOf(floatArray3, (int) (short) 1);
        float[] floatArray12 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int14 = java.util.Arrays.binarySearch(floatArray12, (float) (short) 1);
        java.util.Arrays.fill(floatArray12, (float) 100);
        int int17 = java.util.Arrays.mismatch(floatArray5, floatArray12);
        java.util.Arrays.fill(floatArray12, (float) 45);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertArrayEquals(floatArray3, new float[] { 10.0f, 1.0f, 100.0f }, (float) 1.0E-15);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertArrayEquals(floatArray5, new float[] { 10.0f }, (float) 1.0E-15);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertArrayEquals(floatArray12, new float[] { 45.0f, 45.0f, 45.0f, 45.0f, 45.0f, 45.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test236");
        java.util.NavigableSet<java.lang.Object> objSet0 = java.util.Collections.emptyNavigableSet();
        org.junit.Assert.assertNotNull(objSet0);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test237");
        boolean[] booleanArray4 = new boolean[] { false, false, false, false };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.fill(booleanArray4, (-1947244222), 6, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -1947244222");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray4);
        assertBooleanArrayEquals(booleanArray4, new boolean[] { false, false, false, false });
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test238");
        int[] intArray5 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray5);
        java.util.Arrays.sort(intArray5);
        java.util.Arrays.sort(intArray5);
        int[] intArray14 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray14);
        java.util.Arrays.sort(intArray14);
        java.util.Arrays.sort(intArray14);
        int int18 = java.util.Arrays.compareUnsigned(intArray5, intArray14);
        int[] intArray27 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray27);
        int int30 = java.util.Arrays.binarySearch(intArray27, (-2));
        int[] intArray33 = java.util.Arrays.copyOfRange(intArray27, 3, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = java.util.Arrays.equals(intArray14, 2, (-2), intArray27, (-2060931702), (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(2) > toIndex(-2)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertArrayEquals(intArray14, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertArrayEquals(intArray27, new int[] { 0, 1, 5, 10, 32, 97 });
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(intArray33);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test239");
        double[] doubleArray1 = new double[] { (-1.0d) };
        double[] doubleArray4 = java.util.Arrays.copyOfRange(doubleArray1, (int) (short) 0, (int) 'a');
        java.util.Arrays.parallelSort(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(doubleArray4, (int) 'a', (-2));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(97) > toIndex(-2)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertArrayEquals(doubleArray1, new double[] { (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray4);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test240");
        boolean[] booleanArray4 = new boolean[] { false, false, true, true };
        boolean[] booleanArray7 = new boolean[] { true, false };
        int int8 = java.util.Arrays.mismatch(booleanArray4, booleanArray7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.fill(booleanArray4, (int) 'a', 0, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(97) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray4);
        assertBooleanArrayEquals(booleanArray4, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray7);
        assertBooleanArrayEquals(booleanArray7, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test241");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        int int71 = charArrayList57.size();
        java.util.ArrayList<char[]> charArrayList72 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList73 = charArrayList72.reversed();
        charArrayList72.clear();
        java.lang.Object[] objArray75 = charArrayList72.toArray();
        int int76 = java.util.Collections.indexOfSubList((java.util.List<char[]>) charArrayList57, (java.util.List<char[]>) charArrayList72);
        java.util.Iterator<char[]> charArrayItor77 = charArrayList72.iterator();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray78 = charArrayList72.removeFirst();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(charArrayList73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertArrayEquals(objArray75, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(charArrayItor77);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test242");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        charArrayList57.trimToSize();
        int int73 = charArrayList57.indexOf((java.lang.Object) 1.0d);
        java.util.Enumeration<java.util.SortedSet<byte[]>> byteArraySetEnumeration74 = java.util.Collections.emptyEnumeration();
        java.util.ArrayList<java.util.SortedSet<byte[]>> byteArraySetList75 = java.util.Collections.list(byteArraySetEnumeration74);
        java.util.Enumeration<java.util.SortedSet<byte[]>> byteArraySetEnumeration76 = java.util.Collections.emptyEnumeration();
        java.util.ArrayList<java.util.SortedSet<byte[]>> byteArraySetList77 = java.util.Collections.list(byteArraySetEnumeration76);
        java.util.Enumeration<java.util.SortedSet<byte[]>> byteArraySetEnumeration78 = java.util.Collections.emptyEnumeration();
        java.util.function.Supplier<java.lang.String> strSupplier79 = null;
        java.util.Enumeration<java.util.SortedSet<byte[]>> byteArraySetEnumeration80 = java.util.Objects.requireNonNull(byteArraySetEnumeration78, strSupplier79);
        java.util.Enumeration[] enumerationArray82 = new java.util.Enumeration[3];
        @SuppressWarnings("unchecked")
        java.util.Enumeration<java.util.SortedSet<byte[]>>[] byteArraySetEnumerationArray83 = (java.util.Enumeration<java.util.SortedSet<byte[]>>[]) enumerationArray82;
        byteArraySetEnumerationArray83[0] = byteArraySetEnumeration74;
        byteArraySetEnumerationArray83[1] = byteArraySetEnumeration76;
        byteArraySetEnumerationArray83[2] = byteArraySetEnumeration78;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<java.util.SortedSet<byte[]>>[] byteArraySetEnumerationArray90 = charArrayList57.toArray(byteArraySetEnumerationArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: arraycopy: element type mismatch: can not cast one of the elements of java.lang.Object[] to the type of the destination array, java.util.Enumeration");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(byteArraySetEnumeration74);
        org.junit.Assert.assertNotNull(byteArraySetList75);
        org.junit.Assert.assertNotNull(byteArraySetEnumeration76);
        org.junit.Assert.assertNotNull(byteArraySetList77);
        org.junit.Assert.assertNotNull(byteArraySetEnumeration78);
        org.junit.Assert.assertNotNull(byteArraySetEnumeration80);
        org.junit.Assert.assertNotNull(enumerationArray82);
        org.junit.Assert.assertNotNull(byteArraySetEnumerationArray83);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test243");
        int[] intArray5 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray5);
        java.util.Arrays.sort(intArray5);
        java.util.Arrays.sort(intArray5);
        int[] intArray14 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray14);
        java.util.Arrays.sort(intArray14);
        java.util.Arrays.sort(intArray14);
        int int18 = java.util.Arrays.compareUnsigned(intArray5, intArray14);
        java.util.Spliterator.OfInt ofInt19 = java.util.Arrays.spliterator(intArray5);
        java.util.Arrays.sort(intArray5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertArrayEquals(intArray14, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(ofInt19);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test244");
        java.util.SortedMap<java.util.Set, java.util.Collection> setMap0 = java.util.Collections.emptySortedMap();
        org.junit.Assert.assertNotNull(setMap0);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test245");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        java.util.List<char[]> charArrayList44 = java.util.List.of(charArray9, charArray14, charArray25, charArray42);
        char[] charArray46 = java.util.Arrays.copyOf(charArray42, 45);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.fill(charArray46, (int) (byte) 100, (int) (byte) 1, 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(100) > toIndex(1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArrayList44);
        org.junit.Assert.assertNotNull(charArray46);
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test246");
        short[] shortArray6 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray9 = java.util.Arrays.copyOfRange(shortArray6, 0, (int) ' ');
        java.util.Arrays.parallelSort(shortArray9);
        short[] shortArray17 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray20 = java.util.Arrays.copyOfRange(shortArray17, 0, (int) ' ');
        java.util.Arrays.parallelSort(shortArray20);
        java.util.Arrays.fill(shortArray20, (short) 0);
        java.util.Arrays.fill(shortArray20, (short) -1);
        int int26 = java.util.Arrays.mismatch(shortArray9, shortArray20);
        short[] shortArray33 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray36 = java.util.Arrays.copyOfRange(shortArray33, 0, (int) ' ');
        java.util.Arrays.parallelSort(shortArray36);
        short[] shortArray44 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray47 = java.util.Arrays.copyOfRange(shortArray44, 0, (int) ' ');
        java.util.Arrays.parallelSort(shortArray47);
        java.util.Arrays.fill(shortArray47, (short) 0);
        java.util.Arrays.fill(shortArray47, (short) -1);
        int int53 = java.util.Arrays.mismatch(shortArray36, shortArray47);
        boolean boolean54 = java.util.Arrays.equals(shortArray20, shortArray36);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertArrayEquals(shortArray6, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertArrayEquals(shortArray17, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertArrayEquals(shortArray33, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertArrayEquals(shortArray44, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray47);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test247");
        java.lang.String str1 = java.util.Objects.toString((java.lang.Object) (short) 0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "0" + "'", str1, "0");
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test248");
        float[] floatArray6 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int8 = java.util.Arrays.binarySearch(floatArray6, (float) (short) 1);
        java.util.Arrays.fill(floatArray6, (float) 100);
        java.lang.String str11 = java.util.Arrays.toString(floatArray6);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertArrayEquals(floatArray6, new float[] { 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]" + "'", str11, "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test249");
        double[] doubleArray4 = new double[] { 0, (-1.0f), '#', (byte) 100 };
        double[] doubleArray11 = new double[] { (byte) 100, (-1.0d), 100.0f, (byte) -1, (short) -1, 1 };
        int int12 = java.util.Arrays.compare(doubleArray4, doubleArray11);
        java.util.stream.DoubleStream doubleStream13 = java.util.Arrays.stream(doubleArray4);
        java.util.Arrays.parallelSort(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(doubleArray4, (int) (short) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(1) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { (-1.0d), 0.0d, 35.0d, 100.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 100.0d, (-1.0d), 100.0d, (-1.0d), (-1.0d), 1.0d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleStream13);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test250");
        short[] shortArray4 = new short[] { (byte) 10, (short) 0, (short) 100, (byte) 1 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(shortArray4, (int) (byte) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertArrayEquals(shortArray4, new short[] { (short) 10, (short) 0, (short) 100, (short) 1 });
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test251");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        charArrayList0.clear();
        java.lang.Object[] objArray3 = charArrayList0.toArray();
        boolean boolean5 = charArrayList0.equals((java.lang.Object) false);
        char[] charArray7 = new char[] { ' ' };
        charArrayList0.addLast(charArray7);
        char[] charArray9 = charArrayList0.removeLast();
        java.util.function.UnaryOperator<char[]> charArrayUnaryOperator10 = null;
        // The following exception was thrown during execution in test generation
        try {
            charArrayList0.replaceAll(charArrayUnaryOperator10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertArrayEquals(objArray3, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertArrayEquals(charArray7, new char[] { ' ' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ' });
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test252");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        java.util.Iterator<char[]> charArrayItor2 = charArrayList1.iterator();
        java.lang.Class<?> wildcardClass3 = charArrayItor2.getClass();
        java.util.ArrayList<char[]> charArrayList4 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList5 = charArrayList4.reversed();
        java.util.Iterator<char[]> charArrayItor6 = charArrayList5.iterator();
        java.lang.Class<?> wildcardClass7 = charArrayItor6.getClass();
        java.util.ArrayList<char[]> charArrayList8 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList9 = charArrayList8.reversed();
        java.util.Iterator<char[]> charArrayItor10 = charArrayList9.iterator();
        java.lang.Class<?> wildcardClass11 = charArrayItor10.getClass();
        java.util.ArrayList<char[]> charArrayList12 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList13 = charArrayList12.reversed();
        java.util.Iterator<char[]> charArrayItor14 = charArrayList13.iterator();
        java.lang.Class<?> wildcardClass15 = charArrayItor14.getClass();
        java.util.ArrayList<char[]> charArrayList16 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList17 = charArrayList16.reversed();
        java.util.Iterator<char[]> charArrayItor18 = charArrayList17.iterator();
        java.lang.Class<?> wildcardClass19 = charArrayItor18.getClass();
        java.util.ArrayList<char[]> charArrayList20 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList21 = charArrayList20.reversed();
        java.util.Iterator<char[]> charArrayItor22 = charArrayList21.iterator();
        java.lang.Class<?> wildcardClass23 = charArrayItor22.getClass();
        java.lang.reflect.AnnotatedElement[] annotatedElementArray24 = new java.lang.reflect.AnnotatedElement[] { wildcardClass3, wildcardClass7, wildcardClass11, wildcardClass15, wildcardClass19, wildcardClass23 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Stream<java.lang.reflect.AnnotatedElement> annotatedElementStream27 = java.util.Arrays.stream(annotatedElementArray24, (int) (byte) 0, (-6));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: origin(0) > fence(-6)");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(charArrayItor2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(charArrayList5);
        org.junit.Assert.assertNotNull(charArrayItor6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(charArrayList9);
        org.junit.Assert.assertNotNull(charArrayItor10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(charArrayList13);
        org.junit.Assert.assertNotNull(charArrayItor14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(charArrayList17);
        org.junit.Assert.assertNotNull(charArrayItor18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(charArrayList21);
        org.junit.Assert.assertNotNull(charArrayItor22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(annotatedElementArray24);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test253");
        java.util.Enumeration<java.util.Spliterator<char[]>> charArraySpliteratorEnumeration0 = java.util.Collections.emptyEnumeration();
        org.junit.Assert.assertNotNull(charArraySpliteratorEnumeration0);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test254");
        java.util.Enumeration<java.util.Spliterator.OfPrimitive<java.lang.Long, java.util.function.LongConsumer, java.util.Spliterator.OfLong>> longOfPrimitiveEnumeration0 = java.util.Collections.emptyEnumeration();
        org.junit.Assert.assertNotNull(longOfPrimitiveEnumeration0);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test255");
        boolean boolean1 = java.util.Objects.nonNull((java.lang.Object) "[false, true, true, true, false]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test256");
        float[] floatArray3 = new float[] { 10, 1L, 100 };
        float[] floatArray5 = java.util.Arrays.copyOf(floatArray3, (int) (short) 1);
        float[] floatArray12 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int14 = java.util.Arrays.binarySearch(floatArray12, (float) (short) 1);
        java.util.Arrays.fill(floatArray12, (float) 100);
        int int17 = java.util.Arrays.mismatch(floatArray5, floatArray12);
        float[] floatArray26 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int28 = java.util.Arrays.binarySearch(floatArray26, (float) (short) 1);
        java.util.Arrays.sort(floatArray26);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean32 = java.util.Arrays.equals(floatArray5, (-2), (int) (byte) 10, floatArray26, (int) (short) 100, (-50));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertArrayEquals(floatArray3, new float[] { 10.0f, 1.0f, 100.0f }, (float) 1.0E-15);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertArrayEquals(floatArray5, new float[] { 10.0f }, (float) 1.0E-15);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertArrayEquals(floatArray12, new float[] { 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertArrayEquals(floatArray26, new float[] { (-1.0f), 0.0f, 0.0f, 1.0f, 1.0f, 97.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test257");
        long[] longArray0 = new long[] {};
        java.util.Arrays.sort(longArray0, 0, (int) (short) 0);
        long[] longArray4 = new long[] {};
        java.util.Arrays.sort(longArray4, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray4);
        int int9 = java.util.Arrays.compare(longArray0, longArray4);
        java.util.stream.LongStream longStream10 = java.util.Arrays.stream(longArray4);
        java.util.Arrays.parallelSort(longArray4);
        java.util.function.LongBinaryOperator longBinaryOperator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelPrefix(longArray4, (int) (short) 100, (-2), longBinaryOperator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertArrayEquals(longArray0, new long[] {});
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertArrayEquals(longArray4, new long[] {});
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(longStream10);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test258");
        int[] intArray5 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray5);
        int[] intArray14 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray14);
        java.util.Arrays.sort(intArray14);
        java.util.Arrays.sort(intArray14);
        int[] intArray23 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray23);
        java.util.Arrays.sort(intArray23);
        java.util.Arrays.sort(intArray23);
        int int27 = java.util.Arrays.compareUnsigned(intArray14, intArray23);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = java.util.Arrays.equals(intArray5, 0, (int) (byte) 0, intArray14, (int) (short) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertArrayEquals(intArray14, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertArrayEquals(intArray23, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test259");
        int[] intArray6 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray6);
        int int9 = java.util.Arrays.binarySearch(intArray6, (-2));
        int[] intArray12 = java.util.Arrays.copyOfRange(intArray6, 3, (int) '#');
        java.util.function.IntUnaryOperator intUnaryOperator13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.setAll(intArray6, intUnaryOperator13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertArrayEquals(intArray6, new int[] { 0, 1, 5, 10, 32, 97 });
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intArray12);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test260");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        java.lang.Object[] objArray71 = charArrayList57.toArray();
        java.lang.Object obj72 = charArrayList57.clone();
        char[] charArray73 = charArrayList57.removeLast();
        boolean boolean75 = charArrayList57.remove((java.lang.Object) (-1947244222));
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[[ , #, 4, #, a], [ , #, a]]");
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertArrayEquals(charArray73, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test261");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        int int71 = charArrayList57.size();
        java.util.ArrayList<char[]> charArrayList72 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList73 = charArrayList72.reversed();
        charArrayList72.clear();
        java.lang.Object[] objArray75 = charArrayList72.toArray();
        int int76 = java.util.Collections.indexOfSubList((java.util.List<char[]>) charArrayList57, (java.util.List<char[]>) charArrayList72);
        java.util.Iterator<char[]> charArrayItor77 = charArrayList72.iterator();
        java.lang.Object[] objArray78 = charArrayList72.toArray();
        java.util.function.UnaryOperator<char[]> charArrayUnaryOperator79 = null;
        // The following exception was thrown during execution in test generation
        try {
            charArrayList72.replaceAll(charArrayUnaryOperator79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(charArrayList73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertArrayEquals(objArray75, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(charArrayItor77);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertArrayEquals(objArray78, new java.lang.Object[] {});
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test262");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        java.lang.Object[] objArray71 = charArrayList57.toArray();
        java.lang.Object obj72 = charArrayList57.clone();
        java.lang.Object[] objArray73 = charArrayList57.toArray();
        long[] longArray74 = new long[] {};
        java.util.Arrays.sort(longArray74, 0, (int) (short) 0);
        long[] longArray78 = new long[] {};
        java.util.Arrays.sort(longArray78, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray78);
        int int83 = java.util.Arrays.compare(longArray74, longArray78);
        long[] longArray84 = new long[] {};
        java.util.Arrays.sort(longArray84, 0, (int) (short) 0);
        long[] longArray88 = new long[] {};
        java.util.Arrays.sort(longArray88, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray88);
        int int93 = java.util.Arrays.compare(longArray84, longArray88);
        int int94 = java.util.Arrays.compare(longArray74, longArray84);
        boolean boolean95 = charArrayList57.contains((java.lang.Object) longArray74);
        char[] charArray96 = charArrayList57.getLast();
        java.util.Iterator<char[]> charArrayItor97 = charArrayList57.iterator();
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[[ , #, 4, #, a], [ , #, a]]");
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[[ , #, 4, #, a], [ , #, a]]");
        org.junit.Assert.assertNotNull(longArray74);
        org.junit.Assert.assertArrayEquals(longArray74, new long[] {});
        org.junit.Assert.assertNotNull(longArray78);
        org.junit.Assert.assertArrayEquals(longArray78, new long[] {});
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(longArray84);
        org.junit.Assert.assertArrayEquals(longArray84, new long[] {});
        org.junit.Assert.assertNotNull(longArray88);
        org.junit.Assert.assertArrayEquals(longArray88, new long[] {});
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(charArray96);
        org.junit.Assert.assertArrayEquals(charArray96, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArrayItor97);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test263");
        short[] shortArray6 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray9 = java.util.Arrays.copyOfRange(shortArray6, 0, (int) ' ');
        short[] shortArray11 = new short[] { (byte) 100 };
        int int12 = java.util.Arrays.compare(shortArray9, shortArray11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.sort(shortArray11, (-2060932013), (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -2060932013");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertArrayEquals(shortArray6, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertArrayEquals(shortArray11, new short[] { (short) 100 });
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-90) + "'", int12 == (-90));
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test264");
        // The following exception was thrown during execution in test generation
        try {
            long long3 = java.util.Objects.checkFromToIndex((long) (byte) -1, (long) 1, (long) 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [-1, 1) out of bounds for length 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test265");
        int[] intArray6 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray6);
        int int9 = java.util.Arrays.binarySearch(intArray6, (-2));
        int[] intArray12 = java.util.Arrays.copyOfRange(intArray6, 3, (int) '#');
        int[] intArray20 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray20);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = java.util.Arrays.compare(intArray12, (int) 'a', (-2060932013), intArray20, 3, (-2060932013));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(97) > toIndex(-2060932013)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertArrayEquals(intArray6, new int[] { 0, 1, 5, 10, 32, 97 });
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertArrayEquals(intArray20, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test266");
        double[] doubleArray4 = new double[] { 0, (-1.0f), '#', (byte) 100 };
        double[] doubleArray11 = new double[] { (byte) 100, (-1.0d), 100.0f, (byte) -1, (short) -1, 1 };
        int int12 = java.util.Arrays.compare(doubleArray4, doubleArray11);
        java.util.Arrays.sort(doubleArray4);
        java.util.Spliterator.OfDouble ofDouble14 = java.util.Arrays.spliterator(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { (-1.0d), 0.0d, 35.0d, 100.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 100.0d, (-1.0d), 100.0d, (-1.0d), (-1.0d), 1.0d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(ofDouble14);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test267");
        long[] longArray0 = null;
        long[] longArray3 = new long[] { 100L, 1L };
        java.util.Arrays.sort(longArray3);
        long[] longArray7 = new long[] { 100L, 1L };
        java.util.Arrays.sort(longArray7);
        int int9 = java.util.Arrays.compare(longArray3, longArray7);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = java.util.Arrays.mismatch(longArray0, longArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"a\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertArrayEquals(longArray3, new long[] { 1L, 100L });
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertArrayEquals(longArray7, new long[] { 1L, 100L });
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test268");
        long[] longArray0 = new long[] {};
        java.util.Arrays.sort(longArray0, 0, (int) (short) 0);
        long[] longArray4 = new long[] {};
        java.util.Arrays.sort(longArray4, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray4);
        int int9 = java.util.Arrays.compare(longArray0, longArray4);
        long[] longArray10 = new long[] {};
        java.util.Arrays.sort(longArray10, 0, (int) (short) 0);
        long[] longArray14 = new long[] {};
        java.util.Arrays.sort(longArray14, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray14);
        int int19 = java.util.Arrays.compare(longArray10, longArray14);
        int int20 = java.util.Arrays.compare(longArray0, longArray10);
        java.util.Spliterator.OfLong ofLong21 = java.util.Arrays.spliterator(longArray0);
        long[] longArray26 = new long[] { (short) 10, (byte) 0, 100L, '4' };
        long[] longArray27 = new long[] {};
        java.util.Arrays.sort(longArray27, 0, (int) (short) 0);
        int int31 = java.util.Arrays.compareUnsigned(longArray26, longArray27);
        java.util.List<long[]> longArrayList32 = java.util.List.of(longArray0, longArray26);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertArrayEquals(longArray0, new long[] {});
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertArrayEquals(longArray4, new long[] {});
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertArrayEquals(longArray10, new long[] {});
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertArrayEquals(longArray14, new long[] {});
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(ofLong21);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertArrayEquals(longArray26, new long[] { 10L, 0L, 100L, 52L });
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertArrayEquals(longArray27, new long[] {});
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(longArrayList32);
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test269");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        charArrayList57.trimToSize();
        int int73 = charArrayList57.indexOf((java.lang.Object) 1.0d);
        boolean[] booleanArray78 = new boolean[] { false, false, true, true };
        boolean[] booleanArray81 = new boolean[] { true, false };
        int int82 = java.util.Arrays.mismatch(booleanArray78, booleanArray81);
        boolean boolean83 = charArrayList57.equals((java.lang.Object) booleanArray81);
        java.util.ArrayList<char[]> charArrayList84 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList85 = charArrayList84.reversed();
        java.util.Iterator<char[]> charArrayItor86 = charArrayList85.iterator();
        java.lang.Class<?> wildcardClass87 = charArrayItor86.getClass();
        java.util.ArrayList<char[]> charArrayList88 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList89 = charArrayList88.reversed();
        java.util.Iterator<char[]> charArrayItor90 = charArrayList89.iterator();
        java.lang.Class<?> wildcardClass91 = charArrayItor90.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray92 = new java.lang.reflect.GenericDeclaration[] { wildcardClass87, wildcardClass91 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.GenericDeclaration[] genericDeclarationArray93 = charArrayList57.toArray(genericDeclarationArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: arraycopy: element type mismatch: can not cast one of the elements of java.lang.Object[] to the type of the destination array, java.lang.reflect.GenericDeclaration");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(booleanArray78);
        assertBooleanArrayEquals(booleanArray78, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray81);
        assertBooleanArrayEquals(booleanArray81, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(charArrayList85);
        org.junit.Assert.assertNotNull(charArrayItor86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(charArrayList89);
        org.junit.Assert.assertNotNull(charArrayItor90);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertNotNull(genericDeclarationArray92);
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test270");
        // The following exception was thrown during execution in test generation
        try {
            int int3 = java.util.Objects.checkFromIndexSize((int) 'a', (-6), (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [97, 97 + -6) out of bounds for length -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test271");
        float[] floatArray4 = new float[] { 100L, (-1947244222), 10, 100 };
        // The following exception was thrown during execution in test generation
        try {
            int int8 = java.util.Arrays.binarySearch(floatArray4, (int) ' ', (int) (byte) -1, (float) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(32) > toIndex(-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertArrayEquals(floatArray4, new float[] { 100.0f, (-1.9472442E9f), 10.0f, 100.0f }, (float) 1.0E-15);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test272");
        java.util.List<java.util.List<char[]>> charArrayListList0 = java.util.Collections.emptyList();
        org.junit.Assert.assertNotNull(charArrayListList0);
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test273");
        short[] shortArray6 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray9 = java.util.Arrays.copyOfRange(shortArray6, 0, (int) ' ');
        int int11 = java.util.Arrays.binarySearch(shortArray6, (short) -1);
        java.lang.String str12 = java.util.Arrays.toString(shortArray6);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertArrayEquals(shortArray6, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[10, 100, 10, -1, 100, 1]" + "'", str12, "[10, 100, 10, -1, 100, 1]");
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test274");
        float[] floatArray6 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int8 = java.util.Arrays.binarySearch(floatArray6, (float) (short) 1);
        java.lang.String str9 = java.util.Arrays.toString(floatArray6);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertArrayEquals(floatArray6, new float[] { 97.0f, (-1.0f), 0.0f, 1.0f, 0.0f, 1.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[97.0, -1.0, 0.0, 1.0, 0.0, 1.0]" + "'", str9, "[97.0, -1.0, 0.0, 1.0, 0.0, 1.0]");
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test275");
        float[] floatArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.fill(floatArray0, (int) (short) 100, (int) (byte) 10, (float) (-1947244222));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"a\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test276");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        charArrayList0.clear();
        java.lang.Object[] objArray3 = charArrayList0.toArray();
        boolean boolean5 = charArrayList0.equals((java.lang.Object) false);
        char[] charArray9 = new char[] { ' ', '#', 'a' };
        char[] charArray15 = new char[] { ' ', '#', '4', '#', 'a' };
        int int16 = java.util.Arrays.compare(charArray9, charArray15);
        charArrayList0.addFirst(charArray9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.sort(charArray9, 45, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(45) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertArrayEquals(objArray3, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertArrayEquals(charArray15, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 45 + "'", int16 == 45);
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test277");
        java.util.List<java.lang.constant.Constable> constableList3 = java.util.List.of((java.lang.constant.Constable) (-2060931702), (java.lang.constant.Constable) 100.0d, (java.lang.constant.Constable) 7);
        org.junit.Assert.assertNotNull(constableList3);
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test278");
        long[] longArray0 = new long[] {};
        java.util.Arrays.sort(longArray0, 0, (int) (short) 0);
        long[] longArray4 = new long[] {};
        java.util.Arrays.sort(longArray4, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray4);
        int int9 = java.util.Arrays.compare(longArray0, longArray4);
        long[] longArray10 = new long[] {};
        java.util.Arrays.sort(longArray10, 0, (int) (short) 0);
        long[] longArray14 = new long[] {};
        java.util.Arrays.sort(longArray14, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray14);
        int int19 = java.util.Arrays.compare(longArray10, longArray14);
        int int20 = java.util.Arrays.compare(longArray0, longArray10);
        java.util.function.Supplier<java.lang.String> strSupplier21 = null;
        long[] longArray22 = java.util.Objects.requireNonNull(longArray10, strSupplier21);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream25 = java.util.Arrays.stream(longArray10, (int) (byte) 0, (-2060931702));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: origin(0) > fence(-2060931702)");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertArrayEquals(longArray0, new long[] {});
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertArrayEquals(longArray4, new long[] {});
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertArrayEquals(longArray10, new long[] {});
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertArrayEquals(longArray14, new long[] {});
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertArrayEquals(longArray22, new long[] {});
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test279");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        java.lang.Object[] objArray71 = charArrayList57.toArray();
        java.lang.Object obj72 = charArrayList57.clone();
        java.lang.Object[] objArray73 = charArrayList57.toArray();
        java.util.Iterator<char[]> charArrayItor74 = charArrayList57.iterator();
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[[ , #, 4, #, a], [ , #, a]]");
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[[ , #, 4, #, a], [ , #, a]]");
        org.junit.Assert.assertNotNull(charArrayItor74);
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test280");
        float[] floatArray6 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int8 = java.util.Arrays.binarySearch(floatArray6, (float) (short) 1);
        java.util.Arrays.sort(floatArray6);
        float[] floatArray15 = new float[] { 10, 1L, 100 };
        float[] floatArray17 = java.util.Arrays.copyOf(floatArray15, (int) (short) 1);
        float[] floatArray24 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int26 = java.util.Arrays.binarySearch(floatArray24, (float) (short) 1);
        java.util.Arrays.sort(floatArray24);
        int int28 = java.util.Arrays.mismatch(floatArray17, floatArray24);
        // The following exception was thrown during execution in test generation
        try {
            int int31 = java.util.Arrays.compare(floatArray6, 100, (int) (short) -1, floatArray24, (int) ' ', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(100) > toIndex(-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertArrayEquals(floatArray6, new float[] { (-1.0f), 0.0f, 0.0f, 1.0f, 1.0f, 97.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertArrayEquals(floatArray15, new float[] { 10.0f, 1.0f, 100.0f }, (float) 1.0E-15);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertArrayEquals(floatArray17, new float[] { 10.0f }, (float) 1.0E-15);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertArrayEquals(floatArray24, new float[] { (-1.0f), 0.0f, 0.0f, 1.0f, 1.0f, 97.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test281");
        float[] floatArray3 = new float[] { 10, 1L, 100 };
        float[] floatArray5 = java.util.Arrays.copyOf(floatArray3, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.sort(floatArray3, (int) '#', 7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(35) > toIndex(7)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertArrayEquals(floatArray3, new float[] { 10.0f, 1.0f, 100.0f }, (float) 1.0E-15);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertArrayEquals(floatArray5, new float[] { 10.0f }, (float) 1.0E-15);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test282");
        long[] longArray2 = new long[] { 100L, 1L };
        java.util.Arrays.sort(longArray2);
        long[] longArray6 = new long[] { 100L, 1L };
        java.util.Arrays.sort(longArray6);
        int int8 = java.util.Arrays.compare(longArray2, longArray6);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray11 = java.util.Arrays.copyOfRange(longArray6, 45, (-90));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: 45 > -90");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertArrayEquals(longArray2, new long[] { 1L, 100L });
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertArrayEquals(longArray6, new long[] { 1L, 100L });
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test283");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        int int71 = charArrayList57.size();
        java.util.ArrayList<char[]> charArrayList72 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList73 = charArrayList72.reversed();
        charArrayList72.clear();
        java.lang.Object[] objArray75 = charArrayList72.toArray();
        int int76 = java.util.Collections.indexOfSubList((java.util.List<char[]>) charArrayList57, (java.util.List<char[]>) charArrayList72);
        boolean boolean78 = charArrayList57.equals((java.lang.Object) 0.0f);
        byte[] byteArray85 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray86 = new byte[] {};
        int int87 = java.util.Arrays.compareUnsigned(byteArray85, byteArray86);
        java.util.Arrays.parallelSort(byteArray85);
        boolean boolean89 = charArrayList57.remove((java.lang.Object) byteArray85);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray91 = charArrayList57.remove((-50));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index -50 out of bounds for length 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(charArrayList73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertArrayEquals(objArray75, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertArrayEquals(byteArray85, new byte[] { (byte) -1, (byte) -1, (byte) -1, (byte) 0, (byte) 100, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertArrayEquals(byteArray86, new byte[] {});
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 6 + "'", int87 == 6);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test284");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        java.util.List<char[]> charArrayList44 = java.util.List.of(charArray9, charArray14, charArray25, charArray42);
        java.util.Arrays.fill(charArray9, ' ');
        java.util.Arrays.fill(charArray9, ' ');
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', ' ', ' ', ' ', ' ' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArrayList44);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test285");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        java.lang.Object[] objArray71 = charArrayList57.toArray();
        char[] charArray72 = charArrayList57.removeLast();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray74 = charArrayList57.get((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 10 out of bounds for length 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[[ , #, 4, #, a], [ , #, a]]");
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertArrayEquals(charArray72, new char[] { ' ', '#', 'a' });
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test286");
        int[] intArray6 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray6);
        int[] intArray12 = new int[] { (byte) -1, 100 };
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = java.util.Arrays.equals(intArray6, 5, (-50), intArray12, (-2), (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(5) > toIndex(-50)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertArrayEquals(intArray6, new int[] { 0, 1, 5, 10, 32, 97 });
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertArrayEquals(intArray12, new int[] { (-1), 100 });
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test287");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        charArrayList0.clear();
        java.lang.Object[] objArray3 = charArrayList0.toArray();
        boolean boolean5 = charArrayList0.equals((java.lang.Object) false);
        char[] charArray7 = new char[] { ' ' };
        charArrayList0.addLast(charArray7);
        char[] charArray9 = charArrayList0.getLast();
        char[] charArray13 = new char[] { ' ', '#', 'a' };
        char[] charArray19 = new char[] { ' ', '#', '4', '#', 'a' };
        int int20 = java.util.Arrays.compare(charArray13, charArray19);
        char[] charArray24 = new char[] { ' ', '#', 'a' };
        char[] charArray30 = new char[] { ' ', '#', '4', '#', 'a' };
        int int31 = java.util.Arrays.compare(charArray24, charArray30);
        char[] charArray35 = new char[] { ' ', '#', 'a' };
        char[] charArray41 = new char[] { ' ', '#', '4', '#', 'a' };
        int int42 = java.util.Arrays.compare(charArray35, charArray41);
        char[] charArray46 = new char[] { ' ', '#', 'a' };
        char[] charArray52 = new char[] { ' ', '#', '4', '#', 'a' };
        int int53 = java.util.Arrays.compare(charArray46, charArray52);
        char[] charArray57 = new char[] { ' ', '#', 'a' };
        char[] charArray63 = new char[] { ' ', '#', '4', '#', 'a' };
        int int64 = java.util.Arrays.compare(charArray57, charArray63);
        java.util.List<char[]> charArrayList65 = java.util.List.of(charArray30, charArray35, charArray46, charArray63);
        char[][] charArray66 = new char[][] { charArray19, charArray35 };
        java.util.ArrayList<char[]> charArrayList67 = new java.util.ArrayList<char[]>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList67, charArray66);
        char[] charArray72 = new char[] { ' ', '#', 'a' };
        char[] charArray78 = new char[] { ' ', '#', '4', '#', 'a' };
        int int79 = java.util.Arrays.compare(charArray72, charArray78);
        boolean boolean80 = charArrayList67.contains((java.lang.Object) charArray72);
        int int81 = charArrayList67.size();
        java.util.ArrayList<char[]> charArrayList82 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList83 = charArrayList82.reversed();
        charArrayList82.clear();
        java.lang.Object[] objArray85 = charArrayList82.toArray();
        int int86 = java.util.Collections.indexOfSubList((java.util.List<char[]>) charArrayList67, (java.util.List<char[]>) charArrayList82);
        boolean boolean88 = charArrayList67.equals((java.lang.Object) 0.0f);
        java.util.Spliterator<char[]> charArraySpliterator89 = charArrayList67.spliterator();
        int int90 = java.util.Collections.lastIndexOfSubList((java.util.List<char[]>) charArrayList0, (java.util.List<char[]>) charArrayList67);
        java.lang.Object obj91 = charArrayList0.clone();
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertArrayEquals(objArray3, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertArrayEquals(charArray7, new char[] { ' ' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ' });
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertArrayEquals(charArray13, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertArrayEquals(charArray19, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 45 + "'", int20 == 45);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertArrayEquals(charArray24, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertArrayEquals(charArray30, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 45 + "'", int31 == 45);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertArrayEquals(charArray35, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertArrayEquals(charArray41, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 45 + "'", int42 == 45);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertArrayEquals(charArray46, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertArrayEquals(charArray52, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 45 + "'", int53 == 45);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertArrayEquals(charArray57, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertArrayEquals(charArray63, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 45 + "'", int64 == 45);
        org.junit.Assert.assertNotNull(charArrayList65);
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertArrayEquals(charArray72, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertArrayEquals(charArray78, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 45 + "'", int79 == 45);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(charArrayList83);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertArrayEquals(objArray85, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(charArraySpliterator89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(obj91);
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test288");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.lang.String[] strArray6 = new java.lang.String[] { "", "[hi!, [0.0, 10.0, 100.0], [0.0, 10.0, 100.0], hi!]", "", "" };
        int int7 = java.util.Arrays.compare(strArray1, strArray6);
        java.util.Arrays.sort((java.lang.Object[]) strArray1);
        char[] charArray12 = new char[] { ' ', '#', 'a' };
        char[] charArray18 = new char[] { ' ', '#', '4', '#', 'a' };
        int int19 = java.util.Arrays.compare(charArray12, charArray18);
        char[] charArray23 = new char[] { ' ', '#', 'a' };
        char[] charArray29 = new char[] { ' ', '#', '4', '#', 'a' };
        int int30 = java.util.Arrays.compare(charArray23, charArray29);
        char[] charArray34 = new char[] { ' ', '#', 'a' };
        char[] charArray40 = new char[] { ' ', '#', '4', '#', 'a' };
        int int41 = java.util.Arrays.compare(charArray34, charArray40);
        char[] charArray45 = new char[] { ' ', '#', 'a' };
        char[] charArray51 = new char[] { ' ', '#', '4', '#', 'a' };
        int int52 = java.util.Arrays.compare(charArray45, charArray51);
        char[] charArray56 = new char[] { ' ', '#', 'a' };
        char[] charArray62 = new char[] { ' ', '#', '4', '#', 'a' };
        int int63 = java.util.Arrays.compare(charArray56, charArray62);
        java.util.List<char[]> charArrayList64 = java.util.List.of(charArray29, charArray34, charArray45, charArray62);
        char[][] charArray65 = new char[][] { charArray18, charArray34 };
        java.util.ArrayList<char[]> charArrayList66 = new java.util.ArrayList<char[]>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList66, charArray65);
        char[] charArray71 = new char[] { ' ', '#', 'a' };
        char[] charArray77 = new char[] { ' ', '#', '4', '#', 'a' };
        int int78 = java.util.Arrays.compare(charArray71, charArray77);
        boolean boolean79 = charArrayList66.contains((java.lang.Object) charArray71);
        java.lang.Object[] objArray80 = charArrayList66.toArray();
        char[] charArray81 = charArrayList66.removeLast();
        char[] charArray82 = charArrayList66.removeFirst();
        java.lang.Object[] objArray83 = charArrayList66.toArray();
        int int84 = java.util.Arrays.mismatch((java.lang.Object[]) strArray1, objArray83);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertArrayEquals(strArray1, new java.lang.String[] { "" });
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertArrayEquals(strArray6, new java.lang.String[] { "", "[hi!, [0.0, 10.0, 100.0], [0.0, 10.0, 100.0], hi!]", "", "" });
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertArrayEquals(charArray12, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertArrayEquals(charArray18, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 45 + "'", int19 == 45);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertArrayEquals(charArray23, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertArrayEquals(charArray29, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 45 + "'", int30 == 45);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertArrayEquals(charArray34, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertArrayEquals(charArray40, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 45 + "'", int41 == 45);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertArrayEquals(charArray45, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertArrayEquals(charArray51, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 45 + "'", int52 == 45);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertArrayEquals(charArray56, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 45 + "'", int63 == 45);
        org.junit.Assert.assertNotNull(charArrayList64);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertArrayEquals(charArray71, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertArrayEquals(charArray77, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 45 + "'", int78 == 45);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[[ , #, 4, #, a], [ , #, a]]");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertArrayEquals(charArray81, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertArrayEquals(charArray82, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertArrayEquals(objArray83, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test289");
        java.util.List<char[]> charArrayList0 = null;
        java.util.random.RandomGenerator randomGenerator1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections.shuffle(charArrayList0, randomGenerator1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.List.size()\" because \"list\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test290");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray7 = new byte[] {};
        int int8 = java.util.Arrays.compareUnsigned(byteArray6, byteArray7);
        byte[] byteArray9 = new byte[] {};
        int int10 = java.util.Arrays.mismatch(byteArray7, byteArray9);
        java.util.Arrays.fill(byteArray7, (byte) 1);
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray22 = new byte[] {};
        int int23 = java.util.Arrays.compareUnsigned(byteArray21, byteArray22);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = java.util.Arrays.mismatch(byteArray7, (int) (byte) -1, (int) 'a', byteArray21, 3, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertArrayEquals(byteArray21, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertArrayEquals(byteArray22, new byte[] {});
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test291");
        int[] intArray6 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray6);
        int int9 = java.util.Arrays.binarySearch(intArray6, (-2));
        int[] intArray12 = java.util.Arrays.copyOfRange(intArray6, 3, (int) '#');
        java.util.stream.IntStream intStream13 = java.util.Arrays.stream(intArray12);
        java.util.function.IntUnaryOperator intUnaryOperator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSetAll(intArray12, intUnaryOperator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertArrayEquals(intArray6, new int[] { 0, 1, 5, 10, 32, 97 });
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intStream13);
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test292");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        charArrayList0.clear();
        java.lang.Object[] objArray3 = charArrayList0.toArray();
        boolean boolean5 = charArrayList0.equals((java.lang.Object) false);
        char[] charArray9 = new char[] { ' ', '#', 'a' };
        char[] charArray15 = new char[] { ' ', '#', '4', '#', 'a' };
        int int16 = java.util.Arrays.compare(charArray9, charArray15);
        charArrayList0.addFirst(charArray9);
        java.util.Comparator<double[]> doubleArrayComparator18 = java.util.Collections.reverseOrder();
        boolean boolean19 = charArrayList0.equals((java.lang.Object) doubleArrayComparator18);
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertArrayEquals(objArray3, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertArrayEquals(charArray15, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 45 + "'", int16 == 45);
        org.junit.Assert.assertNotNull(doubleArrayComparator18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test293");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray7 = new byte[] {};
        int int8 = java.util.Arrays.compareUnsigned(byteArray6, byteArray7);
        byte[] byteArray9 = new byte[] {};
        int int10 = java.util.Arrays.mismatch(byteArray7, byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray18 = new byte[] {};
        int int19 = java.util.Arrays.compareUnsigned(byteArray17, byteArray18);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 };
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray33 = new byte[] {};
        int int34 = java.util.Arrays.compareUnsigned(byteArray32, byteArray33);
        byte[] byteArray35 = new byte[] {};
        int int36 = java.util.Arrays.mismatch(byteArray33, byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray44 = new byte[] {};
        int int45 = java.util.Arrays.compareUnsigned(byteArray43, byteArray44);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray53 = new byte[] {};
        int int54 = java.util.Arrays.compareUnsigned(byteArray52, byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray62 = new byte[] {};
        int int63 = java.util.Arrays.compareUnsigned(byteArray61, byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray71 = new byte[] {};
        int int72 = java.util.Arrays.compareUnsigned(byteArray70, byteArray71);
        byte[] byteArray73 = new byte[] {};
        int int74 = java.util.Arrays.mismatch(byteArray71, byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray82 = new byte[] {};
        int int83 = java.util.Arrays.compareUnsigned(byteArray81, byteArray82);
        byte[] byteArray84 = new byte[] {};
        int int85 = java.util.Arrays.mismatch(byteArray82, byteArray84);
        java.util.List<byte[]> byteArrayList86 = java.util.List.of(byteArray9, byteArray17, byteArray25, byteArray35, byteArray44, byteArray52, byteArray62, byteArray73, byteArray84);
        byte[] byteArray93 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray94 = new byte[] {};
        int int95 = java.util.Arrays.compareUnsigned(byteArray93, byteArray94);
        java.util.Arrays.parallelSort(byteArray93);
        int int97 = java.util.Arrays.compareUnsigned(byteArray73, byteArray93);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] {});
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertArrayEquals(byteArray25, new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertArrayEquals(byteArray32, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertArrayEquals(byteArray33, new byte[] {});
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6 + "'", int34 == 6);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertArrayEquals(byteArray35, new byte[] {});
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertArrayEquals(byteArray43, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertArrayEquals(byteArray44, new byte[] {});
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 6 + "'", int45 == 6);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertArrayEquals(byteArray52, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertArrayEquals(byteArray53, new byte[] {});
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertArrayEquals(byteArray61, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertArrayEquals(byteArray62, new byte[] {});
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertArrayEquals(byteArray70, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertArrayEquals(byteArray71, new byte[] {});
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 6 + "'", int72 == 6);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertArrayEquals(byteArray73, new byte[] {});
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertArrayEquals(byteArray81, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertArrayEquals(byteArray82, new byte[] {});
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 6 + "'", int83 == 6);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertArrayEquals(byteArray84, new byte[] {});
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(byteArrayList86);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertArrayEquals(byteArray93, new byte[] { (byte) -1, (byte) -1, (byte) -1, (byte) 0, (byte) 100, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertArrayEquals(byteArray94, new byte[] {});
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 6 + "'", int95 == 6);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-6) + "'", int97 == (-6));
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test294");
        int[] intArray5 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray5);
        int[] intArray12 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray12);
        java.util.Arrays.sort(intArray12);
        int int15 = java.util.Arrays.compareUnsigned(intArray5, intArray12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream18 = java.util.Arrays.stream(intArray12, (-50), (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -50");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertArrayEquals(intArray12, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test295");
        java.util.List list0 = java.util.Collections.EMPTY_LIST;
        java.util.Collections.rotate((java.util.List<char[]>) list0, 5);
        char[] charArray6 = new char[] { ' ', '#', 'a' };
        char[] charArray12 = new char[] { ' ', '#', '4', '#', 'a' };
        int int13 = java.util.Arrays.compare(charArray6, charArray12);
        char[] charArray17 = new char[] { ' ', '#', 'a' };
        char[] charArray23 = new char[] { ' ', '#', '4', '#', 'a' };
        int int24 = java.util.Arrays.compare(charArray17, charArray23);
        char[] charArray28 = new char[] { ' ', '#', 'a' };
        char[] charArray34 = new char[] { ' ', '#', '4', '#', 'a' };
        int int35 = java.util.Arrays.compare(charArray28, charArray34);
        char[] charArray39 = new char[] { ' ', '#', 'a' };
        char[] charArray45 = new char[] { ' ', '#', '4', '#', 'a' };
        int int46 = java.util.Arrays.compare(charArray39, charArray45);
        java.util.List<char[]> charArrayList47 = java.util.List.of(charArray12, charArray17, charArray28, charArray45);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean48 = list0.add(charArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(list0);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertArrayEquals(charArray6, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertArrayEquals(charArray12, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 45 + "'", int13 == 45);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertArrayEquals(charArray17, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertArrayEquals(charArray23, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 45 + "'", int24 == 45);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertArrayEquals(charArray28, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertArrayEquals(charArray34, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 45 + "'", int35 == 45);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertArrayEquals(charArray39, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertArrayEquals(charArray45, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 45 + "'", int46 == 45);
        org.junit.Assert.assertNotNull(charArrayList47);
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test296");
        double[] doubleArray1 = new double[] { 1 };
        java.util.Arrays.fill(doubleArray1, (double) 6);
        java.util.Arrays.parallelSort(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray7 = java.util.Arrays.copyOfRange(doubleArray1, 5, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: 5 > -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertArrayEquals(doubleArray1, new double[] { 6.0d }, 1.0E-15);
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test297");
        java.util.NavigableSet<byte[]> byteArraySet0 = java.util.Collections.emptyNavigableSet();
        java.util.NavigableSet<byte[]> byteArraySet1 = java.util.Collections.unmodifiableNavigableSet(byteArraySet0);
        java.util.NavigableSet<byte[]> byteArraySet2 = java.util.Collections.emptyNavigableSet();
        java.util.SortedSet<byte[]> byteArraySet3 = java.util.Collections.synchronizedSortedSet((java.util.SortedSet<byte[]>) byteArraySet2);
        java.util.NavigableSet[] navigableSetArray5 = new java.util.NavigableSet[2];
        @SuppressWarnings("unchecked")
        java.util.NavigableSet<byte[]>[] byteArraySetArray6 = (java.util.NavigableSet<byte[]>[]) navigableSetArray5;
        byteArraySetArray6[0] = byteArraySet1;
        byteArraySetArray6[1] = byteArraySet2;
        java.util.NavigableSet<byte[]> byteArraySet11 = java.util.Collections.emptyNavigableSet();
        java.util.NavigableSet<byte[]> byteArraySet12 = java.util.Collections.unmodifiableNavigableSet(byteArraySet11);
        java.util.NavigableSet<byte[]> byteArraySet13 = java.util.Collections.emptyNavigableSet();
        java.util.SortedSet<byte[]> byteArraySet14 = java.util.Collections.synchronizedSortedSet((java.util.SortedSet<byte[]>) byteArraySet13);
        java.util.NavigableSet[] navigableSetArray16 = new java.util.NavigableSet[2];
        @SuppressWarnings("unchecked")
        java.util.NavigableSet<byte[]>[] byteArraySetArray17 = (java.util.NavigableSet<byte[]>[]) navigableSetArray16;
        byteArraySetArray17[0] = byteArraySet12;
        byteArraySetArray17[1] = byteArraySet13;
        java.util.NavigableSet<byte[]> byteArraySet22 = java.util.Collections.emptyNavigableSet();
        java.util.NavigableSet<byte[]> byteArraySet23 = java.util.Collections.unmodifiableNavigableSet(byteArraySet22);
        java.util.NavigableSet<byte[]> byteArraySet24 = java.util.Collections.emptyNavigableSet();
        java.util.SortedSet<byte[]> byteArraySet25 = java.util.Collections.synchronizedSortedSet((java.util.SortedSet<byte[]>) byteArraySet24);
        java.util.NavigableSet[] navigableSetArray27 = new java.util.NavigableSet[2];
        @SuppressWarnings("unchecked")
        java.util.NavigableSet<byte[]>[] byteArraySetArray28 = (java.util.NavigableSet<byte[]>[]) navigableSetArray27;
        byteArraySetArray28[0] = byteArraySet23;
        byteArraySetArray28[1] = byteArraySet24;
        java.util.NavigableSet<byte[]> byteArraySet33 = java.util.Collections.emptyNavigableSet();
        java.util.NavigableSet<byte[]> byteArraySet34 = java.util.Collections.unmodifiableNavigableSet(byteArraySet33);
        java.util.NavigableSet<byte[]> byteArraySet35 = java.util.Collections.emptyNavigableSet();
        java.util.SortedSet<byte[]> byteArraySet36 = java.util.Collections.synchronizedSortedSet((java.util.SortedSet<byte[]>) byteArraySet35);
        java.util.NavigableSet[] navigableSetArray38 = new java.util.NavigableSet[2];
        @SuppressWarnings("unchecked")
        java.util.NavigableSet<byte[]>[] byteArraySetArray39 = (java.util.NavigableSet<byte[]>[]) navigableSetArray38;
        byteArraySetArray39[0] = byteArraySet34;
        byteArraySetArray39[1] = byteArraySet35;
        java.util.NavigableSet[][] navigableSetArray45 = new java.util.NavigableSet[4][];
        @SuppressWarnings("unchecked")
        java.util.NavigableSet<byte[]>[][] byteArraySetArray46 = (java.util.NavigableSet<byte[]>[][]) navigableSetArray45;
        byteArraySetArray46[0] = byteArraySetArray6;
        byteArraySetArray46[1] = byteArraySetArray17;
        byteArraySetArray46[2] = byteArraySetArray28;
        byteArraySetArray46[3] = byteArraySetArray39;
        java.util.NavigableSet<byte[]>[][] byteArraySetArray56 = java.util.Arrays.copyOf(byteArraySetArray46, 7);
        java.util.List<java.lang.Cloneable> cloneableList57 = java.util.List.of((java.lang.Cloneable) byteArraySetArray46);
        java.util.List<java.util.SortedSet<byte[]>[]> byteArraySetArrayList58 = java.util.Arrays.asList((java.util.SortedSet<byte[]>[][]) byteArraySetArray46);
        org.junit.Assert.assertNotNull(byteArraySet0);
        org.junit.Assert.assertNotNull(byteArraySet1);
        org.junit.Assert.assertNotNull(byteArraySet2);
        org.junit.Assert.assertNotNull(byteArraySet3);
        org.junit.Assert.assertNotNull(navigableSetArray5);
        org.junit.Assert.assertNotNull(byteArraySetArray6);
        org.junit.Assert.assertNotNull(byteArraySet11);
        org.junit.Assert.assertNotNull(byteArraySet12);
        org.junit.Assert.assertNotNull(byteArraySet13);
        org.junit.Assert.assertNotNull(byteArraySet14);
        org.junit.Assert.assertNotNull(navigableSetArray16);
        org.junit.Assert.assertNotNull(byteArraySetArray17);
        org.junit.Assert.assertNotNull(byteArraySet22);
        org.junit.Assert.assertNotNull(byteArraySet23);
        org.junit.Assert.assertNotNull(byteArraySet24);
        org.junit.Assert.assertNotNull(byteArraySet25);
        org.junit.Assert.assertNotNull(navigableSetArray27);
        org.junit.Assert.assertNotNull(byteArraySetArray28);
        org.junit.Assert.assertNotNull(byteArraySet33);
        org.junit.Assert.assertNotNull(byteArraySet34);
        org.junit.Assert.assertNotNull(byteArraySet35);
        org.junit.Assert.assertNotNull(byteArraySet36);
        org.junit.Assert.assertNotNull(navigableSetArray38);
        org.junit.Assert.assertNotNull(byteArraySetArray39);
        org.junit.Assert.assertNotNull(navigableSetArray45);
        org.junit.Assert.assertNotNull(byteArraySetArray46);
        org.junit.Assert.assertNotNull(byteArraySetArray56);
        org.junit.Assert.assertNotNull(cloneableList57);
        org.junit.Assert.assertNotNull(byteArraySetArrayList58);
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test298");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        java.util.List<char[]> charArrayList44 = java.util.List.of(charArray9, charArray14, charArray25, charArray42);
        int int46 = java.util.Arrays.binarySearch(charArray25, 'a');
        java.util.Arrays.sort(charArray25);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArrayList44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test299");
        short[] shortArray4 = new short[] { (byte) 0, (short) 0, (short) 0, (byte) 10 };
        short[] shortArray6 = new short[] { (byte) 1 };
        int int7 = java.util.Arrays.compare(shortArray4, shortArray6);
        short[] shortArray16 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray19 = java.util.Arrays.copyOfRange(shortArray16, 0, (int) ' ');
        int int21 = java.util.Arrays.binarySearch(shortArray16, (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = java.util.Arrays.compare(shortArray4, 0, 0, shortArray16, 2, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(2) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertArrayEquals(shortArray4, new short[] { (short) 0, (short) 0, (short) 0, (short) 10 });
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertArrayEquals(shortArray6, new short[] { (short) 1 });
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertArrayEquals(shortArray16, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test300");
        int[] intArray5 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray5);
        java.util.Arrays.sort(intArray5);
        java.util.Arrays.sort(intArray5);
        int[] intArray14 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray14);
        java.util.Arrays.sort(intArray14);
        java.util.Arrays.sort(intArray14);
        int int18 = java.util.Arrays.compareUnsigned(intArray5, intArray14);
        java.util.Spliterator.OfInt ofInt19 = java.util.Arrays.spliterator(intArray5);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = java.util.Arrays.binarySearch(intArray5, 6, (int) 'a', (-6));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertArrayEquals(intArray14, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(ofInt19);
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test301");
        long[] longArray2 = new long[] { 100L, 1L };
        java.util.Arrays.sort(longArray2);
        long[] longArray6 = new long[] { 100L, 1L };
        java.util.Arrays.sort(longArray6);
        int int8 = java.util.Arrays.compare(longArray2, longArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(longArray6, 5, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(5) > toIndex(-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertArrayEquals(longArray2, new long[] { 1L, 100L });
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertArrayEquals(longArray6, new long[] { 1L, 100L });
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test302");
        float[] floatArray4 = new float[] { ' ', (-1947244222), 1, 100L };
        java.util.Arrays.parallelSort(floatArray4);
        java.lang.String str6 = java.util.Arrays.toString(floatArray4);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertArrayEquals(floatArray4, new float[] { (-1.9472442E9f), 1.0f, 32.0f, 100.0f }, (float) 1.0E-15);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[-1.9472442E9, 1.0, 32.0, 100.0]" + "'", str6, "[-1.9472442E9, 1.0, 32.0, 100.0]");
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test303");
        long[] longArray0 = new long[] {};
        java.util.Arrays.sort(longArray0, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray0);
        java.util.Arrays.fill(longArray0, (-1L));
        java.util.function.LongBinaryOperator longBinaryOperator9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelPrefix(longArray0, 1, 1, longBinaryOperator9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertArrayEquals(longArray0, new long[] {});
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test304");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        int int71 = charArrayList57.size();
        java.util.ArrayList<char[]> charArrayList72 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList73 = charArrayList72.reversed();
        charArrayList72.clear();
        java.lang.Object[] objArray75 = charArrayList72.toArray();
        int int76 = java.util.Collections.indexOfSubList((java.util.List<char[]>) charArrayList57, (java.util.List<char[]>) charArrayList72);
        java.util.Iterator<char[]> charArrayItor77 = charArrayList72.iterator();
        java.util.SortedSet[] sortedSetArray79 = new java.util.SortedSet[0];
        @SuppressWarnings("unchecked")
        java.util.SortedSet<byte[]>[] byteArraySetArray80 = (java.util.SortedSet<byte[]>[]) sortedSetArray79;
        java.util.SortedSet<byte[]>[] byteArraySetArray81 = charArrayList72.toArray(byteArraySetArray80);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.sort((java.lang.Object[]) byteArraySetArray81, (-2060931702), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -2060931702");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(charArrayList73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertArrayEquals(objArray75, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(charArrayItor77);
        org.junit.Assert.assertNotNull(sortedSetArray79);
        org.junit.Assert.assertArrayEquals(sortedSetArray79, new java.util.SortedSet[] {});
        org.junit.Assert.assertNotNull(byteArraySetArray80);
        org.junit.Assert.assertArrayEquals(byteArraySetArray80, new java.util.SortedSet[] {});
        org.junit.Assert.assertNotNull(byteArraySetArray81);
        org.junit.Assert.assertArrayEquals(byteArraySetArray81, new java.util.SortedSet[] {});
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test305");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        java.lang.Object[] objArray71 = charArrayList57.toArray();
        java.lang.Object obj72 = charArrayList57.clone();
        java.util.ListIterator<char[]> charArrayItor73 = charArrayList57.listIterator();
        java.util.ListIterator<char[]> charArrayItor75 = java.util.Objects.requireNonNull(charArrayItor73, "[97.0, -1.0, 0.0, 1.0, 0.0, 1.0]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[[ , #, 4, #, a], [ , #, a]]");
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertNotNull(charArrayItor73);
        org.junit.Assert.assertNotNull(charArrayItor75);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test306");
        long[] longArray0 = new long[] {};
        java.util.Arrays.sort(longArray0, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray0);
        int int6 = java.util.Arrays.binarySearch(longArray0, (long) (short) 1);
        java.util.function.IntToLongFunction intToLongFunction7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSetAll(longArray0, intToLongFunction7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertArrayEquals(longArray0, new long[] {});
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test307");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        charArrayList57.trimToSize();
        int int73 = charArrayList57.indexOf((java.lang.Object) 1.0d);
        boolean[] booleanArray78 = new boolean[] { false, false, true, true };
        boolean[] booleanArray81 = new boolean[] { true, false };
        int int82 = java.util.Arrays.mismatch(booleanArray78, booleanArray81);
        boolean boolean83 = charArrayList57.equals((java.lang.Object) booleanArray81);
        java.util.Spliterator<char[]> charArraySpliterator84 = charArrayList57.spliterator();
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(booleanArray78);
        assertBooleanArrayEquals(booleanArray78, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray81);
        assertBooleanArrayEquals(booleanArray81, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(charArraySpliterator84);
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test308");
        int[] intArray6 = new int[] { (byte) -1, 1, 100, 6, 45, 3 };
        java.util.Arrays.sort(intArray6);
        int[] intArray14 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray14);
        java.util.stream.IntStream intStream16 = java.util.Arrays.stream(intArray14);
        boolean boolean17 = java.util.Arrays.equals(intArray6, intArray14);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertArrayEquals(intArray6, new int[] { (-1), 1, 3, 6, 45, 100 });
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertArrayEquals(intArray14, new int[] { 0, 1, 5, 10, 32, 97 });
        org.junit.Assert.assertNotNull(intStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test309");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        boolean boolean1 = charArrayList0.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray2 = charArrayList0.getLast();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test310");
        int[] intArray6 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray6);
        int[] intArray15 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray15);
        int[] intArray22 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray22);
        java.util.Arrays.sort(intArray22);
        int int25 = java.util.Arrays.compareUnsigned(intArray15, intArray22);
        java.util.Spliterator.OfInt ofInt26 = java.util.Arrays.spliterator(intArray22);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = java.util.Arrays.compare(intArray6, 31, 31, intArray22, 2, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 31");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertArrayEquals(intArray6, new int[] { 0, 1, 5, 10, 32, 97 });
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertArrayEquals(intArray15, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertArrayEquals(intArray22, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(ofInt26);
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test311");
        double[] doubleArray0 = new double[] {};
        java.util.stream.DoubleStream doubleStream1 = java.util.Arrays.stream(doubleArray0);
        double[] doubleArray7 = new double[] { (short) 0, 0.0d, (byte) -1 };
        java.util.stream.DoubleStream doubleStream8 = java.util.Arrays.stream(doubleArray7);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = java.util.Arrays.compare(doubleArray0, (int) ' ', 100, doubleArray7, 1, (-1947244222));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertArrayEquals(doubleArray0, new double[] {}, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 0.0d, 0.0d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleStream8);
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test312");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.sort(charArray3, 100, (-6));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(100) > toIndex(-6)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test313");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.lang.String[] strArray6 = new java.lang.String[] { "", "[hi!, [0.0, 10.0, 100.0], [0.0, 10.0, 100.0], hi!]", "", "" };
        int int7 = java.util.Arrays.compare(strArray1, strArray6);
        java.util.Arrays.sort((java.lang.Object[]) strArray1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.sort((java.lang.Object[]) strArray1, 31, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(31) > toIndex(-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertArrayEquals(strArray1, new java.lang.String[] { "" });
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertArrayEquals(strArray6, new java.lang.String[] { "", "[hi!, [0.0, 10.0, 100.0], [0.0, 10.0, 100.0], hi!]", "", "" });
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test314");
        java.lang.String[] strArray3 = new java.lang.String[] { "[false]", "[[ , #, 4, #, a], [ , #, a]]", "[0.0, 100.0, 100.0, 100.0, 0.0, -1.0]" };
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.lang.String[] strArray10 = new java.lang.String[] { "", "[hi!, [0.0, 10.0, 100.0], [0.0, 10.0, 100.0], hi!]", "", "" };
        int int11 = java.util.Arrays.compare(strArray5, strArray10);
        java.util.Arrays.parallelSort(strArray10);
        int int13 = java.util.Arrays.compare(strArray3, strArray10);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.lang.String[] strArray22 = new java.lang.String[] { "", "[hi!, [0.0, 10.0, 100.0], [0.0, 10.0, 100.0], hi!]", "", "" };
        int int23 = java.util.Arrays.compare(strArray17, strArray22);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = java.util.Arrays.compare(strArray10, 31, 0, strArray17, 31, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(31) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertArrayEquals(strArray3, new java.lang.String[] { "[false]", "[[ , #, 4, #, a], [ , #, a]]", "[0.0, 100.0, 100.0, 100.0, 0.0, -1.0]" });
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertArrayEquals(strArray5, new java.lang.String[] { "" });
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertArrayEquals(strArray10, new java.lang.String[] { "", "", "", "[hi!, [0.0, 10.0, 100.0], [0.0, 10.0, 100.0], hi!]" });
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7 + "'", int13 == 7);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertArrayEquals(strArray17, new java.lang.String[] { "" });
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertArrayEquals(strArray22, new java.lang.String[] { "", "[hi!, [0.0, 10.0, 100.0], [0.0, 10.0, 100.0], hi!]", "", "" });
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test315");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        boolean boolean1 = charArrayList0.isEmpty();
        java.lang.Object obj2 = null;
        boolean boolean3 = charArrayList0.equals(obj2);
        java.lang.Class<?> wildcardClass4 = charArrayList0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test316");
        long[] longArray0 = new long[] {};
        java.util.Arrays.sort(longArray0, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray0);
        java.util.Arrays.fill(longArray0, (-1L));
        java.util.Spliterator.OfLong ofLong7 = java.util.Arrays.spliterator(longArray0);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertArrayEquals(longArray0, new long[] {});
        org.junit.Assert.assertNotNull(ofLong7);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test317");
        float[] floatArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(floatArray0, 3, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"a\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test318");
        short[] shortArray6 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray9 = java.util.Arrays.copyOfRange(shortArray6, 0, (int) ' ');
        java.util.Arrays.parallelSort(shortArray9);
        java.util.Arrays.fill(shortArray9, (short) 0);
        short[] shortArray19 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray22 = java.util.Arrays.copyOfRange(shortArray19, 0, (int) ' ');
        java.util.Arrays.parallelSort(shortArray22);
        short[] shortArray30 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray33 = java.util.Arrays.copyOfRange(shortArray30, 0, (int) ' ');
        java.util.Arrays.parallelSort(shortArray33);
        java.util.Arrays.fill(shortArray33, (short) 0);
        java.util.Arrays.fill(shortArray33, (short) -1);
        int int39 = java.util.Arrays.mismatch(shortArray22, shortArray33);
        boolean boolean40 = java.util.Arrays.equals(shortArray9, shortArray22);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertArrayEquals(shortArray6, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertArrayEquals(shortArray19, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertArrayEquals(shortArray30, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test319");
        double[] doubleArray1 = new double[] { (-1.0d) };
        double[] doubleArray4 = java.util.Arrays.copyOfRange(doubleArray1, (int) (short) 0, (int) 'a');
        double[] doubleArray7 = java.util.Arrays.copyOfRange(doubleArray1, (int) (byte) 0, 7);
        double[] doubleArray12 = new double[] { 0, (-1.0f), '#', (byte) 100 };
        double[] doubleArray19 = new double[] { (byte) 100, (-1.0d), 100.0f, (byte) -1, (short) -1, 1 };
        int int20 = java.util.Arrays.compare(doubleArray12, doubleArray19);
        java.util.Spliterator.OfDouble ofDouble21 = java.util.Arrays.spliterator(doubleArray12);
        int int22 = java.util.Arrays.mismatch(doubleArray1, doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator.OfDouble ofDouble25 = java.util.Arrays.spliterator(doubleArray12, (int) (byte) 1, (-2));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: origin(1) > fence(-2)");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertArrayEquals(doubleArray1, new double[] { (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { (-1.0d), 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 0.0d, (-1.0d), 35.0d, 100.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 100.0d, (-1.0d), 100.0d, (-1.0d), (-1.0d), 1.0d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(ofDouble21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test320");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        charArrayList57.trimToSize();
        charArrayList57.clear();
        java.lang.Object[] objArray73 = charArrayList57.toArray();
        java.util.Collections.rotate((java.util.List<char[]>) charArrayList57, (int) (short) 100);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertArrayEquals(objArray73, new java.lang.Object[] {});
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test321");
        java.util.Map<byte[], java.util.NavigableMap<char[], java.util.Collection>> byteArrayMap0 = java.util.Collections.emptyMap();
        org.junit.Assert.assertNotNull(byteArrayMap0);
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test322");
        double[] doubleArray3 = new double[] { (short) 0, 0.0d, (byte) -1 };
        java.util.stream.DoubleStream doubleStream4 = java.util.Arrays.stream(doubleArray3);
        java.lang.String str5 = java.util.Arrays.toString(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertArrayEquals(doubleArray3, new double[] { 0.0d, 0.0d, (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0.0, 0.0, -1.0]" + "'", str5, "[0.0, 0.0, -1.0]");
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test323");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        char[] charArray4 = new char[] { ' ', '#', 'a' };
        char[] charArray10 = new char[] { ' ', '#', '4', '#', 'a' };
        int int11 = java.util.Arrays.compare(charArray4, charArray10);
        char[] charArray15 = new char[] { ' ', '#', 'a' };
        char[] charArray21 = new char[] { ' ', '#', '4', '#', 'a' };
        int int22 = java.util.Arrays.compare(charArray15, charArray21);
        char[] charArray26 = new char[] { ' ', '#', 'a' };
        char[] charArray32 = new char[] { ' ', '#', '4', '#', 'a' };
        int int33 = java.util.Arrays.compare(charArray26, charArray32);
        char[] charArray37 = new char[] { ' ', '#', 'a' };
        char[] charArray43 = new char[] { ' ', '#', '4', '#', 'a' };
        int int44 = java.util.Arrays.compare(charArray37, charArray43);
        java.util.List<char[]> charArrayList45 = java.util.List.of(charArray10, charArray15, charArray26, charArray43);
        java.util.Arrays.fill(charArray10, ' ');
        boolean boolean48 = charArrayList0.remove((java.lang.Object) ' ');
        boolean boolean49 = charArrayList0.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray50 = charArrayList0.getLast();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertArrayEquals(charArray4, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertArrayEquals(charArray10, new char[] { ' ', ' ', ' ', ' ', ' ' });
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 45 + "'", int11 == 45);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertArrayEquals(charArray15, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertArrayEquals(charArray21, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 45 + "'", int22 == 45);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertArrayEquals(charArray26, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertArrayEquals(charArray32, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 45 + "'", int33 == 45);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertArrayEquals(charArray37, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertArrayEquals(charArray43, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 45 + "'", int44 == 45);
        org.junit.Assert.assertNotNull(charArrayList45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test324");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream1 = java.util.Arrays.stream(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"array\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test325");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        charArrayList0.clear();
        java.lang.Object[] objArray3 = charArrayList0.toArray();
        boolean boolean5 = charArrayList0.equals((java.lang.Object) false);
        char[] charArray7 = new char[] { ' ' };
        charArrayList0.addLast(charArray7);
        char[] charArray9 = charArrayList0.removeLast();
        char[] charArray13 = new char[] { ' ', '#', 'a' };
        char[] charArray19 = new char[] { ' ', '#', '4', '#', 'a' };
        int int20 = java.util.Arrays.compare(charArray13, charArray19);
        char[] charArray24 = new char[] { ' ', '#', 'a' };
        char[] charArray30 = new char[] { ' ', '#', '4', '#', 'a' };
        int int31 = java.util.Arrays.compare(charArray24, charArray30);
        char[] charArray35 = new char[] { ' ', '#', 'a' };
        char[] charArray41 = new char[] { ' ', '#', '4', '#', 'a' };
        int int42 = java.util.Arrays.compare(charArray35, charArray41);
        char[] charArray46 = new char[] { ' ', '#', 'a' };
        char[] charArray52 = new char[] { ' ', '#', '4', '#', 'a' };
        int int53 = java.util.Arrays.compare(charArray46, charArray52);
        char[] charArray57 = new char[] { ' ', '#', 'a' };
        char[] charArray63 = new char[] { ' ', '#', '4', '#', 'a' };
        int int64 = java.util.Arrays.compare(charArray57, charArray63);
        java.util.List<char[]> charArrayList65 = java.util.List.of(charArray30, charArray35, charArray46, charArray63);
        char[][] charArray66 = new char[][] { charArray19, charArray35 };
        java.util.ArrayList<char[]> charArrayList67 = new java.util.ArrayList<char[]>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList67, charArray66);
        char[] charArray72 = new char[] { ' ', '#', 'a' };
        char[] charArray78 = new char[] { ' ', '#', '4', '#', 'a' };
        int int79 = java.util.Arrays.compare(charArray72, charArray78);
        boolean boolean80 = charArrayList67.contains((java.lang.Object) charArray72);
        charArrayList67.trimToSize();
        int int83 = charArrayList67.indexOf((java.lang.Object) 1.0d);
        char[] charArray88 = new char[] { ' ', '#', 'a' };
        char[] charArray94 = new char[] { ' ', '#', '4', '#', 'a' };
        int int95 = java.util.Arrays.compare(charArray88, charArray94);
        char[] charArray96 = charArrayList67.set(0, charArray94);
        java.util.Arrays.sort(charArray96);
        charArrayList0.addFirst(charArray96);
        java.util.Spliterator<char[]> charArraySpliterator99 = charArrayList0.spliterator();
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertArrayEquals(objArray3, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertArrayEquals(charArray7, new char[] { ' ' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ' });
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertArrayEquals(charArray13, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertArrayEquals(charArray19, new char[] { ' ', '#', '#', '4', 'a' });
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 45 + "'", int20 == 45);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertArrayEquals(charArray24, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertArrayEquals(charArray30, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 45 + "'", int31 == 45);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertArrayEquals(charArray35, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertArrayEquals(charArray41, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 45 + "'", int42 == 45);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertArrayEquals(charArray46, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertArrayEquals(charArray52, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 45 + "'", int53 == 45);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertArrayEquals(charArray57, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertArrayEquals(charArray63, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 45 + "'", int64 == 45);
        org.junit.Assert.assertNotNull(charArrayList65);
        org.junit.Assert.assertNotNull(charArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertArrayEquals(charArray72, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertArrayEquals(charArray78, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 45 + "'", int79 == 45);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(charArray88);
        org.junit.Assert.assertArrayEquals(charArray88, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray94);
        org.junit.Assert.assertArrayEquals(charArray94, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 45 + "'", int95 == 45);
        org.junit.Assert.assertNotNull(charArray96);
        org.junit.Assert.assertArrayEquals(charArray96, new char[] { ' ', '#', '#', '4', 'a' });
        org.junit.Assert.assertNotNull(charArraySpliterator99);
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test326");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        java.util.ListIterator<char[]> charArrayItor71 = charArrayList57.listIterator();
        char[] charArray72 = charArrayList57.getFirst();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray74 = charArrayList57.get((-2));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index -2 out of bounds for length 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(charArrayItor71);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertArrayEquals(charArray72, new char[] { ' ', '#', '4', '#', 'a' });
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test327");
        double[] doubleArray0 = new double[] {};
        java.util.stream.DoubleStream doubleStream1 = java.util.Arrays.stream(doubleArray0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.fill(doubleArray0, (-1947244222), 4, (double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -1947244222");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertArrayEquals(doubleArray0, new double[] {}, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleStream1);
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test328");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        java.util.SequencedCollection<char[]> charArrayCollection2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.SequencedCollection<char[]>> charArrayCollectionList3 = java.util.List.of((java.util.SequencedCollection<char[]>) charArrayList0, charArrayCollection2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArrayList1);
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test329");
        java.util.List<java.lang.String> strList5 = java.util.List.of("0", "[-2060931702, -1947244222, -1, 0, 45]", "[false]", "{}", "hi!");
        boolean boolean7 = java.util.Objects.equals((java.lang.Object) "hi!", (java.lang.Object) (short) 0);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test330");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        int int71 = charArrayList57.size();
        java.util.ArrayList<char[]> charArrayList72 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList73 = charArrayList72.reversed();
        charArrayList72.clear();
        java.lang.Object[] objArray75 = charArrayList72.toArray();
        int int76 = java.util.Collections.indexOfSubList((java.util.List<char[]>) charArrayList57, (java.util.List<char[]>) charArrayList72);
        java.util.Iterator<char[]> charArrayItor77 = charArrayList72.iterator();
        java.util.SortedSet[] sortedSetArray79 = new java.util.SortedSet[0];
        @SuppressWarnings("unchecked")
        java.util.SortedSet<byte[]>[] byteArraySetArray80 = (java.util.SortedSet<byte[]>[]) sortedSetArray79;
        java.util.SortedSet<byte[]>[] byteArraySetArray81 = charArrayList72.toArray(byteArraySetArray80);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<char[]> charArrayItor83 = charArrayList72.listIterator((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(charArrayList73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertArrayEquals(objArray75, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(charArrayItor77);
        org.junit.Assert.assertNotNull(sortedSetArray79);
        org.junit.Assert.assertArrayEquals(sortedSetArray79, new java.util.SortedSet[] {});
        org.junit.Assert.assertNotNull(byteArraySetArray80);
        org.junit.Assert.assertArrayEquals(byteArraySetArray80, new java.util.SortedSet[] {});
        org.junit.Assert.assertNotNull(byteArraySetArray81);
        org.junit.Assert.assertArrayEquals(byteArraySetArray81, new java.util.SortedSet[] {});
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test331");
        char[] charArray0 = null;
        char[] charArray4 = new char[] { ' ', '#', 'a' };
        char[] charArray10 = new char[] { ' ', '#', '4', '#', 'a' };
        int int11 = java.util.Arrays.compare(charArray4, charArray10);
        char[] charArray15 = new char[] { ' ', '#', 'a' };
        char[] charArray21 = new char[] { ' ', '#', '4', '#', 'a' };
        int int22 = java.util.Arrays.compare(charArray15, charArray21);
        char[] charArray26 = new char[] { ' ', '#', 'a' };
        char[] charArray32 = new char[] { ' ', '#', '4', '#', 'a' };
        int int33 = java.util.Arrays.compare(charArray26, charArray32);
        char[] charArray37 = new char[] { ' ', '#', 'a' };
        char[] charArray43 = new char[] { ' ', '#', '4', '#', 'a' };
        int int44 = java.util.Arrays.compare(charArray37, charArray43);
        char[] charArray48 = new char[] { ' ', '#', 'a' };
        char[] charArray54 = new char[] { ' ', '#', '4', '#', 'a' };
        int int55 = java.util.Arrays.compare(charArray48, charArray54);
        java.util.List<char[]> charArrayList56 = java.util.List.of(charArray21, charArray26, charArray37, charArray54);
        char[][] charArray57 = new char[][] { charArray10, charArray26 };
        java.util.ArrayList<char[]> charArrayList58 = new java.util.ArrayList<char[]>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList58, charArray57);
        char[] charArray63 = new char[] { ' ', '#', 'a' };
        char[] charArray69 = new char[] { ' ', '#', '4', '#', 'a' };
        int int70 = java.util.Arrays.compare(charArray63, charArray69);
        boolean boolean71 = charArrayList58.contains((java.lang.Object) charArray63);
        charArrayList58.trimToSize();
        int int74 = charArrayList58.indexOf((java.lang.Object) 1.0d);
        char[] charArray79 = new char[] { ' ', '#', 'a' };
        char[] charArray85 = new char[] { ' ', '#', '4', '#', 'a' };
        int int86 = java.util.Arrays.compare(charArray79, charArray85);
        char[] charArray87 = charArrayList58.set(0, charArray85);
        boolean boolean88 = java.util.Arrays.equals(charArray0, charArray85);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertArrayEquals(charArray4, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertArrayEquals(charArray10, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 45 + "'", int11 == 45);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertArrayEquals(charArray15, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertArrayEquals(charArray21, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 45 + "'", int22 == 45);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertArrayEquals(charArray26, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertArrayEquals(charArray32, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 45 + "'", int33 == 45);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertArrayEquals(charArray37, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertArrayEquals(charArray43, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 45 + "'", int44 == 45);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertArrayEquals(charArray48, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertArrayEquals(charArray54, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 45 + "'", int55 == 45);
        org.junit.Assert.assertNotNull(charArrayList56);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertArrayEquals(charArray63, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertArrayEquals(charArray69, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 45 + "'", int70 == 45);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertArrayEquals(charArray79, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertArrayEquals(charArray85, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 45 + "'", int86 == 45);
        org.junit.Assert.assertNotNull(charArray87);
        org.junit.Assert.assertArrayEquals(charArray87, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test332");
        double[] doubleArray5 = new double[] { 0, (-1.0f), '#', (byte) 100 };
        double[] doubleArray12 = new double[] { (byte) 100, (-1.0d), 100.0f, (byte) -1, (short) -1, 1 };
        int int13 = java.util.Arrays.compare(doubleArray5, doubleArray12);
        java.util.stream.DoubleStream doubleStream14 = java.util.Arrays.stream(doubleArray5);
        java.util.Spliterator.OfDouble ofDouble15 = java.util.Arrays.spliterator(doubleArray5);
        java.util.function.Supplier<java.lang.String> strSupplier16 = null;
        java.util.Spliterator.OfDouble ofDouble17 = java.util.Objects.requireNonNull(ofDouble15, strSupplier16);
        java.util.List<java.util.Spliterator.OfDouble> ofDoubleList18 = java.util.Collections.nCopies(100, ofDouble15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertArrayEquals(doubleArray5, new double[] { 0.0d, (-1.0d), 35.0d, 100.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 100.0d, (-1.0d), 100.0d, (-1.0d), (-1.0d), 1.0d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertNotNull(ofDouble15);
        org.junit.Assert.assertNotNull(ofDouble17);
        org.junit.Assert.assertNotNull(ofDoubleList18);
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test333");
        float[] floatArray3 = new float[] { 10, 1L, 100 };
        float[] floatArray5 = java.util.Arrays.copyOf(floatArray3, (int) (short) 1);
        float[] floatArray12 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int14 = java.util.Arrays.binarySearch(floatArray12, (float) (short) 1);
        java.util.Arrays.sort(floatArray12);
        int int16 = java.util.Arrays.mismatch(floatArray5, floatArray12);
        float[] floatArray23 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int25 = java.util.Arrays.binarySearch(floatArray23, (float) (short) 1);
        boolean boolean26 = java.util.Arrays.equals(floatArray12, floatArray23);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertArrayEquals(floatArray3, new float[] { 10.0f, 1.0f, 100.0f }, (float) 1.0E-15);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertArrayEquals(floatArray5, new float[] { 10.0f }, (float) 1.0E-15);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertArrayEquals(floatArray12, new float[] { (-1.0f), 0.0f, 0.0f, 1.0f, 1.0f, 97.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertArrayEquals(floatArray23, new float[] { 97.0f, (-1.0f), 0.0f, 1.0f, 0.0f, 1.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test334");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        boolean boolean1 = charArrayList0.isEmpty();
        java.lang.Object obj2 = null;
        boolean boolean3 = charArrayList0.contains(obj2);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test335");
        int int2 = java.util.Objects.checkIndex(4, 45);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test336");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        int int71 = charArrayList57.size();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray73 = charArrayList57.remove((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 10 out of bounds for length 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test337");
        double[] doubleArray4 = new double[] { 0, (-1.0f), '#', (byte) 100 };
        double[] doubleArray11 = new double[] { (byte) 100, (-1.0d), 100.0f, (byte) -1, (short) -1, 1 };
        int int12 = java.util.Arrays.compare(doubleArray4, doubleArray11);
        java.util.stream.DoubleStream doubleStream13 = java.util.Arrays.stream(doubleArray4);
        java.util.Spliterator.OfDouble ofDouble14 = java.util.Arrays.spliterator(doubleArray4);
        double[] doubleArray18 = new double[] { 1 };
        java.util.Arrays.fill(doubleArray18, (double) 6);
        java.util.Arrays.parallelSort(doubleArray18);
        int int23 = java.util.Arrays.binarySearch(doubleArray18, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = java.util.Arrays.mismatch(doubleArray4, (int) (short) 10, (int) (byte) 1, doubleArray18, (int) (short) 100, (-1947244222));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(10) > toIndex(1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 0.0d, (-1.0d), 35.0d, 100.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 100.0d, (-1.0d), 100.0d, (-1.0d), (-1.0d), 1.0d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertNotNull(ofDouble14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertArrayEquals(doubleArray18, new double[] { 6.0d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test338");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray7 = new byte[] {};
        int int8 = java.util.Arrays.compareUnsigned(byteArray6, byteArray7);
        byte[] byteArray9 = new byte[] {};
        int int10 = java.util.Arrays.mismatch(byteArray7, byteArray9);
        java.util.Arrays.fill(byteArray7, (byte) 0);
        java.util.Arrays.sort(byteArray7);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test339");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        java.lang.Object[] objArray71 = charArrayList57.toArray();
        java.lang.Object obj72 = charArrayList57.clone();
        java.lang.Object[] objArray73 = charArrayList57.toArray();
        java.lang.String str74 = java.util.Arrays.deepToString(objArray73);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[[ , #, 4, #, a], [ , #, a]]");
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[[ , #, 4, #, a], [ , #, a]]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[[ , #, 4, #, a], [ , #, a]]" + "'", str74, "[[ , #, 4, #, a], [ , #, a]]");
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test340");
        java.util.SortedSet<java.lang.reflect.Type> typeSet0 = java.util.Collections.emptySortedSet();
        org.junit.Assert.assertNotNull(typeSet0);
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test341");
        short[] shortArray6 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray9 = java.util.Arrays.copyOfRange(shortArray6, 0, (int) ' ');
        java.util.Arrays.parallelSort(shortArray9);
        short[] shortArray17 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray20 = java.util.Arrays.copyOfRange(shortArray17, 0, (int) ' ');
        java.util.Arrays.parallelSort(shortArray20);
        java.util.Arrays.fill(shortArray20, (short) 0);
        java.util.Arrays.fill(shortArray20, (short) -1);
        int int26 = java.util.Arrays.mismatch(shortArray9, shortArray20);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray29 = java.util.Arrays.copyOfRange(shortArray20, (-90), (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: arraycopy: source index -90 out of bounds for short[32]");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertArrayEquals(shortArray6, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertArrayEquals(shortArray17, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test342");
        float[] floatArray3 = new float[] { 10, 1L, 100 };
        float[] floatArray5 = java.util.Arrays.copyOf(floatArray3, (int) (short) 1);
        float[] floatArray12 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int14 = java.util.Arrays.binarySearch(floatArray12, (float) (short) 1);
        java.util.Arrays.sort(floatArray12);
        int int16 = java.util.Arrays.mismatch(floatArray5, floatArray12);
        java.lang.String str17 = java.util.Arrays.toString(floatArray12);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertArrayEquals(floatArray3, new float[] { 10.0f, 1.0f, 100.0f }, (float) 1.0E-15);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertArrayEquals(floatArray5, new float[] { 10.0f }, (float) 1.0E-15);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertArrayEquals(floatArray12, new float[] { (-1.0f), 0.0f, 0.0f, 1.0f, 1.0f, 97.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[-1.0, 0.0, 0.0, 1.0, 1.0, 97.0]" + "'", str17, "[-1.0, 0.0, 0.0, 1.0, 1.0, 97.0]");
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test343");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray7 = new byte[] {};
        int int8 = java.util.Arrays.compareUnsigned(byteArray6, byteArray7);
        byte[] byteArray9 = new byte[] {};
        int int10 = java.util.Arrays.mismatch(byteArray7, byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray18 = new byte[] {};
        int int19 = java.util.Arrays.compareUnsigned(byteArray17, byteArray18);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 };
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray33 = new byte[] {};
        int int34 = java.util.Arrays.compareUnsigned(byteArray32, byteArray33);
        byte[] byteArray35 = new byte[] {};
        int int36 = java.util.Arrays.mismatch(byteArray33, byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray44 = new byte[] {};
        int int45 = java.util.Arrays.compareUnsigned(byteArray43, byteArray44);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray53 = new byte[] {};
        int int54 = java.util.Arrays.compareUnsigned(byteArray52, byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray62 = new byte[] {};
        int int63 = java.util.Arrays.compareUnsigned(byteArray61, byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray71 = new byte[] {};
        int int72 = java.util.Arrays.compareUnsigned(byteArray70, byteArray71);
        byte[] byteArray73 = new byte[] {};
        int int74 = java.util.Arrays.mismatch(byteArray71, byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray82 = new byte[] {};
        int int83 = java.util.Arrays.compareUnsigned(byteArray81, byteArray82);
        byte[] byteArray84 = new byte[] {};
        int int85 = java.util.Arrays.mismatch(byteArray82, byteArray84);
        java.util.List<byte[]> byteArrayList86 = java.util.List.of(byteArray9, byteArray17, byteArray25, byteArray35, byteArray44, byteArray52, byteArray62, byteArray73, byteArray84);
        java.util.Arrays.fill(byteArray62, (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int92 = java.util.Arrays.binarySearch(byteArray62, 2, (-2), (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(2) > toIndex(-2)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] {});
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertArrayEquals(byteArray25, new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertArrayEquals(byteArray32, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertArrayEquals(byteArray33, new byte[] {});
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6 + "'", int34 == 6);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertArrayEquals(byteArray35, new byte[] {});
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertArrayEquals(byteArray43, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertArrayEquals(byteArray44, new byte[] {});
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 6 + "'", int45 == 6);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertArrayEquals(byteArray52, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertArrayEquals(byteArray53, new byte[] {});
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertArrayEquals(byteArray61, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertArrayEquals(byteArray62, new byte[] {});
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertArrayEquals(byteArray70, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertArrayEquals(byteArray71, new byte[] {});
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 6 + "'", int72 == 6);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertArrayEquals(byteArray73, new byte[] {});
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertArrayEquals(byteArray81, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertArrayEquals(byteArray82, new byte[] {});
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 6 + "'", int83 == 6);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertArrayEquals(byteArray84, new byte[] {});
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(byteArrayList86);
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test344");
        long[] longArray4 = new long[] { (short) 10, (byte) 0, 100L, '4' };
        long[] longArray5 = new long[] {};
        java.util.Arrays.sort(longArray5, 0, (int) (short) 0);
        int int9 = java.util.Arrays.compareUnsigned(longArray4, longArray5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(longArray4, (-1947244222), (-2060931702));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(-1947244222) > toIndex(-2060931702)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertArrayEquals(longArray4, new long[] { 10L, 0L, 100L, 52L });
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertArrayEquals(longArray5, new long[] {});
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test345");
        // The following exception was thrown during execution in test generation
        try {
            int int3 = java.util.Objects.checkFromIndexSize(100, 3, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [100, 100 + 3) out of bounds for length 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test346");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        java.util.Iterator<char[]> charArrayItor2 = charArrayList1.iterator();
        java.lang.Class<?> wildcardClass3 = charArrayItor2.getClass();
        java.lang.reflect.GenericDeclaration genericDeclaration4 = java.util.Objects.requireNonNull((java.lang.reflect.GenericDeclaration) wildcardClass3);
        java.lang.reflect.AnnotatedElement annotatedElement6 = java.util.Objects.requireNonNull((java.lang.reflect.AnnotatedElement) wildcardClass3, "");
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(charArrayItor2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(genericDeclaration4);
        org.junit.Assert.assertNotNull(annotatedElement6);
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test347");
        double[] doubleArray4 = new double[] { 0, (-1.0f), '#', (byte) 100 };
        double[] doubleArray11 = new double[] { (byte) 100, (-1.0d), 100.0f, (byte) -1, (short) -1, 1 };
        int int12 = java.util.Arrays.compare(doubleArray4, doubleArray11);
        java.util.stream.DoubleStream doubleStream13 = java.util.Arrays.stream(doubleArray4);
        java.util.Arrays.parallelSort(doubleArray4);
        double[] doubleArray21 = new double[] { 0, (-1.0f), '#', (byte) 100 };
        double[] doubleArray28 = new double[] { (byte) 100, (-1.0d), 100.0f, (byte) -1, (short) -1, 1 };
        int int29 = java.util.Arrays.compare(doubleArray21, doubleArray28);
        java.util.stream.DoubleStream doubleStream30 = java.util.Arrays.stream(doubleArray21);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = java.util.Arrays.mismatch(doubleArray4, (-3), 5, doubleArray21, 7, 31);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { (-1.0d), 0.0d, 35.0d, 100.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 100.0d, (-1.0d), 100.0d, (-1.0d), (-1.0d), 1.0d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertArrayEquals(doubleArray21, new double[] { 0.0d, (-1.0d), 35.0d, 100.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertArrayEquals(doubleArray28, new double[] { 100.0d, (-1.0d), 100.0d, (-1.0d), (-1.0d), 1.0d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(doubleStream30);
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test348");
        double[] doubleArray4 = new double[] { 0, (-1.0f), '#', (byte) 100 };
        double[] doubleArray11 = new double[] { (byte) 100, (-1.0d), 100.0f, (byte) -1, (short) -1, 1 };
        int int12 = java.util.Arrays.compare(doubleArray4, doubleArray11);
        java.util.function.IntToDoubleFunction intToDoubleFunction13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSetAll(doubleArray11, intToDoubleFunction13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { 0.0d, (-1.0d), 35.0d, 100.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 100.0d, (-1.0d), 100.0d, (-1.0d), (-1.0d), 1.0d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test349");
        long[] longArray0 = new long[] {};
        java.util.Arrays.sort(longArray0, 0, (int) (short) 0);
        long[] longArray4 = new long[] {};
        java.util.Arrays.sort(longArray4, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray4);
        int int9 = java.util.Arrays.compare(longArray0, longArray4);
        boolean[] booleanArray14 = new boolean[] { false, false, true, true };
        boolean[] booleanArray17 = new boolean[] { true, false };
        int int18 = java.util.Arrays.mismatch(booleanArray14, booleanArray17);
        boolean[] booleanArray25 = new boolean[] { true, false, true, true, false, true };
        boolean[] booleanArray31 = new boolean[] { false, false, false, false, true };
        boolean[] booleanArray34 = new boolean[] { false, true };
        boolean[] booleanArray39 = new boolean[] { false, false, true, true };
        boolean[] booleanArray42 = new boolean[] { true, false };
        int int43 = java.util.Arrays.mismatch(booleanArray39, booleanArray42);
        boolean[] booleanArray48 = new boolean[] { false, false, true, true };
        boolean[] booleanArray51 = new boolean[] { true, false };
        int int52 = java.util.Arrays.mismatch(booleanArray48, booleanArray51);
        boolean[] booleanArray57 = new boolean[] { false, false, true, true };
        boolean[] booleanArray60 = new boolean[] { true, false };
        int int61 = java.util.Arrays.mismatch(booleanArray57, booleanArray60);
        boolean[] booleanArray66 = new boolean[] { false, false, true, true };
        boolean[] booleanArray69 = new boolean[] { true, false };
        int int70 = java.util.Arrays.mismatch(booleanArray66, booleanArray69);
        java.util.List<boolean[]> booleanArrayList71 = java.util.List.of(booleanArray14, booleanArray25, booleanArray31, booleanArray34, booleanArray39, booleanArray48, booleanArray57, booleanArray66);
        java.util.Arrays.fill(booleanArray34, 1, 2, false);
        boolean boolean76 = java.util.Objects.deepEquals((java.lang.Object) longArray0, (java.lang.Object) booleanArray34);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertArrayEquals(longArray0, new long[] {});
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertArrayEquals(longArray4, new long[] {});
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(booleanArray14);
        assertBooleanArrayEquals(booleanArray14, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray17);
        assertBooleanArrayEquals(booleanArray17, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(booleanArray25);
        assertBooleanArrayEquals(booleanArray25, new boolean[] { true, false, true, true, false, true });
        org.junit.Assert.assertNotNull(booleanArray31);
        assertBooleanArrayEquals(booleanArray31, new boolean[] { false, false, false, false, true });
        org.junit.Assert.assertNotNull(booleanArray34);
        assertBooleanArrayEquals(booleanArray34, new boolean[] { false, false });
        org.junit.Assert.assertNotNull(booleanArray39);
        assertBooleanArrayEquals(booleanArray39, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray42);
        assertBooleanArrayEquals(booleanArray42, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(booleanArray48);
        assertBooleanArrayEquals(booleanArray48, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray51);
        assertBooleanArrayEquals(booleanArray51, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(booleanArray57);
        assertBooleanArrayEquals(booleanArray57, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray60);
        assertBooleanArrayEquals(booleanArray60, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(booleanArray66);
        assertBooleanArrayEquals(booleanArray66, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray69);
        assertBooleanArrayEquals(booleanArray69, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(booleanArrayList71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test350");
        long[] longArray4 = new long[] { (short) 10, (byte) 0, 100L, '4' };
        long[] longArray5 = new long[] {};
        java.util.Arrays.sort(longArray5, 0, (int) (short) 0);
        int int9 = java.util.Arrays.compareUnsigned(longArray4, longArray5);
        java.util.function.LongBinaryOperator longBinaryOperator10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelPrefix(longArray4, longBinaryOperator10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertArrayEquals(longArray4, new long[] { 10L, 0L, 100L, 52L });
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertArrayEquals(longArray5, new long[] {});
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test351");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        charArrayList0.clear();
        java.lang.Object[] objArray3 = charArrayList0.toArray();
        boolean boolean5 = charArrayList0.equals((java.lang.Object) false);
        char[] charArray7 = new char[] { ' ' };
        charArrayList0.addLast(charArray7);
        char[] charArray9 = charArrayList0.removeLast();
        java.util.ArrayList<char[]> charArrayList10 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList11 = charArrayList10.reversed();
        charArrayList10.clear();
        java.lang.Object[] objArray13 = charArrayList10.toArray();
        boolean boolean15 = charArrayList10.equals((java.lang.Object) false);
        char[] charArray17 = new char[] { ' ' };
        charArrayList10.addLast(charArray17);
        boolean boolean19 = java.util.Arrays.equals(charArray9, charArray17);
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertArrayEquals(objArray3, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertArrayEquals(charArray7, new char[] { ' ' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ' });
        org.junit.Assert.assertNotNull(charArrayList11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertArrayEquals(objArray13, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertArrayEquals(charArray17, new char[] { ' ' });
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test352");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        int int2 = charArrayList0.size();
        java.lang.Object obj3 = charArrayList0.clone();
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "[]");
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test353");
        java.util.NavigableMap<java.util.Spliterator.OfDouble, java.lang.Comparable<java.lang.String>> ofDoubleMap0 = java.util.Collections.emptyNavigableMap();
        org.junit.Assert.assertNotNull(ofDoubleMap0);
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test354");
        java.util.Iterator<java.util.SequencedCollection<char[]>> charArrayCollectionItor0 = java.util.Collections.emptyIterator();
        org.junit.Assert.assertNotNull(charArrayCollectionItor0);
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test355");
        double[] doubleArray3 = new double[] { 0, 0, 6 };
        java.util.function.DoubleBinaryOperator doubleBinaryOperator4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelPrefix(doubleArray3, doubleBinaryOperator4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertArrayEquals(doubleArray3, new double[] { 0.0d, 0.0d, 6.0d }, 1.0E-15);
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test356");
        double[] doubleArray1 = new double[] { 1 };
        java.util.Arrays.fill(doubleArray1, (double) 6);
        java.util.Arrays.parallelSort(doubleArray1);
        java.util.stream.DoubleStream doubleStream7 = java.util.Arrays.stream(doubleArray1, 0, 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertArrayEquals(doubleArray1, new double[] { 6.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleStream7);
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test357");
        double[] doubleArray1 = new double[] { (-1.0d) };
        double[] doubleArray4 = java.util.Arrays.copyOfRange(doubleArray1, (int) (short) 0, (int) 'a');
        double[] doubleArray7 = java.util.Arrays.copyOfRange(doubleArray1, (int) (byte) 0, 7);
        double[] doubleArray12 = new double[] { 0, (-1.0f), '#', (byte) 100 };
        double[] doubleArray19 = new double[] { (byte) 100, (-1.0d), 100.0f, (byte) -1, (short) -1, 1 };
        int int20 = java.util.Arrays.compare(doubleArray12, doubleArray19);
        java.util.Spliterator.OfDouble ofDouble21 = java.util.Arrays.spliterator(doubleArray12);
        int int22 = java.util.Arrays.mismatch(doubleArray1, doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray24 = java.util.Arrays.copyOf(doubleArray1, (-2060931702));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -2060931702");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertArrayEquals(doubleArray1, new double[] { (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { (-1.0d), 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertArrayEquals(doubleArray12, new double[] { 0.0d, (-1.0d), 35.0d, 100.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertArrayEquals(doubleArray19, new double[] { 100.0d, (-1.0d), 100.0d, (-1.0d), (-1.0d), 1.0d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(ofDouble21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test358");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        java.util.List<char[]> charArrayList44 = java.util.List.of(charArray9, charArray14, charArray25, charArray42);
        char[] charArray46 = java.util.Arrays.copyOf(charArray42, 45);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.fill(charArray42, 100, (int) (short) 100, ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArrayList44);
        org.junit.Assert.assertNotNull(charArray46);
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test359");
        java.util.Set set0 = java.util.Collections.EMPTY_SET;
        boolean boolean1 = java.util.Objects.nonNull((java.lang.Object) set0);
        org.junit.Assert.assertNotNull(set0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test360");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        java.util.List<char[]> charArrayList44 = java.util.List.of(charArray9, charArray14, charArray25, charArray42);
        java.util.Arrays.fill(charArray9, ' ');
        // The following exception was thrown during execution in test generation
        try {
            int int50 = java.util.Arrays.binarySearch(charArray9, (int) '#', (int) (short) -1, ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(35) > toIndex(-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', ' ', ' ', ' ', ' ' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArrayList44);
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test361");
        int[] intArray5 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray5);
        java.util.Arrays.sort(intArray5);
        int[] intArray15 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray15);
        java.util.Arrays.sort(intArray15);
        java.util.Arrays.sort(intArray15);
        int[] intArray24 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray24);
        java.util.Arrays.sort(intArray24);
        java.util.Arrays.sort(intArray24);
        int int28 = java.util.Arrays.compareUnsigned(intArray15, intArray24);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean31 = java.util.Arrays.equals(intArray5, (int) (short) 0, (-2), intArray24, 3, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(0) > toIndex(-2)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertArrayEquals(intArray15, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertArrayEquals(intArray24, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test362");
        java.lang.Integer[] intArray16 = new java.lang.Integer[] { 3, 6, 2, 3, 4, (-2060932013), 0, 3, (-50), (-2), (-6), 3, (-2060932013), (-3), 7, 0 };
        java.util.ArrayList<java.lang.Integer> intList17 = new java.util.ArrayList<java.lang.Integer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) intList17, intArray16);
        java.util.List list19 = java.util.Collections.EMPTY_LIST;
        java.util.List list20 = java.util.Collections.EMPTY_LIST;
        java.util.List[] listArray22 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.Integer>[] intListArray23 = (java.util.List<java.lang.Integer>[]) listArray22;
        intListArray23[0] = list19;
        intListArray23[1] = list20;
        java.util.List<java.lang.Integer> intList28 = suma.listas.digitos.SumaListasDigitos.sumaVariasListasDeDigitos(intListArray23);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Integer> intList29 = suma.listas.digitos.SumaListasDigitos.sumaDosListasDeDigitos((java.util.List<java.lang.Integer>) intList17, intList28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: So?lo se permiten di?gitos entre 0 y 9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertArrayEquals(intArray16, new java.lang.Integer[] { 3, 6, 2, 3, 4, (-2060932013), 0, 3, (-50), (-2), (-6), 3, (-2060932013), (-3), 7, 0 });
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(list19);
        org.junit.Assert.assertNotNull(list20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(intListArray23);
        org.junit.Assert.assertNotNull(intList28);
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test363");
        float[] floatArray0 = null;
        float[] floatArray6 = new float[] { 10, 1L, 100 };
        float[] floatArray8 = java.util.Arrays.copyOf(floatArray6, (int) (short) 1);
        float[] floatArray15 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int17 = java.util.Arrays.binarySearch(floatArray15, (float) (short) 1);
        java.util.Arrays.sort(floatArray15);
        int int19 = java.util.Arrays.mismatch(floatArray8, floatArray15);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = java.util.Arrays.mismatch(floatArray0, (-2), (-33), floatArray8, (int) (byte) 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"a\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertArrayEquals(floatArray6, new float[] { 10.0f, 1.0f, 100.0f }, (float) 1.0E-15);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertArrayEquals(floatArray8, new float[] { 10.0f }, (float) 1.0E-15);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertArrayEquals(floatArray15, new float[] { (-1.0f), 0.0f, 0.0f, 1.0f, 1.0f, 97.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test364");
        java.lang.String str1 = java.util.Objects.requireNonNull("[0.0, 0.0, -1.0]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[0.0, 0.0, -1.0]" + "'", str1, "[0.0, 0.0, -1.0]");
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test365");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        charArrayList0.clear();
        java.lang.Object[] objArray3 = charArrayList0.toArray();
        boolean boolean5 = charArrayList0.equals((java.lang.Object) false);
        char[] charArray9 = new char[] { ' ', '#', 'a' };
        char[] charArray15 = new char[] { ' ', '#', '4', '#', 'a' };
        int int16 = java.util.Arrays.compare(charArray9, charArray15);
        charArrayList0.addFirst(charArray9);
        char[] charArray18 = charArrayList0.removeLast();
        short[] shortArray19 = new short[] {};
        java.util.Arrays.sort(shortArray19);
        int int21 = charArrayList0.indexOf((java.lang.Object) shortArray19);
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertArrayEquals(objArray3, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertArrayEquals(charArray15, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 45 + "'", int16 == 45);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertArrayEquals(charArray18, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertArrayEquals(shortArray19, new short[] {});
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test366");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        java.lang.Object[] objArray71 = charArrayList57.toArray();
        java.lang.Object obj72 = charArrayList57.clone();
        java.util.ListIterator<char[]> charArrayItor73 = charArrayList57.listIterator();
        charArrayList57.trimToSize();
        int[] intArray81 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray81);
        java.util.stream.IntStream intStream83 = java.util.Arrays.stream(intArray81);
        int int84 = charArrayList57.indexOf((java.lang.Object) intStream83);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[[ , #, 4, #, a], [ , #, a]]");
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertNotNull(charArrayItor73);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertArrayEquals(intArray81, new int[] { 0, 1, 5, 10, 32, 97 });
        org.junit.Assert.assertNotNull(intStream83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test367");
        int[] intArray5 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray5);
        java.util.Arrays.sort(intArray5);
        java.util.Arrays.sort(intArray5);
        java.util.Spliterator.OfInt ofInt9 = java.util.Arrays.spliterator(intArray5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.fill(intArray5, (-1947244222), (-6), (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -1947244222");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertNotNull(ofInt9);
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test368");
        double[] doubleArray1 = new double[] { (-1.0d) };
        double[] doubleArray4 = java.util.Arrays.copyOfRange(doubleArray1, (int) (short) 0, (int) 'a');
        double[] doubleArray7 = java.util.Arrays.copyOfRange(doubleArray1, (int) (byte) 0, 7);
        double[] doubleArray9 = new double[] { 1 };
        java.util.Arrays.fill(doubleArray9, (double) 6);
        double[] doubleArray13 = java.util.Arrays.copyOf(doubleArray9, 100);
        int int14 = java.util.Arrays.compare(doubleArray7, doubleArray9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.fill(doubleArray7, (-1947244222), (int) (byte) 10, (double) 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -1947244222");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertArrayEquals(doubleArray1, new double[] { (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { (-1.0d), 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { 6.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test369");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        charArrayList0.clear();
        java.lang.Object[] objArray3 = charArrayList0.toArray();
        boolean boolean5 = charArrayList0.equals((java.lang.Object) false);
        char[] charArray7 = new char[] { ' ' };
        charArrayList0.addLast(charArray7);
        char[] charArray12 = new char[] { ' ', '#', 'a' };
        char[] charArray18 = new char[] { ' ', '#', '4', '#', 'a' };
        int int19 = java.util.Arrays.compare(charArray12, charArray18);
        char[] charArray23 = new char[] { ' ', '#', 'a' };
        char[] charArray29 = new char[] { ' ', '#', '4', '#', 'a' };
        int int30 = java.util.Arrays.compare(charArray23, charArray29);
        char[] charArray34 = new char[] { ' ', '#', 'a' };
        char[] charArray40 = new char[] { ' ', '#', '4', '#', 'a' };
        int int41 = java.util.Arrays.compare(charArray34, charArray40);
        char[] charArray45 = new char[] { ' ', '#', 'a' };
        char[] charArray51 = new char[] { ' ', '#', '4', '#', 'a' };
        int int52 = java.util.Arrays.compare(charArray45, charArray51);
        char[] charArray56 = new char[] { ' ', '#', 'a' };
        char[] charArray62 = new char[] { ' ', '#', '4', '#', 'a' };
        int int63 = java.util.Arrays.compare(charArray56, charArray62);
        java.util.List<char[]> charArrayList64 = java.util.List.of(charArray29, charArray34, charArray45, charArray62);
        char[][] charArray65 = new char[][] { charArray18, charArray34 };
        java.util.ArrayList<char[]> charArrayList66 = new java.util.ArrayList<char[]>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList66, charArray65);
        char[] charArray71 = new char[] { ' ', '#', 'a' };
        char[] charArray77 = new char[] { ' ', '#', '4', '#', 'a' };
        int int78 = java.util.Arrays.compare(charArray71, charArray77);
        boolean boolean79 = charArrayList66.contains((java.lang.Object) charArray71);
        charArrayList66.clear();
        java.util.Collections.copy((java.util.List<char[]>) charArrayList0, (java.util.List<char[]>) charArrayList66);
        double[] doubleArray86 = new double[] { 0, (-1.0f), '#', (byte) 100 };
        double[] doubleArray93 = new double[] { (byte) 100, (-1.0d), 100.0f, (byte) -1, (short) -1, 1 };
        int int94 = java.util.Arrays.compare(doubleArray86, doubleArray93);
        java.util.stream.DoubleStream doubleStream95 = java.util.Arrays.stream(doubleArray86);
        int int96 = charArrayList0.lastIndexOf((java.lang.Object) doubleStream95);
        java.util.List<char[]> charArrayList97 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections.copy((java.util.List<char[]>) charArrayList0, charArrayList97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.List.size()\" because \"src\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertArrayEquals(objArray3, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertArrayEquals(charArray7, new char[] { ' ' });
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertArrayEquals(charArray12, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertArrayEquals(charArray18, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 45 + "'", int19 == 45);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertArrayEquals(charArray23, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertArrayEquals(charArray29, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 45 + "'", int30 == 45);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertArrayEquals(charArray34, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertArrayEquals(charArray40, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 45 + "'", int41 == 45);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertArrayEquals(charArray45, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertArrayEquals(charArray51, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 45 + "'", int52 == 45);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertArrayEquals(charArray56, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 45 + "'", int63 == 45);
        org.junit.Assert.assertNotNull(charArrayList64);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertArrayEquals(charArray71, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertArrayEquals(charArray77, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 45 + "'", int78 == 45);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertArrayEquals(doubleArray86, new double[] { 0.0d, (-1.0d), 35.0d, 100.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertArrayEquals(doubleArray93, new double[] { 100.0d, (-1.0d), 100.0d, (-1.0d), (-1.0d), 1.0d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(doubleStream95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test370");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray7 = new byte[] {};
        int int8 = java.util.Arrays.compareUnsigned(byteArray6, byteArray7);
        byte[] byteArray9 = new byte[] {};
        int int10 = java.util.Arrays.mismatch(byteArray7, byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray18 = new byte[] {};
        int int19 = java.util.Arrays.compareUnsigned(byteArray17, byteArray18);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 };
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray33 = new byte[] {};
        int int34 = java.util.Arrays.compareUnsigned(byteArray32, byteArray33);
        byte[] byteArray35 = new byte[] {};
        int int36 = java.util.Arrays.mismatch(byteArray33, byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray44 = new byte[] {};
        int int45 = java.util.Arrays.compareUnsigned(byteArray43, byteArray44);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray53 = new byte[] {};
        int int54 = java.util.Arrays.compareUnsigned(byteArray52, byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray62 = new byte[] {};
        int int63 = java.util.Arrays.compareUnsigned(byteArray61, byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray71 = new byte[] {};
        int int72 = java.util.Arrays.compareUnsigned(byteArray70, byteArray71);
        byte[] byteArray73 = new byte[] {};
        int int74 = java.util.Arrays.mismatch(byteArray71, byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray82 = new byte[] {};
        int int83 = java.util.Arrays.compareUnsigned(byteArray81, byteArray82);
        byte[] byteArray84 = new byte[] {};
        int int85 = java.util.Arrays.mismatch(byteArray82, byteArray84);
        java.util.List<byte[]> byteArrayList86 = java.util.List.of(byteArray9, byteArray17, byteArray25, byteArray35, byteArray44, byteArray52, byteArray62, byteArray73, byteArray84);
        java.util.Arrays.parallelSort(byteArray84);
        java.util.Arrays.parallelSort(byteArray84);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] {});
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertArrayEquals(byteArray25, new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertArrayEquals(byteArray32, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertArrayEquals(byteArray33, new byte[] {});
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6 + "'", int34 == 6);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertArrayEquals(byteArray35, new byte[] {});
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertArrayEquals(byteArray43, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertArrayEquals(byteArray44, new byte[] {});
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 6 + "'", int45 == 6);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertArrayEquals(byteArray52, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertArrayEquals(byteArray53, new byte[] {});
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertArrayEquals(byteArray61, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertArrayEquals(byteArray62, new byte[] {});
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertArrayEquals(byteArray70, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertArrayEquals(byteArray71, new byte[] {});
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 6 + "'", int72 == 6);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertArrayEquals(byteArray73, new byte[] {});
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertArrayEquals(byteArray81, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertArrayEquals(byteArray82, new byte[] {});
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 6 + "'", int83 == 6);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertArrayEquals(byteArray84, new byte[] {});
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(byteArrayList86);
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test371");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        java.util.List<java.util.SequencedCollection<char[]>> charArrayCollectionList71 = java.util.List.of((java.util.SequencedCollection<char[]>) charArrayList57);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(charArrayCollectionList71);
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test372");
        java.lang.String[] strArray3 = new java.lang.String[] { "[false]", "[[ , #, 4, #, a], [ , #, a]]", "[0.0, 100.0, 100.0, 100.0, 0.0, -1.0]" };
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.lang.String[] strArray10 = new java.lang.String[] { "", "[hi!, [0.0, 10.0, 100.0], [0.0, 10.0, 100.0], hi!]", "", "" };
        int int11 = java.util.Arrays.compare(strArray5, strArray10);
        java.util.Arrays.parallelSort(strArray10);
        int int13 = java.util.Arrays.compare(strArray3, strArray10);
        java.util.Spliterator<java.lang.Comparable<java.lang.String>> strComparableSpliterator14 = java.util.Arrays.spliterator((java.lang.Comparable<java.lang.String>[]) strArray3);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertArrayEquals(strArray3, new java.lang.String[] { "[false]", "[[ , #, 4, #, a], [ , #, a]]", "[0.0, 100.0, 100.0, 100.0, 0.0, -1.0]" });
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertArrayEquals(strArray5, new java.lang.String[] { "" });
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertArrayEquals(strArray10, new java.lang.String[] { "", "", "", "[hi!, [0.0, 10.0, 100.0], [0.0, 10.0, 100.0], hi!]" });
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7 + "'", int13 == 7);
        org.junit.Assert.assertNotNull(strComparableSpliterator14);
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test373");
        java.util.Enumeration<java.util.SortedSet<byte[]>> byteArraySetEnumeration0 = java.util.Collections.emptyEnumeration();
        java.util.function.Supplier<java.lang.String> strSupplier1 = null;
        java.util.Enumeration<java.util.SortedSet<byte[]>> byteArraySetEnumeration2 = java.util.Objects.requireNonNull(byteArraySetEnumeration0, strSupplier1);
        java.util.Enumeration<java.util.SortedSet<byte[]>> byteArraySetEnumeration3 = java.util.Collections.emptyEnumeration();
        java.util.function.Supplier<java.lang.String> strSupplier4 = null;
        java.util.Enumeration<java.util.SortedSet<byte[]>> byteArraySetEnumeration5 = java.util.Objects.requireNonNull(byteArraySetEnumeration3, strSupplier4);
        java.util.Enumeration<java.util.SortedSet<byte[]>> byteArraySetEnumeration6 = java.util.Objects.requireNonNullElse(byteArraySetEnumeration0, byteArraySetEnumeration5);
        org.junit.Assert.assertNotNull(byteArraySetEnumeration0);
        org.junit.Assert.assertNotNull(byteArraySetEnumeration2);
        org.junit.Assert.assertNotNull(byteArraySetEnumeration3);
        org.junit.Assert.assertNotNull(byteArraySetEnumeration5);
        org.junit.Assert.assertNotNull(byteArraySetEnumeration6);
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test374");
        java.util.Comparator<suma.listas.digitos.SumaListasDigitos> sumaListasDigitosComparator0 = java.util.Collections.reverseOrder();
        org.junit.Assert.assertNotNull(sumaListasDigitosComparator0);
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test375");
        int[] intArray5 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray5);
        java.util.Arrays.sort(intArray5);
        java.util.Arrays.sort(intArray5);
        int[] intArray14 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray14);
        java.util.Arrays.sort(intArray14);
        java.util.Arrays.sort(intArray14);
        int int18 = java.util.Arrays.compareUnsigned(intArray5, intArray14);
        java.util.Spliterator.OfInt ofInt19 = java.util.Arrays.spliterator(intArray5);
        java.util.function.IntBinaryOperator intBinaryOperator22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelPrefix(intArray5, (int) (byte) 1, (int) (byte) 100, intBinaryOperator22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertArrayEquals(intArray14, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(ofInt19);
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test376");
        char[] charArray0 = null;
        char[] charArray6 = new char[] { ' ', '#', 'a' };
        char[] charArray12 = new char[] { ' ', '#', '4', '#', 'a' };
        int int13 = java.util.Arrays.compare(charArray6, charArray12);
        char[] charArray17 = new char[] { ' ', '#', 'a' };
        char[] charArray23 = new char[] { ' ', '#', '4', '#', 'a' };
        int int24 = java.util.Arrays.compare(charArray17, charArray23);
        char[] charArray28 = new char[] { ' ', '#', 'a' };
        char[] charArray34 = new char[] { ' ', '#', '4', '#', 'a' };
        int int35 = java.util.Arrays.compare(charArray28, charArray34);
        char[] charArray39 = new char[] { ' ', '#', 'a' };
        char[] charArray45 = new char[] { ' ', '#', '4', '#', 'a' };
        int int46 = java.util.Arrays.compare(charArray39, charArray45);
        java.util.List<char[]> charArrayList47 = java.util.List.of(charArray12, charArray17, charArray28, charArray45);
        char[] charArray49 = java.util.Arrays.copyOf(charArray45, 45);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = java.util.Arrays.equals(charArray0, 3, (int) (short) 1, charArray45, (-2060932013), (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"a\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertArrayEquals(charArray6, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertArrayEquals(charArray12, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 45 + "'", int13 == 45);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertArrayEquals(charArray17, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertArrayEquals(charArray23, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 45 + "'", int24 == 45);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertArrayEquals(charArray28, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertArrayEquals(charArray34, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 45 + "'", int35 == 45);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertArrayEquals(charArray39, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertArrayEquals(charArray45, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 45 + "'", int46 == 45);
        org.junit.Assert.assertNotNull(charArrayList47);
        org.junit.Assert.assertNotNull(charArray49);
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test377");
        java.util.ListIterator<java.lang.reflect.Type[]> typeArrayItor0 = java.util.Collections.emptyListIterator();
        org.junit.Assert.assertNotNull(typeArrayItor0);
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test378");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        charArrayList0.clear();
        java.lang.Object[] objArray3 = charArrayList0.toArray();
        boolean boolean5 = charArrayList0.equals((java.lang.Object) false);
        char[] charArray7 = new char[] { ' ' };
        charArrayList0.addLast(charArray7);
        char[] charArray12 = new char[] { ' ', '#', 'a' };
        char[] charArray18 = new char[] { ' ', '#', '4', '#', 'a' };
        int int19 = java.util.Arrays.compare(charArray12, charArray18);
        char[] charArray23 = new char[] { ' ', '#', 'a' };
        char[] charArray29 = new char[] { ' ', '#', '4', '#', 'a' };
        int int30 = java.util.Arrays.compare(charArray23, charArray29);
        char[] charArray34 = new char[] { ' ', '#', 'a' };
        char[] charArray40 = new char[] { ' ', '#', '4', '#', 'a' };
        int int41 = java.util.Arrays.compare(charArray34, charArray40);
        char[] charArray45 = new char[] { ' ', '#', 'a' };
        char[] charArray51 = new char[] { ' ', '#', '4', '#', 'a' };
        int int52 = java.util.Arrays.compare(charArray45, charArray51);
        char[] charArray56 = new char[] { ' ', '#', 'a' };
        char[] charArray62 = new char[] { ' ', '#', '4', '#', 'a' };
        int int63 = java.util.Arrays.compare(charArray56, charArray62);
        java.util.List<char[]> charArrayList64 = java.util.List.of(charArray29, charArray34, charArray45, charArray62);
        char[][] charArray65 = new char[][] { charArray18, charArray34 };
        java.util.ArrayList<char[]> charArrayList66 = new java.util.ArrayList<char[]>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList66, charArray65);
        char[] charArray71 = new char[] { ' ', '#', 'a' };
        char[] charArray77 = new char[] { ' ', '#', '4', '#', 'a' };
        int int78 = java.util.Arrays.compare(charArray71, charArray77);
        boolean boolean79 = charArrayList66.contains((java.lang.Object) charArray71);
        charArrayList66.clear();
        java.util.Collections.copy((java.util.List<char[]>) charArrayList0, (java.util.List<char[]>) charArrayList66);
        java.util.List<char[]> charArrayList82 = charArrayList0.reversed();
        boolean boolean83 = charArrayList0.isEmpty();
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertArrayEquals(objArray3, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertArrayEquals(charArray7, new char[] { ' ' });
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertArrayEquals(charArray12, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertArrayEquals(charArray18, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 45 + "'", int19 == 45);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertArrayEquals(charArray23, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertArrayEquals(charArray29, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 45 + "'", int30 == 45);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertArrayEquals(charArray34, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertArrayEquals(charArray40, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 45 + "'", int41 == 45);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertArrayEquals(charArray45, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertArrayEquals(charArray51, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 45 + "'", int52 == 45);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertArrayEquals(charArray56, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 45 + "'", int63 == 45);
        org.junit.Assert.assertNotNull(charArrayList64);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertArrayEquals(charArray71, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertArrayEquals(charArray77, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 45 + "'", int78 == 45);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(charArrayList82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test379");
        java.lang.Object[] objArray0 = null;
        byte[] byteArray9 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray10 = new byte[] {};
        int int11 = java.util.Arrays.compareUnsigned(byteArray9, byteArray10);
        byte[] byteArray12 = new byte[] {};
        int int13 = java.util.Arrays.mismatch(byteArray10, byteArray12);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray21 = new byte[] {};
        int int22 = java.util.Arrays.compareUnsigned(byteArray20, byteArray21);
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 };
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray36 = new byte[] {};
        int int37 = java.util.Arrays.compareUnsigned(byteArray35, byteArray36);
        byte[] byteArray38 = new byte[] {};
        int int39 = java.util.Arrays.mismatch(byteArray36, byteArray38);
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray47 = new byte[] {};
        int int48 = java.util.Arrays.compareUnsigned(byteArray46, byteArray47);
        byte[] byteArray55 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray56 = new byte[] {};
        int int57 = java.util.Arrays.compareUnsigned(byteArray55, byteArray56);
        byte[] byteArray64 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray65 = new byte[] {};
        int int66 = java.util.Arrays.compareUnsigned(byteArray64, byteArray65);
        byte[] byteArray73 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray74 = new byte[] {};
        int int75 = java.util.Arrays.compareUnsigned(byteArray73, byteArray74);
        byte[] byteArray76 = new byte[] {};
        int int77 = java.util.Arrays.mismatch(byteArray74, byteArray76);
        byte[] byteArray84 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray85 = new byte[] {};
        int int86 = java.util.Arrays.compareUnsigned(byteArray84, byteArray85);
        byte[] byteArray87 = new byte[] {};
        int int88 = java.util.Arrays.mismatch(byteArray85, byteArray87);
        java.util.List<byte[]> byteArrayList89 = java.util.List.of(byteArray12, byteArray20, byteArray28, byteArray38, byteArray47, byteArray55, byteArray65, byteArray76, byteArray87);
        java.util.Arrays.parallelSort(byteArray76);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.fill(objArray0, 9, (-33), (java.lang.Object) byteArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot read the array length because \"a\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertArrayEquals(byteArray10, new byte[] {});
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertArrayEquals(byteArray12, new byte[] {});
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertArrayEquals(byteArray20, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertArrayEquals(byteArray21, new byte[] {});
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertArrayEquals(byteArray28, new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertArrayEquals(byteArray35, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertArrayEquals(byteArray36, new byte[] {});
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertArrayEquals(byteArray38, new byte[] {});
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertArrayEquals(byteArray46, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertArrayEquals(byteArray47, new byte[] {});
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertArrayEquals(byteArray55, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertArrayEquals(byteArray56, new byte[] {});
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertArrayEquals(byteArray64, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertArrayEquals(byteArray65, new byte[] {});
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 6 + "'", int66 == 6);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertArrayEquals(byteArray73, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertArrayEquals(byteArray74, new byte[] {});
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 6 + "'", int75 == 6);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertArrayEquals(byteArray76, new byte[] {});
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertArrayEquals(byteArray84, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertArrayEquals(byteArray85, new byte[] {});
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 6 + "'", int86 == 6);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertArrayEquals(byteArray87, new byte[] {});
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(byteArrayList89);
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test380");
        short[] shortArray6 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray9 = java.util.Arrays.copyOfRange(shortArray6, 0, (int) ' ');
        short[] shortArray11 = new short[] { (byte) 100 };
        int int12 = java.util.Arrays.compare(shortArray9, shortArray11);
        short[] shortArray19 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray22 = java.util.Arrays.copyOfRange(shortArray19, 0, (int) ' ');
        java.util.Arrays.parallelSort(shortArray22);
        short[] shortArray30 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray33 = java.util.Arrays.copyOfRange(shortArray30, 0, (int) ' ');
        java.util.Arrays.parallelSort(shortArray33);
        java.util.Arrays.fill(shortArray33, (short) 0);
        java.util.Arrays.fill(shortArray33, (short) -1);
        int int39 = java.util.Arrays.mismatch(shortArray22, shortArray33);
        boolean boolean40 = java.util.Arrays.equals(shortArray9, shortArray33);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertArrayEquals(shortArray6, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertArrayEquals(shortArray11, new short[] { (short) 100 });
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-90) + "'", int12 == (-90));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertArrayEquals(shortArray19, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertArrayEquals(shortArray30, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test381");
        double[] doubleArray1 = new double[] { (-1.0d) };
        double[] doubleArray4 = java.util.Arrays.copyOfRange(doubleArray1, (int) (short) 0, (int) 'a');
        java.util.Arrays.parallelSort(doubleArray4);
        java.util.Spliterator.OfDouble ofDouble6 = java.util.Arrays.spliterator(doubleArray4);
        java.util.function.DoubleBinaryOperator doubleBinaryOperator9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelPrefix(doubleArray4, 3, 0, doubleBinaryOperator9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertArrayEquals(doubleArray1, new double[] { (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(ofDouble6);
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test382");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        charArrayList57.clear();
        java.lang.Object[] objArray72 = charArrayList57.toArray();
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertArrayEquals(objArray72, new java.lang.Object[] {});
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test383");
        long[] longArray0 = new long[] {};
        java.util.Arrays.sort(longArray0, 0, (int) (short) 0);
        long[] longArray4 = new long[] {};
        java.util.Arrays.sort(longArray4, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray4);
        int int9 = java.util.Arrays.compare(longArray0, longArray4);
        java.util.stream.LongStream longStream10 = java.util.Arrays.stream(longArray4);
        java.util.Arrays.parallelSort(longArray4);
        java.util.Spliterator.OfLong ofLong12 = java.util.Arrays.spliterator(longArray4);
        long[] longArray15 = new long[] { 100L, 1L };
        java.util.Arrays.sort(longArray15);
        long[] longArray19 = new long[] { 100L, 1L };
        java.util.Arrays.sort(longArray19);
        int int21 = java.util.Arrays.compare(longArray15, longArray19);
        int int22 = java.util.Arrays.compareUnsigned(longArray4, longArray15);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertArrayEquals(longArray0, new long[] {});
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertArrayEquals(longArray4, new long[] {});
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(longStream10);
        org.junit.Assert.assertNotNull(ofLong12);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertArrayEquals(longArray15, new long[] { 1L, 100L });
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertArrayEquals(longArray19, new long[] { 1L, 100L });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-2) + "'", int22 == (-2));
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test384");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        java.lang.Object[] objArray71 = charArrayList57.toArray();
        char[] charArray72 = charArrayList57.removeLast();
        charArrayList57.trimToSize();
        charArrayList57.clear();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray75 = charArrayList57.getFirst();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[[ , #, 4, #, a], [ , #, a]]");
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertArrayEquals(charArray72, new char[] { ' ', '#', 'a' });
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test385");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        java.util.ListIterator<char[]> charArrayItor71 = charArrayList57.listIterator();
        char[] charArray73 = charArrayList57.get((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.fill(charArray73, (-50), 100, '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -50");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(charArrayItor71);
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertArrayEquals(charArray73, new char[] { ' ', '#', '4', '#', 'a' });
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test386");
        int[] intArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream3 = java.util.Arrays.stream(intArray0, 0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test387");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        int int71 = charArrayList57.size();
        java.util.ArrayList<char[]> charArrayList72 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList73 = charArrayList72.reversed();
        charArrayList72.clear();
        java.lang.Object[] objArray75 = charArrayList72.toArray();
        int int76 = java.util.Collections.indexOfSubList((java.util.List<char[]>) charArrayList57, (java.util.List<char[]>) charArrayList72);
        java.lang.Object[] objArray77 = charArrayList57.toArray();
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(charArrayList73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertArrayEquals(objArray75, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[[ , #, 4, #, a], [ , #, a]]");
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test388");
        java.lang.String str1 = java.util.Objects.toString((java.lang.Object) (-6));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "-6" + "'", str1, "-6");
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test389");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        charArrayList0.clear();
        java.lang.Object[] objArray3 = charArrayList0.toArray();
        boolean boolean5 = charArrayList0.equals((java.lang.Object) false);
        char[] charArray7 = new char[] { ' ' };
        charArrayList0.addLast(charArray7);
        char[] charArray12 = new char[] { ' ', '#', 'a' };
        char[] charArray18 = new char[] { ' ', '#', '4', '#', 'a' };
        int int19 = java.util.Arrays.compare(charArray12, charArray18);
        char[] charArray23 = new char[] { ' ', '#', 'a' };
        char[] charArray29 = new char[] { ' ', '#', '4', '#', 'a' };
        int int30 = java.util.Arrays.compare(charArray23, charArray29);
        char[] charArray34 = new char[] { ' ', '#', 'a' };
        char[] charArray40 = new char[] { ' ', '#', '4', '#', 'a' };
        int int41 = java.util.Arrays.compare(charArray34, charArray40);
        char[] charArray45 = new char[] { ' ', '#', 'a' };
        char[] charArray51 = new char[] { ' ', '#', '4', '#', 'a' };
        int int52 = java.util.Arrays.compare(charArray45, charArray51);
        char[] charArray56 = new char[] { ' ', '#', 'a' };
        char[] charArray62 = new char[] { ' ', '#', '4', '#', 'a' };
        int int63 = java.util.Arrays.compare(charArray56, charArray62);
        java.util.List<char[]> charArrayList64 = java.util.List.of(charArray29, charArray34, charArray45, charArray62);
        char[][] charArray65 = new char[][] { charArray18, charArray34 };
        java.util.ArrayList<char[]> charArrayList66 = new java.util.ArrayList<char[]>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList66, charArray65);
        char[] charArray71 = new char[] { ' ', '#', 'a' };
        char[] charArray77 = new char[] { ' ', '#', '4', '#', 'a' };
        int int78 = java.util.Arrays.compare(charArray71, charArray77);
        boolean boolean79 = charArrayList66.contains((java.lang.Object) charArray71);
        charArrayList66.clear();
        java.util.Collections.copy((java.util.List<char[]>) charArrayList0, (java.util.List<char[]>) charArrayList66);
        java.util.List<char[]> charArrayList82 = charArrayList0.reversed();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections.swap(charArrayList82, (int) (short) 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index -1 out of bounds for length 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertArrayEquals(objArray3, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertArrayEquals(charArray7, new char[] { ' ' });
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertArrayEquals(charArray12, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertArrayEquals(charArray18, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 45 + "'", int19 == 45);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertArrayEquals(charArray23, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertArrayEquals(charArray29, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 45 + "'", int30 == 45);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertArrayEquals(charArray34, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertArrayEquals(charArray40, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 45 + "'", int41 == 45);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertArrayEquals(charArray45, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertArrayEquals(charArray51, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 45 + "'", int52 == 45);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertArrayEquals(charArray56, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 45 + "'", int63 == 45);
        org.junit.Assert.assertNotNull(charArrayList64);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertArrayEquals(charArray71, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertArrayEquals(charArray77, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 45 + "'", int78 == 45);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(charArrayList82);
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test390");
        long long2 = java.util.Objects.checkIndex((long) 2, (long) 31);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 2L + "'", long2 == 2L);
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test391");
        short[] shortArray6 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray9 = java.util.Arrays.copyOfRange(shortArray6, 0, (int) ' ');
        java.util.Arrays.parallelSort(shortArray9);
        short[] shortArray14 = new short[] { (byte) 0, (short) 0, (byte) 1 };
        short[] shortArray17 = java.util.Arrays.copyOfRange(shortArray14, (int) (byte) 1, 5);
        int int18 = java.util.Arrays.compareUnsigned(shortArray9, shortArray17);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertArrayEquals(shortArray6, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertArrayEquals(shortArray14, new short[] { (short) 0, (short) 0, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertArrayEquals(shortArray17, new short[] { (short) 0, (short) 1, (short) 0, (short) 0 });
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 65535 + "'", int18 == 65535);
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test392");
        java.util.List list0 = java.util.Collections.EMPTY_LIST;
        java.util.Collections.rotate((java.util.List<char[]>) list0, 5);
        int int3 = list0.size();
        boolean boolean5 = list0.remove((java.lang.Object) (-90));
        java.util.function.UnaryOperator<char[]> charArrayUnaryOperator6 = null;
        // The following exception was thrown during execution in test generation
        try {
            list0.replaceAll(charArrayUnaryOperator6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(list0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test393");
        java.lang.reflect.Type[] typeArray0 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray2 = java.util.Arrays.copyOf(typeArray0, (int) (byte) 0);
        java.lang.String str3 = java.util.Arrays.deepToString((java.lang.Object[]) typeArray2);
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertArrayEquals(typeArray0, new java.lang.reflect.Type[] {});
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertArrayEquals(typeArray2, new java.lang.reflect.Type[] {});
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test394");
        double[] doubleArray1 = new double[] { (-1.0d) };
        double[] doubleArray4 = java.util.Arrays.copyOfRange(doubleArray1, (int) (short) 0, (int) 'a');
        java.util.Arrays.parallelSort(doubleArray4);
        java.util.Spliterator.OfDouble ofDouble6 = java.util.Arrays.spliterator(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(doubleArray4, (int) '4', 31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(52) > toIndex(31)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertArrayEquals(doubleArray1, new double[] { (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(ofDouble6);
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test395");
        float[] floatArray3 = new float[] { 10, 1L, 100 };
        float[] floatArray5 = java.util.Arrays.copyOf(floatArray3, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = java.util.Arrays.binarySearch(floatArray5, 0, (-3), 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(0) > toIndex(-3)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertArrayEquals(floatArray3, new float[] { 10.0f, 1.0f, 100.0f }, (float) 1.0E-15);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertArrayEquals(floatArray5, new float[] { 10.0f }, (float) 1.0E-15);
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test396");
        int[] intArray6 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray6);
        int int9 = java.util.Arrays.binarySearch(intArray6, (-2));
        int[] intArray12 = java.util.Arrays.copyOfRange(intArray6, 3, (int) '#');
        java.util.stream.IntStream intStream13 = java.util.Arrays.stream(intArray12);
        java.util.function.IntBinaryOperator intBinaryOperator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelPrefix(intArray12, intBinaryOperator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertArrayEquals(intArray6, new int[] { 0, 1, 5, 10, 32, 97 });
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(intStream13);
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test397");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        charArrayList0.clear();
        java.lang.Object[] objArray3 = charArrayList0.toArray();
        boolean boolean5 = charArrayList0.equals((java.lang.Object) false);
        char[] charArray7 = new char[] { ' ' };
        charArrayList0.addLast(charArray7);
        char[] charArray9 = charArrayList0.removeLast();
        java.util.Spliterator<char[]> charArraySpliterator10 = charArrayList0.spliterator();
        java.lang.Class<?> wildcardClass11 = charArrayList0.getClass();
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertArrayEquals(objArray3, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertArrayEquals(charArray7, new char[] { ' ' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ' });
        org.junit.Assert.assertNotNull(charArraySpliterator10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test398");
        int[] intArray1 = new int[] { 4 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator.OfInt ofInt4 = java.util.Arrays.spliterator(intArray1, (int) (byte) -1, 31);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertArrayEquals(intArray1, new int[] { 4 });
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test399");
        int[] intArray5 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray5);
        int[] intArray12 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray12);
        java.util.Arrays.sort(intArray12);
        int int15 = java.util.Arrays.compareUnsigned(intArray5, intArray12);
        java.util.Spliterator.OfInt ofInt16 = java.util.Arrays.spliterator(intArray12);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray19 = java.util.Arrays.copyOfRange(intArray12, (int) '#', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: 35 > -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertArrayEquals(intArray12, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(ofInt16);
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test400");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        charArrayList0.clear();
        java.lang.Object[] objArray3 = charArrayList0.toArray();
        boolean boolean5 = charArrayList0.equals((java.lang.Object) false);
        java.lang.Object[] objArray6 = charArrayList0.toArray();
        short[] shortArray13 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray16 = java.util.Arrays.copyOfRange(shortArray13, 0, (int) ' ');
        short[] shortArray20 = new short[] { (byte) 0, (short) 0, (byte) 1 };
        short[] shortArray23 = java.util.Arrays.copyOfRange(shortArray20, (int) (byte) 1, 5);
        int int24 = java.util.Arrays.compareUnsigned(shortArray13, shortArray20);
        int int25 = charArrayList0.lastIndexOf((java.lang.Object) int24);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray26 = charArrayList0.removeLast();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertArrayEquals(objArray3, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertArrayEquals(objArray6, new java.lang.Object[] {});
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertArrayEquals(shortArray13, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertArrayEquals(shortArray20, new short[] { (short) 0, (short) 0, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertArrayEquals(shortArray23, new short[] { (short) 0, (short) 1, (short) 0, (short) 0 });
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test401");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        int int71 = charArrayList57.size();
        java.util.List<java.util.List<char[]>> charArrayListList72 = java.util.List.of((java.util.List<char[]>) charArrayList57);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(charArrayListList72);
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test402");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        int int71 = charArrayList57.size();
        java.util.ArrayList<char[]> charArrayList72 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList73 = charArrayList72.reversed();
        charArrayList72.clear();
        java.lang.Object[] objArray75 = charArrayList72.toArray();
        int int76 = java.util.Collections.indexOfSubList((java.util.List<char[]>) charArrayList57, (java.util.List<char[]>) charArrayList72);
        boolean boolean78 = charArrayList57.equals((java.lang.Object) 0.0f);
        java.util.Spliterator<char[]> charArraySpliterator79 = charArrayList57.spliterator();
        float[] floatArray83 = new float[] { 10, 1L, 100 };
        float[] floatArray85 = java.util.Arrays.copyOf(floatArray83, (int) (short) 1);
        float[] floatArray92 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int94 = java.util.Arrays.binarySearch(floatArray92, (float) (short) 1);
        java.util.Arrays.sort(floatArray92);
        int int96 = java.util.Arrays.mismatch(floatArray85, floatArray92);
        java.util.Arrays.sort(floatArray92);
        boolean boolean98 = java.util.Objects.equals((java.lang.Object) charArraySpliterator79, (java.lang.Object) floatArray92);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(charArrayList73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertArrayEquals(objArray75, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(charArraySpliterator79);
        org.junit.Assert.assertNotNull(floatArray83);
        org.junit.Assert.assertArrayEquals(floatArray83, new float[] { 10.0f, 1.0f, 100.0f }, (float) 1.0E-15);
        org.junit.Assert.assertNotNull(floatArray85);
        org.junit.Assert.assertArrayEquals(floatArray85, new float[] { 10.0f }, (float) 1.0E-15);
        org.junit.Assert.assertNotNull(floatArray92);
        org.junit.Assert.assertArrayEquals(floatArray92, new float[] { (-1.0f), 0.0f, 0.0f, 1.0f, 1.0f, 97.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 5 + "'", int94 == 5);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test403");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        charArrayList0.clear();
        java.lang.Object[] objArray3 = charArrayList0.toArray();
        boolean boolean5 = charArrayList0.equals((java.lang.Object) false);
        char[] charArray7 = new char[] { ' ' };
        charArrayList0.addLast(charArray7);
        char[] charArray12 = new char[] { ' ', '#', 'a' };
        char[] charArray18 = new char[] { ' ', '#', '4', '#', 'a' };
        int int19 = java.util.Arrays.compare(charArray12, charArray18);
        char[] charArray23 = new char[] { ' ', '#', 'a' };
        char[] charArray29 = new char[] { ' ', '#', '4', '#', 'a' };
        int int30 = java.util.Arrays.compare(charArray23, charArray29);
        char[] charArray34 = new char[] { ' ', '#', 'a' };
        char[] charArray40 = new char[] { ' ', '#', '4', '#', 'a' };
        int int41 = java.util.Arrays.compare(charArray34, charArray40);
        char[] charArray45 = new char[] { ' ', '#', 'a' };
        char[] charArray51 = new char[] { ' ', '#', '4', '#', 'a' };
        int int52 = java.util.Arrays.compare(charArray45, charArray51);
        char[] charArray56 = new char[] { ' ', '#', 'a' };
        char[] charArray62 = new char[] { ' ', '#', '4', '#', 'a' };
        int int63 = java.util.Arrays.compare(charArray56, charArray62);
        java.util.List<char[]> charArrayList64 = java.util.List.of(charArray29, charArray34, charArray45, charArray62);
        char[][] charArray65 = new char[][] { charArray18, charArray34 };
        java.util.ArrayList<char[]> charArrayList66 = new java.util.ArrayList<char[]>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList66, charArray65);
        char[] charArray71 = new char[] { ' ', '#', 'a' };
        char[] charArray77 = new char[] { ' ', '#', '4', '#', 'a' };
        int int78 = java.util.Arrays.compare(charArray71, charArray77);
        boolean boolean79 = charArrayList66.contains((java.lang.Object) charArray71);
        charArrayList66.clear();
        java.util.Collections.copy((java.util.List<char[]>) charArrayList0, (java.util.List<char[]>) charArrayList66);
        java.util.List<char[]> charArrayList82 = charArrayList0.reversed();
        java.util.ListIterator<char[]> charArrayItor83 = charArrayList0.listIterator();
        java.util.ArrayList<char[]> charArrayList84 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList85 = charArrayList84.reversed();
        int int86 = java.util.Collections.indexOfSubList((java.util.List<char[]>) charArrayList0, (java.util.List<char[]>) charArrayList84);
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertArrayEquals(objArray3, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertArrayEquals(charArray7, new char[] { ' ' });
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertArrayEquals(charArray12, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertArrayEquals(charArray18, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 45 + "'", int19 == 45);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertArrayEquals(charArray23, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertArrayEquals(charArray29, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 45 + "'", int30 == 45);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertArrayEquals(charArray34, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertArrayEquals(charArray40, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 45 + "'", int41 == 45);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertArrayEquals(charArray45, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertArrayEquals(charArray51, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 45 + "'", int52 == 45);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertArrayEquals(charArray56, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 45 + "'", int63 == 45);
        org.junit.Assert.assertNotNull(charArrayList64);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertArrayEquals(charArray71, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertArrayEquals(charArray77, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 45 + "'", int78 == 45);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(charArrayList82);
        org.junit.Assert.assertNotNull(charArrayItor83);
        org.junit.Assert.assertNotNull(charArrayList85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test404");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        charArrayList0.clear();
        java.lang.Object[] objArray3 = charArrayList0.toArray();
        boolean boolean5 = charArrayList0.equals((java.lang.Object) false);
        java.lang.Object[] objArray6 = charArrayList0.toArray();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray8 = charArrayList0.get((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 100 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertArrayEquals(objArray3, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertArrayEquals(objArray6, new java.lang.Object[] {});
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test405");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        java.lang.Object[] objArray71 = charArrayList57.toArray();
        char[] charArray72 = charArrayList57.removeLast();
        charArrayList57.trimToSize();
        charArrayList57.clear();
        java.util.ArrayList<char[]> charArrayList75 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList76 = charArrayList75.reversed();
        int int77 = charArrayList75.size();
        java.util.Iterator<char[]> charArrayItor78 = charArrayList75.iterator();
        int int79 = java.util.Collections.indexOfSubList((java.util.List<char[]>) charArrayList57, (java.util.List<char[]>) charArrayList75);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray81 = charArrayList75.remove(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 100 out of bounds for length 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[[ , #, 4, #, a], [ , #, a]]");
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertArrayEquals(charArray72, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArrayList76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(charArrayItor78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test406");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        boolean boolean1 = charArrayList0.isEmpty();
        java.lang.String str2 = charArrayList0.toString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test407");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        charArrayList0.clear();
        java.lang.Object[] objArray3 = charArrayList0.toArray();
        boolean boolean5 = charArrayList0.equals((java.lang.Object) false);
        char[] charArray9 = new char[] { ' ', '#', 'a' };
        char[] charArray15 = new char[] { ' ', '#', '4', '#', 'a' };
        int int16 = java.util.Arrays.compare(charArray9, charArray15);
        charArrayList0.addFirst(charArray9);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray20 = java.util.Arrays.copyOfRange(charArray9, (-6), (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: arraycopy: source index -6 out of bounds for char[3]");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertArrayEquals(objArray3, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertArrayEquals(charArray15, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 45 + "'", int16 == 45);
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test408");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        charArrayList0.clear();
        java.lang.Object[] objArray3 = charArrayList0.toArray();
        boolean boolean5 = charArrayList0.equals((java.lang.Object) false);
        char[] charArray7 = new char[] { ' ' };
        charArrayList0.addLast(charArray7);
        char[] charArray12 = new char[] { ' ', '#', 'a' };
        char[] charArray18 = new char[] { ' ', '#', '4', '#', 'a' };
        int int19 = java.util.Arrays.compare(charArray12, charArray18);
        char[] charArray23 = new char[] { ' ', '#', 'a' };
        char[] charArray29 = new char[] { ' ', '#', '4', '#', 'a' };
        int int30 = java.util.Arrays.compare(charArray23, charArray29);
        char[] charArray34 = new char[] { ' ', '#', 'a' };
        char[] charArray40 = new char[] { ' ', '#', '4', '#', 'a' };
        int int41 = java.util.Arrays.compare(charArray34, charArray40);
        char[] charArray45 = new char[] { ' ', '#', 'a' };
        char[] charArray51 = new char[] { ' ', '#', '4', '#', 'a' };
        int int52 = java.util.Arrays.compare(charArray45, charArray51);
        char[] charArray56 = new char[] { ' ', '#', 'a' };
        char[] charArray62 = new char[] { ' ', '#', '4', '#', 'a' };
        int int63 = java.util.Arrays.compare(charArray56, charArray62);
        java.util.List<char[]> charArrayList64 = java.util.List.of(charArray29, charArray34, charArray45, charArray62);
        char[][] charArray65 = new char[][] { charArray18, charArray34 };
        java.util.ArrayList<char[]> charArrayList66 = new java.util.ArrayList<char[]>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList66, charArray65);
        char[] charArray71 = new char[] { ' ', '#', 'a' };
        char[] charArray77 = new char[] { ' ', '#', '4', '#', 'a' };
        int int78 = java.util.Arrays.compare(charArray71, charArray77);
        boolean boolean79 = charArrayList66.contains((java.lang.Object) charArray71);
        charArrayList66.clear();
        java.util.Collections.copy((java.util.List<char[]>) charArrayList0, (java.util.List<char[]>) charArrayList66);
        java.util.List<char[]> charArrayList82 = charArrayList0.reversed();
        java.util.ListIterator<char[]> charArrayItor83 = charArrayList0.listIterator();
        java.util.Set<java.util.Iterator<char[]>> charArrayItorSet84 = java.util.Collections.singleton((java.util.Iterator<char[]>) charArrayItor83);
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertArrayEquals(objArray3, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertArrayEquals(charArray7, new char[] { ' ' });
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertArrayEquals(charArray12, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertArrayEquals(charArray18, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 45 + "'", int19 == 45);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertArrayEquals(charArray23, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertArrayEquals(charArray29, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 45 + "'", int30 == 45);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertArrayEquals(charArray34, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertArrayEquals(charArray40, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 45 + "'", int41 == 45);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertArrayEquals(charArray45, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertArrayEquals(charArray51, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 45 + "'", int52 == 45);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertArrayEquals(charArray56, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 45 + "'", int63 == 45);
        org.junit.Assert.assertNotNull(charArrayList64);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertArrayEquals(charArray71, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertArrayEquals(charArray77, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 45 + "'", int78 == 45);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(charArrayList82);
        org.junit.Assert.assertNotNull(charArrayItor83);
        org.junit.Assert.assertNotNull(charArrayItorSet84);
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test409");
        short[] shortArray3 = new short[] { (byte) 0, (short) 0, (byte) 1 };
        short[] shortArray6 = java.util.Arrays.copyOfRange(shortArray3, (int) (byte) 1, 5);
        java.lang.String str7 = java.util.Objects.toString((java.lang.Object) 5);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertArrayEquals(shortArray3, new short[] { (short) 0, (short) 0, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertArrayEquals(shortArray6, new short[] { (short) 0, (short) 1, (short) 0, (short) 0 });
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "5" + "'", str7, "5");
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test410");
        short[] shortArray6 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray9 = java.util.Arrays.copyOfRange(shortArray6, 0, (int) ' ');
        java.util.Arrays.parallelSort(shortArray9);
        short[] shortArray17 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray20 = java.util.Arrays.copyOfRange(shortArray17, 0, (int) ' ');
        java.util.Arrays.parallelSort(shortArray20);
        java.util.Arrays.fill(shortArray20, (short) 0);
        java.util.Arrays.fill(shortArray20, (short) -1);
        int int26 = java.util.Arrays.mismatch(shortArray9, shortArray20);
        short[] shortArray35 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray38 = java.util.Arrays.copyOfRange(shortArray35, 0, (int) ' ');
        java.util.Arrays.parallelSort(shortArray38);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = java.util.Arrays.compare(shortArray20, (int) (byte) 1, (int) (byte) 0, shortArray38, (int) 'a', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(1) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertArrayEquals(shortArray6, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertArrayEquals(shortArray17, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertArrayEquals(shortArray35, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray38);
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test411");
        long[] longArray0 = new long[] {};
        java.util.Arrays.sort(longArray0, 0, (int) (short) 0);
        long[] longArray4 = new long[] {};
        java.util.Arrays.sort(longArray4, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray4);
        int int9 = java.util.Arrays.compare(longArray0, longArray4);
        java.util.stream.LongStream longStream10 = java.util.Arrays.stream(longArray4);
        java.util.Arrays.parallelSort(longArray4);
        java.util.Spliterator.OfLong ofLong12 = java.util.Arrays.spliterator(longArray4);
        long[] longArray15 = new long[] {};
        java.util.Arrays.sort(longArray15, 0, (int) (short) 0);
        long[] longArray19 = new long[] {};
        java.util.Arrays.sort(longArray19, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray19);
        int int24 = java.util.Arrays.compare(longArray15, longArray19);
        java.util.Arrays.parallelSort(longArray15);
        // The following exception was thrown during execution in test generation
        try {
            int int28 = java.util.Arrays.mismatch(longArray4, (-1), (-2060932013), longArray15, (int) (byte) 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(-1) > toIndex(-2060932013)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertArrayEquals(longArray0, new long[] {});
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertArrayEquals(longArray4, new long[] {});
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(longStream10);
        org.junit.Assert.assertNotNull(ofLong12);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertArrayEquals(longArray15, new long[] {});
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertArrayEquals(longArray19, new long[] {});
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test412");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        java.util.ListIterator<char[]> charArrayItor71 = charArrayList57.listIterator();
        char[] charArray72 = charArrayList57.getFirst();
        java.util.function.UnaryOperator<char[]> charArrayUnaryOperator73 = null;
        // The following exception was thrown during execution in test generation
        try {
            charArrayList57.replaceAll(charArrayUnaryOperator73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(charArrayItor71);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertArrayEquals(charArray72, new char[] { ' ', '#', '4', '#', 'a' });
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test413");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        charArrayList57.clear();
        java.util.ArrayList<char[]> charArrayList72 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList73 = charArrayList72.reversed();
        int int74 = charArrayList72.size();
        java.util.Iterator<char[]> charArrayItor75 = charArrayList72.iterator();
        java.util.ArrayList<char[]> charArrayList76 = java.util.Objects.requireNonNullElse(charArrayList57, charArrayList72);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(charArrayList73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(charArrayItor75);
        org.junit.Assert.assertNotNull(charArrayList76);
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test414");
        // The following exception was thrown during execution in test generation
        try {
            long long2 = java.util.Objects.checkIndex((long) (-3), (long) 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index -3 out of bounds for length 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test415");
        short[] shortArray6 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray9 = java.util.Arrays.copyOfRange(shortArray6, 0, (int) ' ');
        int int11 = java.util.Arrays.binarySearch(shortArray6, (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray13 = java.util.Arrays.copyOf(shortArray6, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -1");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertArrayEquals(shortArray6, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test416");
        int[] intArray5 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray5);
        int[] intArray13 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray13);
        int int16 = java.util.Arrays.binarySearch(intArray13, (-2));
        int[] intArray19 = java.util.Arrays.copyOfRange(intArray13, 3, (int) '#');
        java.util.stream.IntStream intStream20 = java.util.Arrays.stream(intArray19);
        int int21 = java.util.Arrays.compare(intArray5, intArray19);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.fill(intArray19, (int) '4', (-2), (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(52) > toIndex(-2)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertArrayEquals(intArray13, new int[] { 0, 1, 5, 10, 32, 97 });
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intStream20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test417");
        int[] intArray6 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray6);
        java.util.Spliterator.OfInt ofInt8 = java.util.Arrays.spliterator(intArray6);
        int[] intArray14 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray14);
        java.util.Arrays.sort(intArray14);
        java.util.Arrays.sort(intArray14);
        java.util.Spliterator.OfInt ofInt18 = java.util.Arrays.spliterator(intArray14);
        int[] intArray24 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray24);
        java.util.Arrays.sort(intArray24);
        java.util.Arrays.sort(intArray24);
        java.util.Spliterator.OfInt ofInt28 = java.util.Arrays.spliterator(intArray24);
        int[] intArray34 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray34);
        java.util.Arrays.sort(intArray34);
        java.util.Arrays.sort(intArray34);
        java.util.Spliterator.OfInt ofInt38 = java.util.Arrays.spliterator(intArray34);
        int[] intArray45 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray45);
        java.util.Spliterator.OfInt ofInt47 = java.util.Arrays.spliterator(intArray45);
        int[] intArray54 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray54);
        java.util.Spliterator.OfInt ofInt56 = java.util.Arrays.spliterator(intArray54);
        int[] intArray63 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray63);
        java.util.Spliterator.OfInt ofInt65 = java.util.Arrays.spliterator(intArray63);
        int[] intArray71 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray71);
        int[] intArray78 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray78);
        java.util.Arrays.sort(intArray78);
        int int81 = java.util.Arrays.compareUnsigned(intArray71, intArray78);
        java.util.Spliterator.OfInt ofInt82 = java.util.Arrays.spliterator(intArray78);
        java.util.List<java.util.Spliterator.OfInt> ofIntList83 = java.util.List.of(ofInt8, ofInt18, ofInt28, ofInt38, ofInt47, ofInt56, ofInt65, ofInt82);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertArrayEquals(intArray6, new int[] { 0, 1, 5, 10, 32, 97 });
        org.junit.Assert.assertNotNull(ofInt8);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertArrayEquals(intArray14, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertNotNull(ofInt18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertArrayEquals(intArray24, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertNotNull(ofInt28);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertArrayEquals(intArray34, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertNotNull(ofInt38);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertArrayEquals(intArray45, new int[] { 0, 1, 5, 10, 32, 97 });
        org.junit.Assert.assertNotNull(ofInt47);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertArrayEquals(intArray54, new int[] { 0, 1, 5, 10, 32, 97 });
        org.junit.Assert.assertNotNull(ofInt56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertArrayEquals(intArray63, new int[] { 0, 1, 5, 10, 32, 97 });
        org.junit.Assert.assertNotNull(ofInt65);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertArrayEquals(intArray71, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertArrayEquals(intArray78, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(ofInt82);
        org.junit.Assert.assertNotNull(ofIntList83);
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test418");
        java.util.NavigableSet<byte[]> byteArraySet0 = java.util.Collections.emptyNavigableSet();
        java.util.NavigableSet<byte[]> byteArraySet1 = java.util.Collections.unmodifiableNavigableSet(byteArraySet0);
        java.util.SortedSet<byte[]> byteArraySet2 = java.util.Collections.synchronizedSortedSet((java.util.SortedSet<byte[]>) byteArraySet1);
        java.util.NavigableSet<byte[]> byteArraySet3 = java.util.Collections.unmodifiableNavigableSet(byteArraySet1);
        java.lang.Class<byte[]> byteArrayClass4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.NavigableSet<byte[]> byteArraySet5 = java.util.Collections.checkedNavigableSet(byteArraySet1, byteArrayClass4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: type");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArraySet0);
        org.junit.Assert.assertNotNull(byteArraySet1);
        org.junit.Assert.assertNotNull(byteArraySet2);
        org.junit.Assert.assertNotNull(byteArraySet3);
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test419");
        double[] doubleArray1 = new double[] { (-1.0d) };
        double[] doubleArray4 = java.util.Arrays.copyOfRange(doubleArray1, (int) (short) 0, (int) 'a');
        java.util.Arrays.parallelSort(doubleArray4);
        java.util.Arrays.fill(doubleArray4, 100.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertArrayEquals(doubleArray1, new double[] { (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray4);
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test420");
        int[] intArray0 = null;
        int[] intArray6 = new int[] { (-50), (short) 0, 10, 1, 5 };
        boolean boolean7 = java.util.Arrays.equals(intArray0, intArray6);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertArrayEquals(intArray6, new int[] { (-50), 0, 10, 1, 5 });
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test421");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray7 = new byte[] {};
        int int8 = java.util.Arrays.compareUnsigned(byteArray6, byteArray7);
        byte[] byteArray9 = new byte[] {};
        int int10 = java.util.Arrays.mismatch(byteArray7, byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray18 = new byte[] {};
        int int19 = java.util.Arrays.compareUnsigned(byteArray17, byteArray18);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 };
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray33 = new byte[] {};
        int int34 = java.util.Arrays.compareUnsigned(byteArray32, byteArray33);
        byte[] byteArray35 = new byte[] {};
        int int36 = java.util.Arrays.mismatch(byteArray33, byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray44 = new byte[] {};
        int int45 = java.util.Arrays.compareUnsigned(byteArray43, byteArray44);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray53 = new byte[] {};
        int int54 = java.util.Arrays.compareUnsigned(byteArray52, byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray62 = new byte[] {};
        int int63 = java.util.Arrays.compareUnsigned(byteArray61, byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray71 = new byte[] {};
        int int72 = java.util.Arrays.compareUnsigned(byteArray70, byteArray71);
        byte[] byteArray73 = new byte[] {};
        int int74 = java.util.Arrays.mismatch(byteArray71, byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray82 = new byte[] {};
        int int83 = java.util.Arrays.compareUnsigned(byteArray81, byteArray82);
        byte[] byteArray84 = new byte[] {};
        int int85 = java.util.Arrays.mismatch(byteArray82, byteArray84);
        java.util.List<byte[]> byteArrayList86 = java.util.List.of(byteArray9, byteArray17, byteArray25, byteArray35, byteArray44, byteArray52, byteArray62, byteArray73, byteArray84);
        int int88 = java.util.Arrays.binarySearch(byteArray25, (byte) -1);
        int int90 = java.util.Arrays.binarySearch(byteArray25, (byte) 10);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] {});
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertArrayEquals(byteArray25, new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertArrayEquals(byteArray32, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertArrayEquals(byteArray33, new byte[] {});
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6 + "'", int34 == 6);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertArrayEquals(byteArray35, new byte[] {});
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertArrayEquals(byteArray43, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertArrayEquals(byteArray44, new byte[] {});
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 6 + "'", int45 == 6);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertArrayEquals(byteArray52, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertArrayEquals(byteArray53, new byte[] {});
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertArrayEquals(byteArray61, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertArrayEquals(byteArray62, new byte[] {});
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertArrayEquals(byteArray70, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertArrayEquals(byteArray71, new byte[] {});
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 6 + "'", int72 == 6);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertArrayEquals(byteArray73, new byte[] {});
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertArrayEquals(byteArray81, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertArrayEquals(byteArray82, new byte[] {});
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 6 + "'", int83 == 6);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertArrayEquals(byteArray84, new byte[] {});
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(byteArrayList86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test422");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        int int71 = charArrayList57.size();
        java.util.ArrayList<char[]> charArrayList72 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList73 = charArrayList72.reversed();
        charArrayList72.clear();
        java.lang.Object[] objArray75 = charArrayList72.toArray();
        int int76 = java.util.Collections.indexOfSubList((java.util.List<char[]>) charArrayList57, (java.util.List<char[]>) charArrayList72);
        boolean boolean78 = charArrayList57.equals((java.lang.Object) 0.0f);
        byte[] byteArray85 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray86 = new byte[] {};
        int int87 = java.util.Arrays.compareUnsigned(byteArray85, byteArray86);
        java.util.Arrays.parallelSort(byteArray85);
        boolean boolean89 = charArrayList57.remove((java.lang.Object) byteArray85);
        java.util.ListIterator<char[]> charArrayItor90 = charArrayList57.listIterator();
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(charArrayList73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertArrayEquals(objArray75, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertArrayEquals(byteArray85, new byte[] { (byte) -1, (byte) -1, (byte) -1, (byte) 0, (byte) 100, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertArrayEquals(byteArray86, new byte[] {});
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 6 + "'", int87 == 6);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(charArrayItor90);
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test423");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<char[]> charArrayList4 = charArrayList0.subList(3, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(3) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArrayList1);
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test424");
        boolean[] booleanArray4 = new boolean[] { false, false, true, true };
        boolean[] booleanArray7 = new boolean[] { true, false };
        int int8 = java.util.Arrays.mismatch(booleanArray4, booleanArray7);
        boolean[] booleanArray15 = new boolean[] { true, false, true, true, false, true };
        boolean[] booleanArray21 = new boolean[] { false, false, false, false, true };
        boolean[] booleanArray24 = new boolean[] { false, true };
        boolean[] booleanArray29 = new boolean[] { false, false, true, true };
        boolean[] booleanArray32 = new boolean[] { true, false };
        int int33 = java.util.Arrays.mismatch(booleanArray29, booleanArray32);
        boolean[] booleanArray38 = new boolean[] { false, false, true, true };
        boolean[] booleanArray41 = new boolean[] { true, false };
        int int42 = java.util.Arrays.mismatch(booleanArray38, booleanArray41);
        boolean[] booleanArray47 = new boolean[] { false, false, true, true };
        boolean[] booleanArray50 = new boolean[] { true, false };
        int int51 = java.util.Arrays.mismatch(booleanArray47, booleanArray50);
        boolean[] booleanArray56 = new boolean[] { false, false, true, true };
        boolean[] booleanArray59 = new boolean[] { true, false };
        int int60 = java.util.Arrays.mismatch(booleanArray56, booleanArray59);
        java.util.List<boolean[]> booleanArrayList61 = java.util.List.of(booleanArray4, booleanArray15, booleanArray21, booleanArray24, booleanArray29, booleanArray38, booleanArray47, booleanArray56);
        boolean[] booleanArray64 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean67 = java.util.Arrays.equals(booleanArray56, 0, (-2060932013), booleanArray64, (int) (byte) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(0) > toIndex(-2060932013)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray4);
        assertBooleanArrayEquals(booleanArray4, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray7);
        assertBooleanArrayEquals(booleanArray7, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(booleanArray15);
        assertBooleanArrayEquals(booleanArray15, new boolean[] { true, false, true, true, false, true });
        org.junit.Assert.assertNotNull(booleanArray21);
        assertBooleanArrayEquals(booleanArray21, new boolean[] { false, false, false, false, true });
        org.junit.Assert.assertNotNull(booleanArray24);
        assertBooleanArrayEquals(booleanArray24, new boolean[] { false, true });
        org.junit.Assert.assertNotNull(booleanArray29);
        assertBooleanArrayEquals(booleanArray29, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray32);
        assertBooleanArrayEquals(booleanArray32, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(booleanArray38);
        assertBooleanArrayEquals(booleanArray38, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray41);
        assertBooleanArrayEquals(booleanArray41, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(booleanArray47);
        assertBooleanArrayEquals(booleanArray47, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray50);
        assertBooleanArrayEquals(booleanArray50, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(booleanArray56);
        assertBooleanArrayEquals(booleanArray56, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray59);
        assertBooleanArrayEquals(booleanArray59, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(booleanArrayList61);
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test425");
        int[] intArray5 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray5);
        int[] intArray13 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray13);
        int int16 = java.util.Arrays.binarySearch(intArray13, (-2));
        int[] intArray19 = java.util.Arrays.copyOfRange(intArray13, 3, (int) '#');
        java.util.stream.IntStream intStream20 = java.util.Arrays.stream(intArray19);
        int int21 = java.util.Arrays.compare(intArray5, intArray19);
        int[] intArray30 = new int[] { (short) 10, (byte) 1, 'a', ' ', 0, 5 };
        java.util.Arrays.sort(intArray30);
        java.util.Spliterator.OfInt ofInt32 = java.util.Arrays.spliterator(intArray30);
        // The following exception was thrown during execution in test generation
        try {
            int int35 = java.util.Arrays.compare(intArray19, (int) (short) 10, (-33), intArray30, 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(10) > toIndex(-33)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertArrayEquals(intArray13, new int[] { 0, 1, 5, 10, 32, 97 });
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intStream20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertArrayEquals(intArray30, new int[] { 0, 1, 5, 10, 32, 97 });
        org.junit.Assert.assertNotNull(ofInt32);
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test426");
        long[] longArray0 = new long[] {};
        java.util.Arrays.sort(longArray0, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray0);
        long[] longArray11 = new long[] { (short) 10, (byte) 0, 100L, '4' };
        long[] longArray12 = new long[] {};
        java.util.Arrays.sort(longArray12, 0, (int) (short) 0);
        int int16 = java.util.Arrays.compareUnsigned(longArray11, longArray12);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = java.util.Arrays.compare(longArray0, 2, (int) (short) 1, longArray11, (int) (short) 100, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(2) > toIndex(1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertArrayEquals(longArray0, new long[] {});
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertArrayEquals(longArray11, new long[] { 10L, 0L, 100L, 52L });
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertArrayEquals(longArray12, new long[] {});
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test427");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        int int71 = charArrayList57.size();
        java.util.ArrayList<char[]> charArrayList72 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList73 = charArrayList72.reversed();
        charArrayList72.clear();
        java.lang.Object[] objArray75 = charArrayList72.toArray();
        int int76 = java.util.Collections.indexOfSubList((java.util.List<char[]>) charArrayList57, (java.util.List<char[]>) charArrayList72);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray78 = charArrayList57.get((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 32 out of bounds for length 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(charArrayList73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertArrayEquals(objArray75, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test428");
        byte[] byteArray2 = new byte[] { (byte) 0, (byte) 0 };
        java.lang.String str3 = java.util.Arrays.toString(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] { (byte) 0, (byte) 0 });
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[0, 0]" + "'", str3, "[0, 0]");
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test429");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        charArrayList0.clear();
        java.lang.Object[] objArray3 = charArrayList0.toArray();
        boolean boolean5 = charArrayList0.equals((java.lang.Object) false);
        char[] charArray7 = new char[] { ' ' };
        charArrayList0.addLast(charArray7);
        char[] charArray12 = new char[] { ' ', '#', 'a' };
        char[] charArray18 = new char[] { ' ', '#', '4', '#', 'a' };
        int int19 = java.util.Arrays.compare(charArray12, charArray18);
        char[] charArray23 = new char[] { ' ', '#', 'a' };
        char[] charArray29 = new char[] { ' ', '#', '4', '#', 'a' };
        int int30 = java.util.Arrays.compare(charArray23, charArray29);
        char[] charArray34 = new char[] { ' ', '#', 'a' };
        char[] charArray40 = new char[] { ' ', '#', '4', '#', 'a' };
        int int41 = java.util.Arrays.compare(charArray34, charArray40);
        char[] charArray45 = new char[] { ' ', '#', 'a' };
        char[] charArray51 = new char[] { ' ', '#', '4', '#', 'a' };
        int int52 = java.util.Arrays.compare(charArray45, charArray51);
        char[] charArray56 = new char[] { ' ', '#', 'a' };
        char[] charArray62 = new char[] { ' ', '#', '4', '#', 'a' };
        int int63 = java.util.Arrays.compare(charArray56, charArray62);
        java.util.List<char[]> charArrayList64 = java.util.List.of(charArray29, charArray34, charArray45, charArray62);
        char[][] charArray65 = new char[][] { charArray18, charArray34 };
        java.util.ArrayList<char[]> charArrayList66 = new java.util.ArrayList<char[]>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList66, charArray65);
        char[] charArray71 = new char[] { ' ', '#', 'a' };
        char[] charArray77 = new char[] { ' ', '#', '4', '#', 'a' };
        int int78 = java.util.Arrays.compare(charArray71, charArray77);
        boolean boolean79 = charArrayList66.contains((java.lang.Object) charArray71);
        charArrayList66.clear();
        java.util.Collections.copy((java.util.List<char[]>) charArrayList0, (java.util.List<char[]>) charArrayList66);
        char[] charArray82 = charArrayList0.removeFirst();
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertArrayEquals(objArray3, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertArrayEquals(charArray7, new char[] { ' ' });
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertArrayEquals(charArray12, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertArrayEquals(charArray18, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 45 + "'", int19 == 45);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertArrayEquals(charArray23, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertArrayEquals(charArray29, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 45 + "'", int30 == 45);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertArrayEquals(charArray34, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertArrayEquals(charArray40, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 45 + "'", int41 == 45);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertArrayEquals(charArray45, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertArrayEquals(charArray51, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 45 + "'", int52 == 45);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertArrayEquals(charArray56, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 45 + "'", int63 == 45);
        org.junit.Assert.assertNotNull(charArrayList64);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertArrayEquals(charArray71, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertArrayEquals(charArray77, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 45 + "'", int78 == 45);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(charArray82);
        org.junit.Assert.assertArrayEquals(charArray82, new char[] { ' ' });
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test430");
        short[] shortArray6 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray9 = java.util.Arrays.copyOfRange(shortArray6, 0, (int) ' ');
        java.util.Arrays.parallelSort(shortArray9);
        short[] shortArray14 = new short[] { (byte) 1, (byte) 1, (short) 0 };
        int int15 = java.util.Arrays.compare(shortArray9, shortArray14);
        short[] shortArray21 = new short[] { (byte) 0, (short) 0, (byte) 1 };
        short[] shortArray24 = java.util.Arrays.copyOfRange(shortArray21, (int) (byte) 1, 5);
        // The following exception was thrown during execution in test generation
        try {
            int int27 = java.util.Arrays.compare(shortArray9, (int) (byte) -1, 2, shortArray24, 10, 45);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertArrayEquals(shortArray6, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertArrayEquals(shortArray14, new short[] { (short) 1, (short) 1, (short) 0 });
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-2) + "'", int15 == (-2));
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertArrayEquals(shortArray21, new short[] { (short) 0, (short) 0, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertArrayEquals(shortArray24, new short[] { (short) 0, (short) 1, (short) 0, (short) 0 });
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test431");
        java.util.stream.DoubleStream[] doubleStreamArray0 = new java.util.stream.DoubleStream[] {};
        java.util.stream.DoubleStream[] doubleStreamArray2 = java.util.Arrays.copyOf(doubleStreamArray0, 10);
        org.junit.Assert.assertNotNull(doubleStreamArray0);
        org.junit.Assert.assertArrayEquals(doubleStreamArray0, new java.util.stream.DoubleStream[] {});
        org.junit.Assert.assertNotNull(doubleStreamArray2);
        org.junit.Assert.assertArrayEquals(doubleStreamArray2, new java.util.stream.DoubleStream[] { null, null, null, null, null, null, null, null, null, null });
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test432");
        java.util.Iterator<java.util.AbstractList<char[]>> charArrayListItor0 = java.util.Collections.emptyIterator();
        org.junit.Assert.assertNotNull(charArrayListItor0);
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test433");
        boolean[] booleanArray4 = new boolean[] { false, false, true, true };
        boolean[] booleanArray7 = new boolean[] { true, false };
        int int8 = java.util.Arrays.mismatch(booleanArray4, booleanArray7);
        boolean[] booleanArray15 = new boolean[] { true, false, true, true, false, true };
        boolean[] booleanArray21 = new boolean[] { false, false, false, false, true };
        boolean[] booleanArray24 = new boolean[] { false, true };
        boolean[] booleanArray29 = new boolean[] { false, false, true, true };
        boolean[] booleanArray32 = new boolean[] { true, false };
        int int33 = java.util.Arrays.mismatch(booleanArray29, booleanArray32);
        boolean[] booleanArray38 = new boolean[] { false, false, true, true };
        boolean[] booleanArray41 = new boolean[] { true, false };
        int int42 = java.util.Arrays.mismatch(booleanArray38, booleanArray41);
        boolean[] booleanArray47 = new boolean[] { false, false, true, true };
        boolean[] booleanArray50 = new boolean[] { true, false };
        int int51 = java.util.Arrays.mismatch(booleanArray47, booleanArray50);
        boolean[] booleanArray56 = new boolean[] { false, false, true, true };
        boolean[] booleanArray59 = new boolean[] { true, false };
        int int60 = java.util.Arrays.mismatch(booleanArray56, booleanArray59);
        java.util.List<boolean[]> booleanArrayList61 = java.util.List.of(booleanArray4, booleanArray15, booleanArray21, booleanArray24, booleanArray29, booleanArray38, booleanArray47, booleanArray56);
        java.util.Arrays.fill(booleanArray24, 1, 2, false);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.fill(booleanArray24, (-90), 10, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -90");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray4);
        assertBooleanArrayEquals(booleanArray4, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray7);
        assertBooleanArrayEquals(booleanArray7, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(booleanArray15);
        assertBooleanArrayEquals(booleanArray15, new boolean[] { true, false, true, true, false, true });
        org.junit.Assert.assertNotNull(booleanArray21);
        assertBooleanArrayEquals(booleanArray21, new boolean[] { false, false, false, false, true });
        org.junit.Assert.assertNotNull(booleanArray24);
        assertBooleanArrayEquals(booleanArray24, new boolean[] { false, false });
        org.junit.Assert.assertNotNull(booleanArray29);
        assertBooleanArrayEquals(booleanArray29, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray32);
        assertBooleanArrayEquals(booleanArray32, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(booleanArray38);
        assertBooleanArrayEquals(booleanArray38, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray41);
        assertBooleanArrayEquals(booleanArray41, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(booleanArray47);
        assertBooleanArrayEquals(booleanArray47, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray50);
        assertBooleanArrayEquals(booleanArray50, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(booleanArray56);
        assertBooleanArrayEquals(booleanArray56, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray59);
        assertBooleanArrayEquals(booleanArray59, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(booleanArrayList61);
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test434");
        float[] floatArray6 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int8 = java.util.Arrays.binarySearch(floatArray6, (float) (short) 1);
        java.util.Arrays.sort(floatArray6);
        java.util.Arrays.sort(floatArray6);
        java.lang.String str11 = java.util.Arrays.toString(floatArray6);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertArrayEquals(floatArray6, new float[] { (-1.0f), 0.0f, 0.0f, 1.0f, 1.0f, 97.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[-1.0, 0.0, 0.0, 1.0, 1.0, 97.0]" + "'", str11, "[-1.0, 0.0, 0.0, 1.0, 1.0, 97.0]");
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test435");
        java.util.Set<int[]> intArraySet0 = java.util.Collections.emptySet();
        org.junit.Assert.assertNotNull(intArraySet0);
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test436");
        java.util.NavigableSet<byte[]> byteArraySet0 = java.util.Collections.emptyNavigableSet();
        java.util.NavigableSet<byte[]> byteArraySet1 = java.util.Collections.unmodifiableNavigableSet(byteArraySet0);
        java.util.SortedSet<byte[]> byteArraySet2 = java.util.Collections.synchronizedSortedSet((java.util.SortedSet<byte[]>) byteArraySet1);
        java.util.NavigableSet<byte[]> byteArraySet3 = java.util.Collections.unmodifiableNavigableSet(byteArraySet1);
        java.util.SortedSet<byte[]> byteArraySet4 = java.util.Collections.unmodifiableSortedSet((java.util.SortedSet<byte[]>) byteArraySet3);
        java.lang.Class<byte[]> byteArrayClass5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedSet<byte[]> byteArraySet6 = java.util.Collections.checkedSortedSet((java.util.SortedSet<byte[]>) byteArraySet3, byteArrayClass5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: type");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArraySet0);
        org.junit.Assert.assertNotNull(byteArraySet1);
        org.junit.Assert.assertNotNull(byteArraySet2);
        org.junit.Assert.assertNotNull(byteArraySet3);
        org.junit.Assert.assertNotNull(byteArraySet4);
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test437");
        double[] doubleArray1 = new double[] { 1 };
        java.util.Arrays.fill(doubleArray1, (double) 6);
        double[] doubleArray5 = java.util.Arrays.copyOf(doubleArray1, 100);
        java.util.function.IntToDoubleFunction intToDoubleFunction6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSetAll(doubleArray5, intToDoubleFunction6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertArrayEquals(doubleArray1, new double[] { 6.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test438");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.lang.String[] strArray6 = new java.lang.String[] { "", "[hi!, [0.0, 10.0, 100.0], [0.0, 10.0, 100.0], hi!]", "", "" };
        int int7 = java.util.Arrays.compare(strArray1, strArray6);
        java.util.Arrays.parallelSort(strArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(strArray6, 65535, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(65535) > toIndex(-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertArrayEquals(strArray1, new java.lang.String[] { "" });
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertArrayEquals(strArray6, new java.lang.String[] { "", "", "", "[hi!, [0.0, 10.0, 100.0], [0.0, 10.0, 100.0], hi!]" });
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test439");
        double[] doubleArray4 = new double[] { 0, (-1.0f), '#', (byte) 100 };
        double[] doubleArray11 = new double[] { (byte) 100, (-1.0d), 100.0f, (byte) -1, (short) -1, 1 };
        int int12 = java.util.Arrays.compare(doubleArray4, doubleArray11);
        java.util.stream.DoubleStream doubleStream13 = java.util.Arrays.stream(doubleArray4);
        java.util.Arrays.parallelSort(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.fill(doubleArray4, (int) (byte) 100, 5, 1.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(100) > toIndex(5)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { (-1.0d), 0.0d, 35.0d, 100.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 100.0d, (-1.0d), 100.0d, (-1.0d), (-1.0d), 1.0d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleStream13);
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test440");
        double[] doubleArray4 = new double[] { 0, (-1.0f), '#', (byte) 100 };
        double[] doubleArray11 = new double[] { (byte) 100, (-1.0d), 100.0f, (byte) -1, (short) -1, 1 };
        int int12 = java.util.Arrays.compare(doubleArray4, doubleArray11);
        java.util.stream.DoubleStream doubleStream13 = java.util.Arrays.stream(doubleArray4);
        java.util.Spliterator.OfDouble ofDouble14 = java.util.Arrays.spliterator(doubleArray4);
        java.util.Arrays.sort(doubleArray4);
        java.util.function.DoubleBinaryOperator doubleBinaryOperator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelPrefix(doubleArray4, doubleBinaryOperator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertArrayEquals(doubleArray4, new double[] { (-1.0d), 0.0d, 35.0d, 100.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertArrayEquals(doubleArray11, new double[] { 100.0d, (-1.0d), 100.0d, (-1.0d), (-1.0d), 1.0d }, 1.0E-15);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertNotNull(ofDouble14);
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test441");
        long[] longArray2 = new long[] { (short) 0, (byte) 1 };
        java.lang.String str3 = java.util.Arrays.toString(longArray2);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertArrayEquals(longArray2, new long[] { 0L, 1L });
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[0, 1]" + "'", str3, "[0, 1]");
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test442");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray7 = new byte[] {};
        int int8 = java.util.Arrays.compareUnsigned(byteArray6, byteArray7);
        byte[] byteArray9 = new byte[] {};
        int int10 = java.util.Arrays.mismatch(byteArray7, byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray18 = new byte[] {};
        int int19 = java.util.Arrays.compareUnsigned(byteArray17, byteArray18);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 };
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray33 = new byte[] {};
        int int34 = java.util.Arrays.compareUnsigned(byteArray32, byteArray33);
        byte[] byteArray35 = new byte[] {};
        int int36 = java.util.Arrays.mismatch(byteArray33, byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray44 = new byte[] {};
        int int45 = java.util.Arrays.compareUnsigned(byteArray43, byteArray44);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray53 = new byte[] {};
        int int54 = java.util.Arrays.compareUnsigned(byteArray52, byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray62 = new byte[] {};
        int int63 = java.util.Arrays.compareUnsigned(byteArray61, byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray71 = new byte[] {};
        int int72 = java.util.Arrays.compareUnsigned(byteArray70, byteArray71);
        byte[] byteArray73 = new byte[] {};
        int int74 = java.util.Arrays.mismatch(byteArray71, byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray82 = new byte[] {};
        int int83 = java.util.Arrays.compareUnsigned(byteArray81, byteArray82);
        byte[] byteArray84 = new byte[] {};
        int int85 = java.util.Arrays.mismatch(byteArray82, byteArray84);
        java.util.List<byte[]> byteArrayList86 = java.util.List.of(byteArray9, byteArray17, byteArray25, byteArray35, byteArray44, byteArray52, byteArray62, byteArray73, byteArray84);
        java.util.Arrays.parallelSort(byteArray73);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(byteArray73, 9, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] {});
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertArrayEquals(byteArray25, new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertArrayEquals(byteArray32, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertArrayEquals(byteArray33, new byte[] {});
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6 + "'", int34 == 6);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertArrayEquals(byteArray35, new byte[] {});
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertArrayEquals(byteArray43, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertArrayEquals(byteArray44, new byte[] {});
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 6 + "'", int45 == 6);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertArrayEquals(byteArray52, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertArrayEquals(byteArray53, new byte[] {});
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertArrayEquals(byteArray61, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertArrayEquals(byteArray62, new byte[] {});
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertArrayEquals(byteArray70, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertArrayEquals(byteArray71, new byte[] {});
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 6 + "'", int72 == 6);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertArrayEquals(byteArray73, new byte[] {});
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertArrayEquals(byteArray81, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertArrayEquals(byteArray82, new byte[] {});
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 6 + "'", int83 == 6);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertArrayEquals(byteArray84, new byte[] {});
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(byteArrayList86);
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test443");
        double[] doubleArray1 = new double[] { (-1.0d) };
        double[] doubleArray4 = java.util.Arrays.copyOfRange(doubleArray1, (int) (short) 0, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.sort(doubleArray1, (-3), (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertArrayEquals(doubleArray1, new double[] { (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray4);
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test444");
        short[] shortArray0 = new short[] {};
        java.util.Arrays.sort(shortArray0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.sort(shortArray0, 45, (-2));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(45) > toIndex(-2)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertArrayEquals(shortArray0, new short[] {});
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test445");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        int int71 = charArrayList57.size();
        java.util.ArrayList<char[]> charArrayList72 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList73 = charArrayList72.reversed();
        charArrayList72.clear();
        java.lang.Object[] objArray75 = charArrayList72.toArray();
        int int76 = java.util.Collections.indexOfSubList((java.util.List<char[]>) charArrayList57, (java.util.List<char[]>) charArrayList72);
        java.util.Iterator<char[]> charArrayItor77 = charArrayList72.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<char[]> charArrayItor79 = charArrayList72.listIterator((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(charArrayList73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertArrayEquals(objArray75, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(charArrayItor77);
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test446");
        char[] charArray6 = new char[] { 'a', '#', '#', 'a', '4', ' ' };
        char[] charArray12 = new char[] { ' ', '#', 'a' };
        char[] charArray18 = new char[] { ' ', '#', '4', '#', 'a' };
        int int19 = java.util.Arrays.compare(charArray12, charArray18);
        char[] charArray23 = new char[] { ' ', '#', 'a' };
        char[] charArray29 = new char[] { ' ', '#', '4', '#', 'a' };
        int int30 = java.util.Arrays.compare(charArray23, charArray29);
        char[] charArray34 = new char[] { ' ', '#', 'a' };
        char[] charArray40 = new char[] { ' ', '#', '4', '#', 'a' };
        int int41 = java.util.Arrays.compare(charArray34, charArray40);
        char[] charArray45 = new char[] { ' ', '#', 'a' };
        char[] charArray51 = new char[] { ' ', '#', '4', '#', 'a' };
        int int52 = java.util.Arrays.compare(charArray45, charArray51);
        java.util.List<char[]> charArrayList53 = java.util.List.of(charArray18, charArray23, charArray34, charArray51);
        // The following exception was thrown during execution in test generation
        try {
            int int56 = java.util.Arrays.compare(charArray6, (int) (short) 10, (-1), charArray51, (int) (byte) 1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(10) > toIndex(-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertArrayEquals(charArray6, new char[] { 'a', '#', '#', 'a', '4', ' ' });
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertArrayEquals(charArray12, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertArrayEquals(charArray18, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 45 + "'", int19 == 45);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertArrayEquals(charArray23, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertArrayEquals(charArray29, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 45 + "'", int30 == 45);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertArrayEquals(charArray34, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertArrayEquals(charArray40, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 45 + "'", int41 == 45);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertArrayEquals(charArray45, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertArrayEquals(charArray51, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 45 + "'", int52 == 45);
        org.junit.Assert.assertNotNull(charArrayList53);
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test447");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray7 = new byte[] {};
        int int8 = java.util.Arrays.compareUnsigned(byteArray6, byteArray7);
        byte[] byteArray9 = new byte[] {};
        int int10 = java.util.Arrays.mismatch(byteArray7, byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray18 = new byte[] {};
        int int19 = java.util.Arrays.compareUnsigned(byteArray17, byteArray18);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 };
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray33 = new byte[] {};
        int int34 = java.util.Arrays.compareUnsigned(byteArray32, byteArray33);
        byte[] byteArray35 = new byte[] {};
        int int36 = java.util.Arrays.mismatch(byteArray33, byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray44 = new byte[] {};
        int int45 = java.util.Arrays.compareUnsigned(byteArray43, byteArray44);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray53 = new byte[] {};
        int int54 = java.util.Arrays.compareUnsigned(byteArray52, byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray62 = new byte[] {};
        int int63 = java.util.Arrays.compareUnsigned(byteArray61, byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray71 = new byte[] {};
        int int72 = java.util.Arrays.compareUnsigned(byteArray70, byteArray71);
        byte[] byteArray73 = new byte[] {};
        int int74 = java.util.Arrays.mismatch(byteArray71, byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray82 = new byte[] {};
        int int83 = java.util.Arrays.compareUnsigned(byteArray81, byteArray82);
        byte[] byteArray84 = new byte[] {};
        int int85 = java.util.Arrays.mismatch(byteArray82, byteArray84);
        java.util.List<byte[]> byteArrayList86 = java.util.List.of(byteArray9, byteArray17, byteArray25, byteArray35, byteArray44, byteArray52, byteArray62, byteArray73, byteArray84);
        java.util.Arrays.fill(byteArray62, (byte) 0);
        java.util.Arrays.fill(byteArray62, (byte) -1);
        java.lang.String str91 = java.util.Arrays.toString(byteArray62);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] {});
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertArrayEquals(byteArray25, new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertArrayEquals(byteArray32, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertArrayEquals(byteArray33, new byte[] {});
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6 + "'", int34 == 6);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertArrayEquals(byteArray35, new byte[] {});
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertArrayEquals(byteArray43, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertArrayEquals(byteArray44, new byte[] {});
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 6 + "'", int45 == 6);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertArrayEquals(byteArray52, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertArrayEquals(byteArray53, new byte[] {});
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertArrayEquals(byteArray61, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertArrayEquals(byteArray62, new byte[] {});
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertArrayEquals(byteArray70, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertArrayEquals(byteArray71, new byte[] {});
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 6 + "'", int72 == 6);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertArrayEquals(byteArray73, new byte[] {});
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertArrayEquals(byteArray81, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertArrayEquals(byteArray82, new byte[] {});
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 6 + "'", int83 == 6);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertArrayEquals(byteArray84, new byte[] {});
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(byteArrayList86);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "[]" + "'", str91, "[]");
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test448");
        long[] longArray0 = new long[] {};
        java.util.Arrays.sort(longArray0, 0, (int) (short) 0);
        long[] longArray4 = new long[] {};
        java.util.Arrays.sort(longArray4, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray4);
        int int9 = java.util.Arrays.compare(longArray0, longArray4);
        long[] longArray10 = new long[] {};
        java.util.Arrays.sort(longArray10, 0, (int) (short) 0);
        long[] longArray14 = new long[] {};
        java.util.Arrays.sort(longArray14, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray14);
        int int19 = java.util.Arrays.compare(longArray10, longArray14);
        int int20 = java.util.Arrays.compare(longArray0, longArray10);
        java.util.Arrays.parallelSort(longArray0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream24 = java.util.Arrays.stream(longArray0, 31, (-2060931702));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: origin(31) > fence(-2060931702)");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertArrayEquals(longArray0, new long[] {});
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertArrayEquals(longArray4, new long[] {});
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertArrayEquals(longArray10, new long[] {});
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertArrayEquals(longArray14, new long[] {});
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test449");
        double[] doubleArray1 = new double[] { (-1.0d) };
        double[] doubleArray4 = java.util.Arrays.copyOfRange(doubleArray1, (int) (short) 0, (int) 'a');
        java.util.Arrays.parallelSort(doubleArray4);
        double[] doubleArray9 = new double[] { (-1.0d) };
        double[] doubleArray12 = java.util.Arrays.copyOfRange(doubleArray9, (int) (short) 0, (int) 'a');
        double[] doubleArray15 = java.util.Arrays.copyOfRange(doubleArray9, (int) (byte) 0, 7);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = java.util.Arrays.mismatch(doubleArray4, (-1947244222), 0, doubleArray9, 5, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -1947244222");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertArrayEquals(doubleArray1, new double[] { (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertArrayEquals(doubleArray9, new double[] { (-1.0d) }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertArrayEquals(doubleArray15, new double[] { (-1.0d), 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d }, 1.0E-15);
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test450");
        float[] floatArray4 = new float[] { ' ', (-1947244222), 1, 100L };
        java.util.Arrays.parallelSort(floatArray4);
        float[] floatArray6 = null;
        boolean boolean7 = java.util.Arrays.equals(floatArray4, floatArray6);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertArrayEquals(floatArray4, new float[] { (-1.9472442E9f), 1.0f, 32.0f, 100.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test451");
        int[] intArray5 = new int[] { (byte) 1, 5, (short) 0, (-50), 4 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator.OfInt ofInt8 = java.util.Arrays.spliterator(intArray5, (-2060931702), (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -2060931702");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { 1, 5, 0, (-50), 4 });
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test452");
        java.util.Iterator<long[][]> longArrayItor0 = java.util.Collections.emptyIterator();
        org.junit.Assert.assertNotNull(longArrayItor0);
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test453");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        charArrayList57.trimToSize();
        charArrayList57.clear();
        java.lang.Object[] objArray73 = charArrayList57.toArray();
        charArrayList57.trimToSize();
        java.lang.Object obj75 = charArrayList57.clone();
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertArrayEquals(objArray73, new java.lang.Object[] {});
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "[]");
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test454");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        java.lang.Object[] objArray71 = charArrayList57.toArray();
        java.lang.Object obj72 = charArrayList57.clone();
        java.lang.Object[] objArray73 = charArrayList57.toArray();
        long[] longArray74 = new long[] {};
        java.util.Arrays.sort(longArray74, 0, (int) (short) 0);
        long[] longArray78 = new long[] {};
        java.util.Arrays.sort(longArray78, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray78);
        int int83 = java.util.Arrays.compare(longArray74, longArray78);
        long[] longArray84 = new long[] {};
        java.util.Arrays.sort(longArray84, 0, (int) (short) 0);
        long[] longArray88 = new long[] {};
        java.util.Arrays.sort(longArray88, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray88);
        int int93 = java.util.Arrays.compare(longArray84, longArray88);
        int int94 = java.util.Arrays.compare(longArray74, longArray84);
        boolean boolean95 = charArrayList57.contains((java.lang.Object) longArray74);
        java.util.function.LongBinaryOperator longBinaryOperator98 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelPrefix(longArray74, (-1947244222), 6, longBinaryOperator98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[[ , #, 4, #, a], [ , #, a]]");
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[[ , #, 4, #, a], [ , #, a]]");
        org.junit.Assert.assertNotNull(longArray74);
        org.junit.Assert.assertArrayEquals(longArray74, new long[] {});
        org.junit.Assert.assertNotNull(longArray78);
        org.junit.Assert.assertArrayEquals(longArray78, new long[] {});
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(longArray84);
        org.junit.Assert.assertArrayEquals(longArray84, new long[] {});
        org.junit.Assert.assertNotNull(longArray88);
        org.junit.Assert.assertArrayEquals(longArray88, new long[] {});
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test455");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray73 = java.util.Arrays.copyOfRange(charArray62, (int) '4', 9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: 52 > 9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test456");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray7 = new byte[] {};
        int int8 = java.util.Arrays.compareUnsigned(byteArray6, byteArray7);
        java.util.Arrays.parallelSort(byteArray6);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray11 = java.util.Arrays.copyOf(byteArray6, (-6));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -6");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) -1, (byte) -1, (byte) -1, (byte) 0, (byte) 100, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test457");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray7 = new byte[] {};
        int int8 = java.util.Arrays.compareUnsigned(byteArray6, byteArray7);
        byte[] byteArray9 = new byte[] {};
        int int10 = java.util.Arrays.mismatch(byteArray7, byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray18 = new byte[] {};
        int int19 = java.util.Arrays.compareUnsigned(byteArray17, byteArray18);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 };
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray33 = new byte[] {};
        int int34 = java.util.Arrays.compareUnsigned(byteArray32, byteArray33);
        byte[] byteArray35 = new byte[] {};
        int int36 = java.util.Arrays.mismatch(byteArray33, byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray44 = new byte[] {};
        int int45 = java.util.Arrays.compareUnsigned(byteArray43, byteArray44);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray53 = new byte[] {};
        int int54 = java.util.Arrays.compareUnsigned(byteArray52, byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray62 = new byte[] {};
        int int63 = java.util.Arrays.compareUnsigned(byteArray61, byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray71 = new byte[] {};
        int int72 = java.util.Arrays.compareUnsigned(byteArray70, byteArray71);
        byte[] byteArray73 = new byte[] {};
        int int74 = java.util.Arrays.mismatch(byteArray71, byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray82 = new byte[] {};
        int int83 = java.util.Arrays.compareUnsigned(byteArray81, byteArray82);
        byte[] byteArray84 = new byte[] {};
        int int85 = java.util.Arrays.mismatch(byteArray82, byteArray84);
        java.util.List<byte[]> byteArrayList86 = java.util.List.of(byteArray9, byteArray17, byteArray25, byteArray35, byteArray44, byteArray52, byteArray62, byteArray73, byteArray84);
        int int88 = java.util.Arrays.binarySearch(byteArray84, (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(byteArray84, 1, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] {});
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertArrayEquals(byteArray25, new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertArrayEquals(byteArray32, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertArrayEquals(byteArray33, new byte[] {});
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6 + "'", int34 == 6);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertArrayEquals(byteArray35, new byte[] {});
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertArrayEquals(byteArray43, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertArrayEquals(byteArray44, new byte[] {});
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 6 + "'", int45 == 6);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertArrayEquals(byteArray52, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertArrayEquals(byteArray53, new byte[] {});
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertArrayEquals(byteArray61, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertArrayEquals(byteArray62, new byte[] {});
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertArrayEquals(byteArray70, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertArrayEquals(byteArray71, new byte[] {});
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 6 + "'", int72 == 6);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertArrayEquals(byteArray73, new byte[] {});
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertArrayEquals(byteArray81, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertArrayEquals(byteArray82, new byte[] {});
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 6 + "'", int83 == 6);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertArrayEquals(byteArray84, new byte[] {});
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(byteArrayList86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test458");
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 0, (byte) -1 };
        java.util.Arrays.parallelSort(byteArray3);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertArrayEquals(byteArray3, new byte[] { (byte) -1, (byte) 0, (byte) 100 });
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test459");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        charArrayList0.clear();
        java.lang.Object[] objArray3 = charArrayList0.toArray();
        boolean boolean5 = charArrayList0.equals((java.lang.Object) false);
        char[] charArray7 = new char[] { ' ' };
        charArrayList0.addLast(charArray7);
        char[] charArray12 = new char[] { ' ', '#', 'a' };
        char[] charArray18 = new char[] { ' ', '#', '4', '#', 'a' };
        int int19 = java.util.Arrays.compare(charArray12, charArray18);
        char[] charArray23 = new char[] { ' ', '#', 'a' };
        char[] charArray29 = new char[] { ' ', '#', '4', '#', 'a' };
        int int30 = java.util.Arrays.compare(charArray23, charArray29);
        char[] charArray34 = new char[] { ' ', '#', 'a' };
        char[] charArray40 = new char[] { ' ', '#', '4', '#', 'a' };
        int int41 = java.util.Arrays.compare(charArray34, charArray40);
        char[] charArray45 = new char[] { ' ', '#', 'a' };
        char[] charArray51 = new char[] { ' ', '#', '4', '#', 'a' };
        int int52 = java.util.Arrays.compare(charArray45, charArray51);
        char[] charArray56 = new char[] { ' ', '#', 'a' };
        char[] charArray62 = new char[] { ' ', '#', '4', '#', 'a' };
        int int63 = java.util.Arrays.compare(charArray56, charArray62);
        java.util.List<char[]> charArrayList64 = java.util.List.of(charArray29, charArray34, charArray45, charArray62);
        char[][] charArray65 = new char[][] { charArray18, charArray34 };
        java.util.ArrayList<char[]> charArrayList66 = new java.util.ArrayList<char[]>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList66, charArray65);
        char[] charArray71 = new char[] { ' ', '#', 'a' };
        char[] charArray77 = new char[] { ' ', '#', '4', '#', 'a' };
        int int78 = java.util.Arrays.compare(charArray71, charArray77);
        boolean boolean79 = charArrayList66.contains((java.lang.Object) charArray71);
        charArrayList66.clear();
        java.util.Collections.copy((java.util.List<char[]>) charArrayList0, (java.util.List<char[]>) charArrayList66);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray83 = charArrayList0.get((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index 10 out of bounds for length 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertArrayEquals(objArray3, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertArrayEquals(charArray7, new char[] { ' ' });
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertArrayEquals(charArray12, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertArrayEquals(charArray18, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 45 + "'", int19 == 45);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertArrayEquals(charArray23, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertArrayEquals(charArray29, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 45 + "'", int30 == 45);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertArrayEquals(charArray34, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertArrayEquals(charArray40, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 45 + "'", int41 == 45);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertArrayEquals(charArray45, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertArrayEquals(charArray51, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 45 + "'", int52 == 45);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertArrayEquals(charArray56, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 45 + "'", int63 == 45);
        org.junit.Assert.assertNotNull(charArrayList64);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertArrayEquals(charArray71, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertArrayEquals(charArray77, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 45 + "'", int78 == 45);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test460");
        int[] intArray5 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray5);
        int[] intArray12 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray12);
        java.util.Arrays.sort(intArray12);
        int int15 = java.util.Arrays.compareUnsigned(intArray5, intArray12);
        java.util.function.IntBinaryOperator intBinaryOperator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelPrefix(intArray5, intBinaryOperator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertArrayEquals(intArray12, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test461");
        boolean[] booleanArray4 = new boolean[] { false, false, true, true };
        boolean[] booleanArray7 = new boolean[] { true, false };
        int int8 = java.util.Arrays.mismatch(booleanArray4, booleanArray7);
        boolean[] booleanArray15 = new boolean[] { true, false, true, true, false, true };
        boolean[] booleanArray21 = new boolean[] { false, false, false, false, true };
        boolean[] booleanArray24 = new boolean[] { false, true };
        boolean[] booleanArray29 = new boolean[] { false, false, true, true };
        boolean[] booleanArray32 = new boolean[] { true, false };
        int int33 = java.util.Arrays.mismatch(booleanArray29, booleanArray32);
        boolean[] booleanArray38 = new boolean[] { false, false, true, true };
        boolean[] booleanArray41 = new boolean[] { true, false };
        int int42 = java.util.Arrays.mismatch(booleanArray38, booleanArray41);
        boolean[] booleanArray47 = new boolean[] { false, false, true, true };
        boolean[] booleanArray50 = new boolean[] { true, false };
        int int51 = java.util.Arrays.mismatch(booleanArray47, booleanArray50);
        boolean[] booleanArray56 = new boolean[] { false, false, true, true };
        boolean[] booleanArray59 = new boolean[] { true, false };
        int int60 = java.util.Arrays.mismatch(booleanArray56, booleanArray59);
        java.util.List<boolean[]> booleanArrayList61 = java.util.List.of(booleanArray4, booleanArray15, booleanArray21, booleanArray24, booleanArray29, booleanArray38, booleanArray47, booleanArray56);
        java.lang.String str62 = java.util.Arrays.toString(booleanArray24);
        org.junit.Assert.assertNotNull(booleanArray4);
        assertBooleanArrayEquals(booleanArray4, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray7);
        assertBooleanArrayEquals(booleanArray7, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(booleanArray15);
        assertBooleanArrayEquals(booleanArray15, new boolean[] { true, false, true, true, false, true });
        org.junit.Assert.assertNotNull(booleanArray21);
        assertBooleanArrayEquals(booleanArray21, new boolean[] { false, false, false, false, true });
        org.junit.Assert.assertNotNull(booleanArray24);
        assertBooleanArrayEquals(booleanArray24, new boolean[] { false, true });
        org.junit.Assert.assertNotNull(booleanArray29);
        assertBooleanArrayEquals(booleanArray29, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray32);
        assertBooleanArrayEquals(booleanArray32, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(booleanArray38);
        assertBooleanArrayEquals(booleanArray38, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray41);
        assertBooleanArrayEquals(booleanArray41, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(booleanArray47);
        assertBooleanArrayEquals(booleanArray47, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray50);
        assertBooleanArrayEquals(booleanArray50, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(booleanArray56);
        assertBooleanArrayEquals(booleanArray56, new boolean[] { false, false, true, true });
        org.junit.Assert.assertNotNull(booleanArray59);
        assertBooleanArrayEquals(booleanArray59, new boolean[] { true, false });
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(booleanArrayList61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[false, true]" + "'", str62, "[false, true]");
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test462");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        charArrayList0.clear();
        java.lang.Object[] objArray3 = charArrayList0.toArray();
        boolean boolean5 = charArrayList0.equals((java.lang.Object) false);
        char[] charArray7 = new char[] { ' ' };
        charArrayList0.addLast(charArray7);
        char[] charArray9 = charArrayList0.getLast();
        int int11 = java.util.Arrays.binarySearch(charArray9, 'a');
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray13 = java.util.Arrays.copyOf(charArray9, (-33));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: -33");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertArrayEquals(objArray3, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertArrayEquals(charArray7, new char[] { ' ' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ' });
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-2) + "'", int11 == (-2));
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test463");
        float[] floatArray3 = new float[] { 10, 1L, 100 };
        float[] floatArray5 = java.util.Arrays.copyOf(floatArray3, (int) (short) 1);
        float[] floatArray12 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int14 = java.util.Arrays.binarySearch(floatArray12, (float) (short) 1);
        java.util.Arrays.sort(floatArray12);
        int int16 = java.util.Arrays.mismatch(floatArray5, floatArray12);
        float[] floatArray22 = new float[] { 10, 1L, 100 };
        float[] floatArray24 = java.util.Arrays.copyOf(floatArray22, (int) (short) 1);
        float[] floatArray31 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int33 = java.util.Arrays.binarySearch(floatArray31, (float) (short) 1);
        java.util.Arrays.sort(floatArray31);
        int int35 = java.util.Arrays.mismatch(floatArray24, floatArray31);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = java.util.Arrays.equals(floatArray12, (int) '4', (int) (byte) -1, floatArray24, 9, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(52) > toIndex(-1)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertArrayEquals(floatArray3, new float[] { 10.0f, 1.0f, 100.0f }, (float) 1.0E-15);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertArrayEquals(floatArray5, new float[] { 10.0f }, (float) 1.0E-15);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertArrayEquals(floatArray12, new float[] { (-1.0f), 0.0f, 0.0f, 1.0f, 1.0f, 97.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertArrayEquals(floatArray22, new float[] { 10.0f, 1.0f, 100.0f }, (float) 1.0E-15);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertArrayEquals(floatArray24, new float[] { 10.0f }, (float) 1.0E-15);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertArrayEquals(floatArray31, new float[] { (-1.0f), 0.0f, 0.0f, 1.0f, 1.0f, 97.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test464");
        double[] doubleArray1 = new double[] { 1 };
        java.util.Arrays.fill(doubleArray1, (double) 6);
        double[] doubleArray5 = java.util.Arrays.copyOf(doubleArray1, 100);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray8 = java.util.Arrays.copyOfRange(doubleArray1, (int) (byte) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: arraycopy: source index -1 out of bounds for double[1]");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertArrayEquals(doubleArray1, new double[] { 6.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test465");
        long[] longArray0 = new long[] {};
        java.util.Arrays.sort(longArray0, 0, (int) (short) 0);
        long[] longArray4 = new long[] {};
        java.util.Arrays.sort(longArray4, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray4);
        int int9 = java.util.Arrays.compare(longArray0, longArray4);
        java.util.Spliterator.OfLong ofLong10 = java.util.Arrays.spliterator(longArray0);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertArrayEquals(longArray0, new long[] {});
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertArrayEquals(longArray4, new long[] {});
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(ofLong10);
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test466");
        java.util.List list0 = java.util.Collections.EMPTY_LIST;
        java.util.Collections.rotate((java.util.List<char[]>) list0, 5);
        int int3 = list0.size();
        java.lang.Integer[] intArray24 = new java.lang.Integer[] { (-33), (-50), 5, 9, 9, 2, 31, 0, 0, 5, (-33), 3, 31, (-1), 4, (-6), 7, (-33), 0, 6 };
        java.util.ArrayList<java.lang.Integer> intList25 = new java.util.ArrayList<java.lang.Integer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>) intList25, intArray24);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Integer> intList27 = suma.listas.digitos.SumaListasDigitos.sumaDosListasDeDigitos((java.util.List<java.lang.Integer>) list0, (java.util.List<java.lang.Integer>) intList25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: So?lo se permiten di?gitos entre 0 y 9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(list0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertArrayEquals(intArray24, new java.lang.Integer[] { (-33), (-50), 5, 9, 9, 2, 31, 0, 0, 5, (-33), 3, 31, (-1), 4, (-6), 7, (-33), 0, 6 });
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test467");
        long[] longArray4 = new long[] { (short) 10, (byte) 0, 100L, '4' };
        long[] longArray5 = new long[] {};
        java.util.Arrays.sort(longArray5, 0, (int) (short) 0);
        int int9 = java.util.Arrays.compareUnsigned(longArray4, longArray5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(longArray5, (-33), 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -33");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertArrayEquals(longArray4, new long[] { 10L, 0L, 100L, 52L });
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertArrayEquals(longArray5, new long[] {});
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test468");
        java.util.Comparator<java.util.SortedSet<byte[]>[]> byteArraySetArrayComparator0 = java.util.Collections.reverseOrder();
        org.junit.Assert.assertNotNull(byteArraySetArrayComparator0);
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test469");
        double[] doubleArray1 = new double[] { 1 };
        java.util.Arrays.fill(doubleArray1, (double) 6);
        double[] doubleArray5 = java.util.Arrays.copyOf(doubleArray1, 100);
        double[] doubleArray7 = java.util.Arrays.copyOf(doubleArray5, 10);
        java.lang.String str8 = java.util.Arrays.toString(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertArrayEquals(doubleArray1, new double[] { 6.0d }, 1.0E-15);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertArrayEquals(doubleArray7, new double[] { 6.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d }, 1.0E-15);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]" + "'", str8, "[6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test470");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray7 = new byte[] {};
        int int8 = java.util.Arrays.compareUnsigned(byteArray6, byteArray7);
        java.util.Arrays.parallelSort(byteArray6);
        byte[] byteArray11 = java.util.Arrays.copyOf(byteArray6, (int) ' ');
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) -1, (byte) -1, (byte) -1, (byte) 0, (byte) 100, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(byteArray11);
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test471");
        java.lang.reflect.Type[] typeArray0 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray2 = java.util.Arrays.copyOf(typeArray0, (int) (byte) 0);
        char[] charArray6 = new char[] { ' ', '#', 'a' };
        char[] charArray12 = new char[] { ' ', '#', '4', '#', 'a' };
        int int13 = java.util.Arrays.compare(charArray6, charArray12);
        char[] charArray17 = new char[] { ' ', '#', 'a' };
        char[] charArray23 = new char[] { ' ', '#', '4', '#', 'a' };
        int int24 = java.util.Arrays.compare(charArray17, charArray23);
        char[] charArray28 = new char[] { ' ', '#', 'a' };
        char[] charArray34 = new char[] { ' ', '#', '4', '#', 'a' };
        int int35 = java.util.Arrays.compare(charArray28, charArray34);
        char[] charArray39 = new char[] { ' ', '#', 'a' };
        char[] charArray45 = new char[] { ' ', '#', '4', '#', 'a' };
        int int46 = java.util.Arrays.compare(charArray39, charArray45);
        char[] charArray50 = new char[] { ' ', '#', 'a' };
        char[] charArray56 = new char[] { ' ', '#', '4', '#', 'a' };
        int int57 = java.util.Arrays.compare(charArray50, charArray56);
        java.util.List<char[]> charArrayList58 = java.util.List.of(charArray23, charArray28, charArray39, charArray56);
        char[][] charArray59 = new char[][] { charArray12, charArray28 };
        java.util.ArrayList<char[]> charArrayList60 = new java.util.ArrayList<char[]>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList60, charArray59);
        char[] charArray65 = new char[] { ' ', '#', 'a' };
        char[] charArray71 = new char[] { ' ', '#', '4', '#', 'a' };
        int int72 = java.util.Arrays.compare(charArray65, charArray71);
        boolean boolean73 = charArrayList60.contains((java.lang.Object) charArray65);
        java.lang.Object[] objArray74 = charArrayList60.toArray();
        java.lang.Object obj75 = charArrayList60.clone();
        char[] charArray76 = charArrayList60.removeLast();
        boolean boolean77 = java.util.Objects.deepEquals((java.lang.Object) typeArray0, (java.lang.Object) charArrayList60);
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertArrayEquals(typeArray0, new java.lang.reflect.Type[] {});
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertArrayEquals(typeArray2, new java.lang.reflect.Type[] {});
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertArrayEquals(charArray6, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertArrayEquals(charArray12, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 45 + "'", int13 == 45);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertArrayEquals(charArray17, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertArrayEquals(charArray23, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 45 + "'", int24 == 45);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertArrayEquals(charArray28, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertArrayEquals(charArray34, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 45 + "'", int35 == 45);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertArrayEquals(charArray39, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertArrayEquals(charArray45, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 45 + "'", int46 == 45);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertArrayEquals(charArray50, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertArrayEquals(charArray56, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 45 + "'", int57 == 45);
        org.junit.Assert.assertNotNull(charArrayList58);
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertArrayEquals(charArray65, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertArrayEquals(charArray71, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 45 + "'", int72 == 45);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[[ , #, 4, #, a], [ , #, a]]");
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertArrayEquals(charArray76, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test472");
        java.lang.Object obj0 = null;
        java.lang.String str1 = java.util.Objects.toString(obj0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "null" + "'", str1, "null");
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test473");
        int[] intArray5 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray5);
        int[] intArray12 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray12);
        java.util.Arrays.sort(intArray12);
        int int15 = java.util.Arrays.compareUnsigned(intArray5, intArray12);
        java.util.Spliterator.OfInt ofInt16 = java.util.Arrays.spliterator(intArray12);
        java.util.Arrays.sort(intArray12);
        java.util.Arrays.fill(intArray12, 10);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertArrayEquals(intArray12, new int[] { 10, 10, 10, 10, 10 });
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(ofInt16);
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test474");
        float[] floatArray6 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int8 = java.util.Arrays.binarySearch(floatArray6, (float) (short) 1);
        java.util.Arrays.sort(floatArray6);
        java.lang.String str10 = java.util.Arrays.toString(floatArray6);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertArrayEquals(floatArray6, new float[] { (-1.0f), 0.0f, 0.0f, 1.0f, 1.0f, 97.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[-1.0, 0.0, 0.0, 1.0, 1.0, 97.0]" + "'", str10, "[-1.0, 0.0, 0.0, 1.0, 1.0, 97.0]");
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test475");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        java.util.ListIterator<char[]> charArrayItor71 = charArrayList57.listIterator();
        char[] charArray73 = charArrayList57.get((int) (byte) 0);
        java.util.Arrays.parallelSort(charArray73);
        java.util.Arrays.sort(charArray73);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '#', '4', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(charArrayItor71);
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertArrayEquals(charArray73, new char[] { ' ', '#', '#', '4', 'a' });
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test476");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        charArrayList57.trimToSize();
        int int73 = charArrayList57.indexOf((java.lang.Object) 1.0d);
        char[] charArray78 = new char[] { ' ', '#', 'a' };
        char[] charArray84 = new char[] { ' ', '#', '4', '#', 'a' };
        int int85 = java.util.Arrays.compare(charArray78, charArray84);
        char[] charArray86 = charArrayList57.set(0, charArray84);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(charArray84, 5, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertArrayEquals(charArray78, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray84);
        org.junit.Assert.assertArrayEquals(charArray84, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 45 + "'", int85 == 45);
        org.junit.Assert.assertNotNull(charArray86);
        org.junit.Assert.assertArrayEquals(charArray86, new char[] { ' ', '#', '4', '#', 'a' });
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test477");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        java.util.List<char[]> charArrayList44 = java.util.List.of(charArray9, charArray14, charArray25, charArray42);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.fill(charArray9, (int) (byte) 1, (-50), 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(1) > toIndex(-50)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArrayList44);
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test478");
        short[] shortArray6 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray9 = java.util.Arrays.copyOfRange(shortArray6, 0, (int) ' ');
        java.util.Arrays.parallelSort(shortArray9);
        java.util.Arrays.fill(shortArray9, (short) 0);
        java.util.Arrays.fill(shortArray9, (short) 1);
        java.util.Arrays.sort(shortArray9, 0, 1);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertArrayEquals(shortArray6, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray9);
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test479");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        charArrayList57.trimToSize();
        charArrayList57.clear();
        java.lang.Object[] objArray73 = charArrayList57.toArray();
        java.lang.Object[] objArray74 = charArrayList57.toArray();
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray75 = charArrayList57.getFirst();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertArrayEquals(objArray73, new java.lang.Object[] {});
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertArrayEquals(objArray74, new java.lang.Object[] {});
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test480");
        // The following exception was thrown during execution in test generation
        try {
            long long3 = java.util.Objects.checkFromIndexSize(10L, (long) 9, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [10, 10 + 9) out of bounds for length -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test481");
        int[] intArray5 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray5);
        int[] intArray12 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray12);
        java.util.Arrays.sort(intArray12);
        int int15 = java.util.Arrays.compareUnsigned(intArray5, intArray12);
        java.util.Spliterator.OfInt ofInt16 = java.util.Arrays.spliterator(intArray12);
        int[] intArray17 = null;
        int int18 = java.util.Arrays.compareUnsigned(intArray12, intArray17);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertArrayEquals(intArray5, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertArrayEquals(intArray12, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(ofInt16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test482");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        charArrayList57.trimToSize();
        charArrayList57.clear();
        charArrayList57.ensureCapacity((int) (short) -1);
        java.lang.String str75 = java.util.Objects.toIdentityString((java.lang.Object) (short) -1);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test483");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray7 = new byte[] {};
        int int8 = java.util.Arrays.compareUnsigned(byteArray6, byteArray7);
        java.util.Arrays.parallelSort(byteArray6);
        byte[] byteArray11 = java.util.Arrays.copyOf(byteArray6, 7);
        java.util.Arrays.fill(byteArray6, (byte) 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 });
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertArrayEquals(byteArray11, new byte[] { (byte) -1, (byte) -1, (byte) -1, (byte) 0, (byte) 100, (byte) 100, (byte) 0 });
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test484");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        charArrayList0.clear();
        java.lang.Object[] objArray3 = charArrayList0.toArray();
        boolean boolean5 = charArrayList0.equals((java.lang.Object) false);
        java.lang.Object[] objArray6 = charArrayList0.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<char[]> charArrayItor8 = charArrayList0.listIterator((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertArrayEquals(objArray3, new java.lang.Object[] {});
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertArrayEquals(objArray6, new java.lang.Object[] {});
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test485");
        float[] floatArray3 = new float[] { 10, 1L, 100 };
        float[] floatArray5 = java.util.Arrays.copyOf(floatArray3, (int) (short) 1);
        java.util.Arrays.sort(floatArray3);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertArrayEquals(floatArray3, new float[] { 1.0f, 10.0f, 100.0f }, (float) 1.0E-15);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertArrayEquals(floatArray5, new float[] { 10.0f }, (float) 1.0E-15);
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test486");
        java.lang.String str1 = java.util.Objects.toIdentityString((java.lang.Object) "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test487");
        float[] floatArray4 = new float[] { ' ', (-1947244222), 1, 100L };
        java.util.Arrays.parallelSort(floatArray4);
        java.util.Arrays.sort(floatArray4);
        float[] floatArray13 = new float[] { 'a', (-1.0f), 0.0f, (short) 1, 0, 1L };
        int int15 = java.util.Arrays.binarySearch(floatArray13, (float) (short) 1);
        java.util.Arrays.fill(floatArray13, (float) 100);
        java.util.Arrays.parallelSort(floatArray13);
        boolean boolean19 = java.util.Arrays.equals(floatArray4, floatArray13);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertArrayEquals(floatArray4, new float[] { (-1.9472442E9f), 1.0f, 32.0f, 100.0f }, (float) 1.0E-15);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertArrayEquals(floatArray13, new float[] { 100.0f, 100.0f, 100.0f, 100.0f, 100.0f, 100.0f }, (float) 1.0E-15);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test488");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        int int71 = charArrayList57.size();
        int[] intArray77 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray77);
        int[] intArray84 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray84);
        java.util.Arrays.sort(intArray84);
        int int87 = java.util.Arrays.compareUnsigned(intArray77, intArray84);
        int int88 = charArrayList57.lastIndexOf((java.lang.Object) int87);
        java.util.Spliterator<char[]> charArraySpliterator89 = charArrayList57.spliterator();
        boolean boolean90 = charArrayList57.isEmpty();
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertArrayEquals(intArray77, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertArrayEquals(intArray84, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(charArraySpliterator89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test489");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        int int71 = charArrayList57.size();
        int[] intArray77 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray77);
        int[] intArray84 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray84);
        java.util.Arrays.sort(intArray84);
        int int87 = java.util.Arrays.compareUnsigned(intArray77, intArray84);
        int int88 = charArrayList57.lastIndexOf((java.lang.Object) int87);
        java.util.Spliterator<char[]> charArraySpliterator89 = charArrayList57.spliterator();
        java.lang.Object[] objArray90 = charArrayList57.toArray();
        java.util.Random random91 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections.shuffle((java.util.List<char[]>) charArrayList57, random91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"java.util.random.RandomGenerator.nextInt(int)\" because \"rnd\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertArrayEquals(intArray77, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertArrayEquals(intArray84, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(charArraySpliterator89);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[[ , #, 4, #, a], [ , #, a]]");
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test490");
        long[] longArray4 = new long[] { (short) 10, (byte) 0, 100L, '4' };
        long[] longArray5 = new long[] {};
        java.util.Arrays.sort(longArray5, 0, (int) (short) 0);
        int int9 = java.util.Arrays.compareUnsigned(longArray4, longArray5);
        long[] longArray10 = new long[] {};
        java.util.Arrays.sort(longArray10, 0, (int) (short) 0);
        long[] longArray14 = new long[] {};
        java.util.Arrays.sort(longArray14, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray14);
        int int19 = java.util.Arrays.compare(longArray10, longArray14);
        long[] longArray20 = new long[] {};
        java.util.Arrays.sort(longArray20, 0, (int) (short) 0);
        long[] longArray24 = new long[] {};
        java.util.Arrays.sort(longArray24, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray24);
        int int29 = java.util.Arrays.compare(longArray20, longArray24);
        int int30 = java.util.Arrays.compare(longArray10, longArray20);
        java.util.function.Supplier<java.lang.String> strSupplier31 = null;
        long[] longArray32 = java.util.Objects.requireNonNull(longArray20, strSupplier31);
        int int34 = java.util.Arrays.binarySearch(longArray32, (long) (-2060931702));
        int int35 = java.util.Arrays.compareUnsigned(longArray5, longArray32);
        java.util.Arrays.fill(longArray5, 0L);
        java.util.stream.LongStream longStream38 = java.util.Arrays.stream(longArray5);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertArrayEquals(longArray4, new long[] { 10L, 0L, 100L, 52L });
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertArrayEquals(longArray5, new long[] {});
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertArrayEquals(longArray10, new long[] {});
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertArrayEquals(longArray14, new long[] {});
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertArrayEquals(longArray20, new long[] {});
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertArrayEquals(longArray24, new long[] {});
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertArrayEquals(longArray32, new long[] {});
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(longStream38);
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test491");
        // The following exception was thrown during execution in test generation
        try {
            long long3 = java.util.Objects.checkFromToIndex((long) 6, (long) (byte) 1, (long) (-2060931702));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [6, 1) out of bounds for length -2060931702");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test492");
        long[] longArray0 = new long[] {};
        java.util.Arrays.sort(longArray0, 0, (int) (short) 0);
        long[] longArray4 = new long[] {};
        java.util.Arrays.sort(longArray4, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray4);
        int int9 = java.util.Arrays.compare(longArray0, longArray4);
        long[] longArray10 = new long[] {};
        java.util.Arrays.sort(longArray10, 0, (int) (short) 0);
        long[] longArray14 = new long[] {};
        java.util.Arrays.sort(longArray14, 0, (int) (short) 0);
        java.util.Arrays.sort(longArray14);
        int int19 = java.util.Arrays.compare(longArray10, longArray14);
        int int20 = java.util.Arrays.compare(longArray0, longArray10);
        java.util.function.Supplier<java.lang.String> strSupplier21 = null;
        long[] longArray22 = java.util.Objects.requireNonNull(longArray10, strSupplier21);
        int int24 = java.util.Arrays.binarySearch(longArray22, (long) (-2060931702));
        long[] longArray29 = new long[] { 100L, 1L };
        java.util.Arrays.sort(longArray29);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = java.util.Arrays.mismatch(longArray22, (int) ' ', (-2), longArray29, (-50), 31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(32) > toIndex(-2)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertArrayEquals(longArray0, new long[] {});
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertArrayEquals(longArray4, new long[] {});
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertArrayEquals(longArray10, new long[] {});
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertArrayEquals(longArray14, new long[] {});
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertArrayEquals(longArray22, new long[] {});
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertArrayEquals(longArray29, new long[] { 1L, 100L });
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test493");
        java.util.List list0 = java.util.Collections.EMPTY_LIST;
        char[] charArray5 = new char[] { ' ', '#', 'a' };
        char[] charArray11 = new char[] { ' ', '#', '4', '#', 'a' };
        int int12 = java.util.Arrays.compare(charArray5, charArray11);
        char[] charArray16 = new char[] { ' ', '#', 'a' };
        char[] charArray22 = new char[] { ' ', '#', '4', '#', 'a' };
        int int23 = java.util.Arrays.compare(charArray16, charArray22);
        char[] charArray27 = new char[] { ' ', '#', 'a' };
        char[] charArray33 = new char[] { ' ', '#', '4', '#', 'a' };
        int int34 = java.util.Arrays.compare(charArray27, charArray33);
        char[] charArray38 = new char[] { ' ', '#', 'a' };
        char[] charArray44 = new char[] { ' ', '#', '4', '#', 'a' };
        int int45 = java.util.Arrays.compare(charArray38, charArray44);
        char[] charArray49 = new char[] { ' ', '#', 'a' };
        char[] charArray55 = new char[] { ' ', '#', '4', '#', 'a' };
        int int56 = java.util.Arrays.compare(charArray49, charArray55);
        java.util.List<char[]> charArrayList57 = java.util.List.of(charArray22, charArray27, charArray38, charArray55);
        char[][] charArray58 = new char[][] { charArray11, charArray27 };
        java.util.ArrayList<char[]> charArrayList59 = new java.util.ArrayList<char[]>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList59, charArray58);
        char[] charArray64 = new char[] { ' ', '#', 'a' };
        char[] charArray70 = new char[] { ' ', '#', '4', '#', 'a' };
        int int71 = java.util.Arrays.compare(charArray64, charArray70);
        boolean boolean72 = charArrayList59.contains((java.lang.Object) charArray64);
        // The following exception was thrown during execution in test generation
        try {
            list0.add(3, charArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(list0);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertArrayEquals(charArray5, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertArrayEquals(charArray11, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 45 + "'", int12 == 45);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertArrayEquals(charArray16, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertArrayEquals(charArray22, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 45 + "'", int23 == 45);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertArrayEquals(charArray27, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertArrayEquals(charArray33, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 45 + "'", int34 == 45);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertArrayEquals(charArray38, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertArrayEquals(charArray44, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 45 + "'", int45 == 45);
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertArrayEquals(charArray49, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertArrayEquals(charArray55, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 45 + "'", int56 == 45);
        org.junit.Assert.assertNotNull(charArrayList57);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertArrayEquals(charArray64, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertArrayEquals(charArray70, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 45 + "'", int71 == 45);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test494");
        java.util.ArrayList<char[]> charArrayList0 = new java.util.ArrayList<char[]>();
        java.util.List<char[]> charArrayList1 = charArrayList0.reversed();
        java.lang.String str2 = charArrayList0.toString();
        org.junit.Assert.assertNotNull(charArrayList1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test495");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray7 = new byte[] {};
        int int8 = java.util.Arrays.compareUnsigned(byteArray6, byteArray7);
        byte[] byteArray9 = new byte[] {};
        int int10 = java.util.Arrays.mismatch(byteArray7, byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray18 = new byte[] {};
        int int19 = java.util.Arrays.compareUnsigned(byteArray17, byteArray18);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 };
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray33 = new byte[] {};
        int int34 = java.util.Arrays.compareUnsigned(byteArray32, byteArray33);
        byte[] byteArray35 = new byte[] {};
        int int36 = java.util.Arrays.mismatch(byteArray33, byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray44 = new byte[] {};
        int int45 = java.util.Arrays.compareUnsigned(byteArray43, byteArray44);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray53 = new byte[] {};
        int int54 = java.util.Arrays.compareUnsigned(byteArray52, byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray62 = new byte[] {};
        int int63 = java.util.Arrays.compareUnsigned(byteArray61, byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray71 = new byte[] {};
        int int72 = java.util.Arrays.compareUnsigned(byteArray70, byteArray71);
        byte[] byteArray73 = new byte[] {};
        int int74 = java.util.Arrays.mismatch(byteArray71, byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray82 = new byte[] {};
        int int83 = java.util.Arrays.compareUnsigned(byteArray81, byteArray82);
        byte[] byteArray84 = new byte[] {};
        int int85 = java.util.Arrays.mismatch(byteArray82, byteArray84);
        java.util.List<byte[]> byteArrayList86 = java.util.List.of(byteArray9, byteArray17, byteArray25, byteArray35, byteArray44, byteArray52, byteArray62, byteArray73, byteArray84);
        byte[] byteArray89 = java.util.Arrays.copyOfRange(byteArray35, 0, 7);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] {});
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertArrayEquals(byteArray25, new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertArrayEquals(byteArray32, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertArrayEquals(byteArray33, new byte[] {});
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6 + "'", int34 == 6);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertArrayEquals(byteArray35, new byte[] {});
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertArrayEquals(byteArray43, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertArrayEquals(byteArray44, new byte[] {});
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 6 + "'", int45 == 6);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertArrayEquals(byteArray52, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertArrayEquals(byteArray53, new byte[] {});
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertArrayEquals(byteArray61, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertArrayEquals(byteArray62, new byte[] {});
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertArrayEquals(byteArray70, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertArrayEquals(byteArray71, new byte[] {});
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 6 + "'", int72 == 6);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertArrayEquals(byteArray73, new byte[] {});
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertArrayEquals(byteArray81, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertArrayEquals(byteArray82, new byte[] {});
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 6 + "'", int83 == 6);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertArrayEquals(byteArray84, new byte[] {});
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(byteArrayList86);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertArrayEquals(byteArray89, new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 });
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test496");
        short[] shortArray6 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray9 = java.util.Arrays.copyOfRange(shortArray6, 0, (int) ' ');
        short[] shortArray11 = new short[] { (byte) 100 };
        int int12 = java.util.Arrays.compare(shortArray9, shortArray11);
        short[] shortArray19 = new short[] { (short) 10, (short) 100, (byte) 10, (byte) -1, (short) 100, (byte) 1 };
        short[] shortArray22 = java.util.Arrays.copyOfRange(shortArray19, 0, (int) ' ');
        java.util.Arrays.parallelSort(shortArray22);
        java.util.Arrays.fill(shortArray22, (short) 0);
        java.util.Arrays.fill(shortArray22, (short) 1);
        int int28 = java.util.Arrays.compare(shortArray9, shortArray22);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.parallelSort(shortArray22, (-2), (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertArrayEquals(shortArray6, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertArrayEquals(shortArray11, new short[] { (short) 100 });
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-90) + "'", int12 == (-90));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertArrayEquals(shortArray19, new short[] { (short) 10, (short) 100, (short) 10, (short) -1, (short) 100, (short) 1 });
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test497");
        // The following exception was thrown during execution in test generation
        try {
            long long3 = java.util.Objects.checkFromToIndex((long) 100, (long) (-50), (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Range [100, -50) out of bounds for length 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test498");
        char[] charArray3 = new char[] { ' ', '#', 'a' };
        char[] charArray9 = new char[] { ' ', '#', '4', '#', 'a' };
        int int10 = java.util.Arrays.compare(charArray3, charArray9);
        char[] charArray14 = new char[] { ' ', '#', 'a' };
        char[] charArray20 = new char[] { ' ', '#', '4', '#', 'a' };
        int int21 = java.util.Arrays.compare(charArray14, charArray20);
        char[] charArray25 = new char[] { ' ', '#', 'a' };
        char[] charArray31 = new char[] { ' ', '#', '4', '#', 'a' };
        int int32 = java.util.Arrays.compare(charArray25, charArray31);
        char[] charArray36 = new char[] { ' ', '#', 'a' };
        char[] charArray42 = new char[] { ' ', '#', '4', '#', 'a' };
        int int43 = java.util.Arrays.compare(charArray36, charArray42);
        char[] charArray47 = new char[] { ' ', '#', 'a' };
        char[] charArray53 = new char[] { ' ', '#', '4', '#', 'a' };
        int int54 = java.util.Arrays.compare(charArray47, charArray53);
        java.util.List<char[]> charArrayList55 = java.util.List.of(charArray20, charArray25, charArray36, charArray53);
        char[][] charArray56 = new char[][] { charArray9, charArray25 };
        java.util.ArrayList<char[]> charArrayList57 = new java.util.ArrayList<char[]>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<char[]>) charArrayList57, charArray56);
        char[] charArray62 = new char[] { ' ', '#', 'a' };
        char[] charArray68 = new char[] { ' ', '#', '4', '#', 'a' };
        int int69 = java.util.Arrays.compare(charArray62, charArray68);
        boolean boolean70 = charArrayList57.contains((java.lang.Object) charArray62);
        int int71 = charArrayList57.size();
        int[] intArray77 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray77);
        int[] intArray84 = new int[] { (byte) 0, 45, (-2060931702), (-1), (-1947244222) };
        java.util.Arrays.parallelSort(intArray84);
        java.util.Arrays.sort(intArray84);
        int int87 = java.util.Arrays.compareUnsigned(intArray77, intArray84);
        int int88 = charArrayList57.lastIndexOf((java.lang.Object) int87);
        java.util.Spliterator<char[]> charArraySpliterator89 = charArrayList57.spliterator();
        java.lang.Object[] objArray90 = charArrayList57.toArray();
        char[] charArray91 = charArrayList57.getLast();
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertArrayEquals(charArray3, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertArrayEquals(charArray9, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 45 + "'", int10 == 45);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertArrayEquals(charArray14, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertArrayEquals(charArray20, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 45 + "'", int21 == 45);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertArrayEquals(charArray25, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertArrayEquals(charArray31, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 45 + "'", int32 == 45);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertArrayEquals(charArray36, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertArrayEquals(charArray42, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 45 + "'", int43 == 45);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertArrayEquals(charArray47, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertArrayEquals(charArray53, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 45 + "'", int54 == 45);
        org.junit.Assert.assertNotNull(charArrayList55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertArrayEquals(charArray62, new char[] { ' ', '#', 'a' });
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertArrayEquals(charArray68, new char[] { ' ', '#', '4', '#', 'a' });
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 45 + "'", int69 == 45);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertArrayEquals(intArray77, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertArrayEquals(intArray84, new int[] { (-2060931702), (-1947244222), (-1), 0, 45 });
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(charArraySpliterator89);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[[ , #, 4, #, a], [ , #, a]]");
        org.junit.Assert.assertNotNull(charArray91);
        org.junit.Assert.assertArrayEquals(charArray91, new char[] { ' ', '#', 'a' });
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test499");
        long[] longArray2 = new long[] { 100L, 1L };
        java.util.Arrays.sort(longArray2);
        java.util.Arrays.sort(longArray2);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertArrayEquals(longArray2, new long[] { 1L, 100L });
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "SumaListasDigitosReg0.test500");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray7 = new byte[] {};
        int int8 = java.util.Arrays.compareUnsigned(byteArray6, byteArray7);
        byte[] byteArray9 = new byte[] {};
        int int10 = java.util.Arrays.mismatch(byteArray7, byteArray9);
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray18 = new byte[] {};
        int int19 = java.util.Arrays.compareUnsigned(byteArray17, byteArray18);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 };
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray33 = new byte[] {};
        int int34 = java.util.Arrays.compareUnsigned(byteArray32, byteArray33);
        byte[] byteArray35 = new byte[] {};
        int int36 = java.util.Arrays.mismatch(byteArray33, byteArray35);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray44 = new byte[] {};
        int int45 = java.util.Arrays.compareUnsigned(byteArray43, byteArray44);
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray53 = new byte[] {};
        int int54 = java.util.Arrays.compareUnsigned(byteArray52, byteArray53);
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray62 = new byte[] {};
        int int63 = java.util.Arrays.compareUnsigned(byteArray61, byteArray62);
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray71 = new byte[] {};
        int int72 = java.util.Arrays.compareUnsigned(byteArray70, byteArray71);
        byte[] byteArray73 = new byte[] {};
        int int74 = java.util.Arrays.mismatch(byteArray71, byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 };
        byte[] byteArray82 = new byte[] {};
        int int83 = java.util.Arrays.compareUnsigned(byteArray81, byteArray82);
        byte[] byteArray84 = new byte[] {};
        int int85 = java.util.Arrays.mismatch(byteArray82, byteArray84);
        java.util.List<byte[]> byteArrayList86 = java.util.List.of(byteArray9, byteArray17, byteArray25, byteArray35, byteArray44, byteArray52, byteArray62, byteArray73, byteArray84);
        int int88 = java.util.Arrays.binarySearch(byteArray52, (byte) 1);
        java.util.Arrays.fill(byteArray52, (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Arrays.sort(byteArray52, (-2060931702), (-2060931702));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -2060931702");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] {});
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertArrayEquals(byteArray25, new byte[] { (byte) -1, (byte) 0, (byte) 10, (byte) 1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertArrayEquals(byteArray32, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertArrayEquals(byteArray33, new byte[] {});
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6 + "'", int34 == 6);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertArrayEquals(byteArray35, new byte[] {});
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertArrayEquals(byteArray43, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertArrayEquals(byteArray44, new byte[] {});
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 6 + "'", int45 == 6);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertArrayEquals(byteArray52, new byte[] { (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 10, (byte) 10 });
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertArrayEquals(byteArray53, new byte[] {});
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertArrayEquals(byteArray61, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertArrayEquals(byteArray62, new byte[] {});
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertArrayEquals(byteArray70, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertArrayEquals(byteArray71, new byte[] {});
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 6 + "'", int72 == 6);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertArrayEquals(byteArray73, new byte[] {});
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertArrayEquals(byteArray81, new byte[] { (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) -1, (byte) 100 });
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertArrayEquals(byteArray82, new byte[] {});
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 6 + "'", int83 == 6);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertArrayEquals(byteArray84, new byte[] {});
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(byteArrayList86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-6) + "'", int88 == (-6));
    }
}

